d4081f3c9ebd38e42809f06177419b88
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Picker;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _picker = _interopRequireDefault(require("./picker"));
var _utils = require("./utils");
var _constants = require("./constants");
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["value", "locale", "maximumDate", "minimumDate", "minuteInterval", "timeZoneOffsetInMinutes", "timeZoneName", "textColor", "accentColor", "themeVariant", "onChange", "mode", "display", "disabled"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var getDisplaySafe = function getDisplaySafe(display) {
  var majorVersionIOS = parseInt(_reactNative.Platform.Version, 10);
  if (display === _constants.IOS_DISPLAY.inline && majorVersionIOS < 14) {
    return _constants.IOS_DISPLAY.spinner;
  }
  if (majorVersionIOS < 14) {
    return _constants.IOS_DISPLAY.spinner;
  }
  return display;
};
function Picker(_ref) {
  var value = _ref.value,
    locale = _ref.locale,
    maximumDate = _ref.maximumDate,
    minimumDate = _ref.minimumDate,
    minuteInterval = _ref.minuteInterval,
    timeZoneOffsetInMinutes = _ref.timeZoneOffsetInMinutes,
    timeZoneName = _ref.timeZoneName,
    textColor = _ref.textColor,
    accentColor = _ref.accentColor,
    themeVariant = _ref.themeVariant,
    onChange = _ref.onChange,
    _ref$mode = _ref.mode,
    mode = _ref$mode === void 0 ? _constants.IOS_MODE.date : _ref$mode,
    _ref$display = _ref.display,
    providedDisplay = _ref$display === void 0 ? _constants.IOS_DISPLAY.default : _ref$display,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    other = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  (0, _utils.sharedPropsValidation)({
    value: value,
    timeZoneOffsetInMinutes: timeZoneOffsetInMinutes,
    timeZoneName: timeZoneName
  });
  var display = getDisplaySafe(providedDisplay);
  var _onChange = function _onChange(event) {
    var timestamp = event.nativeEvent.timestamp;
    var unifiedEvent = Object.assign({}, event, {
      type: _constants.EVENT_TYPE_SET
    });
    var date = timestamp !== undefined ? new Date(timestamp) : undefined;
    onChange && onChange(unifiedEvent, date);
  };
  var onDismiss = function onDismiss() {
    onChange && onChange({
      type: _constants.EVENT_TYPE_DISMISSED,
      nativeEvent: {
        timestamp: value.getTime(),
        utcOffset: 0
      }
    }, value);
  };
  return (0, _jsxRuntime.jsx)(_picker.default, Object.assign({}, other, {
    date: (0, _utils.dateToMilliseconds)(value),
    locale: locale !== null && locale !== '' ? locale : undefined,
    maximumDate: (0, _utils.dateToMilliseconds)(maximumDate),
    minimumDate: (0, _utils.dateToMilliseconds)(minimumDate),
    mode: mode,
    minuteInterval: minuteInterval,
    timeZoneOffsetInMinutes: timeZoneOffsetInMinutes,
    timeZoneName: timeZoneName,
    onChange: _onChange,
    onPickerDismiss: onDismiss,
    textColor: textColor,
    accentColor: accentColor,
    themeVariant: themeVariant,
    onStartShouldSetResponder: function onStartShouldSetResponder() {
      return true;
    },
    onResponderTerminationRequest: function onResponderTerminationRequest() {
      return false;
    },
    displayIOS: display,
    enabled: disabled !== true
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,