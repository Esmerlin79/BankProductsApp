081810b54a43a47fd2d6e38b40caa9b0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomDatePicker = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _datetimepicker = _interopRequireDefault(require("@react-native-community/datetimepicker"));
var _theme = _interopRequireDefault(require("../themes/theme"));
var _dateFns = require("date-fns");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var CustomDatePicker = exports.CustomDatePicker = function CustomDatePicker(_ref) {
  var value = _ref.value,
    errorInput = _ref.errorInput,
    messageError = _ref.messageError,
    style = _ref.style,
    disabled = _ref.disabled,
    onChange = _ref.onChange;
  var _useState = (0, _react.useState)(value ? new Date(value) : new Date()),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    date = _useState2[0],
    setDate = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    showDatePicker = _useState4[0],
    setShowDatePicker = _useState4[1];
  var handleDateChange = function handleDateChange(event, newDate) {
    setShowDatePicker(false);
    if (newDate !== undefined) {
      setDate(newDate);
      onChange(newDate.toISOString());
    }
  };
  (0, _react.useEffect)(function () {
    if (value) setDate(new Date(value));
  }, [value]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      testID: "datePicker",
      style: [style, Object.assign({}, styles.inputField, {
        borderColor: errorInput ? _theme.default.red : _theme.default.lightGrey
      }), disabled && styles.disabledField],
      onTouchEnd: function onTouchEnd() {
        return setShowDatePicker(!disabled && true);
      },
      children: [showDatePicker && (0, _jsxRuntime.jsx)(_datetimepicker.default, {
        value: date,
        mode: "date",
        display: "default",
        onChange: handleDateChange
      }), !showDatePicker && (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: Object.assign({}, styles.textDate, {
          color: disabled ? _theme.default.gray : _theme.default.black
        }),
        children: (0, _dateFns.format)(date, 'dd/MM/yyyy')
      })]
    }), errorInput && (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.text,
      children: messageError
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  inputField: {
    height: 50,
    borderRadius: 5,
    padding: 10,
    borderWidth: 1
  },
  textDate: {
    fontSize: 16
  },
  text: {
    color: _theme.default.red,
    fontSize: 16,
    marginTop: 5
  },
  disabledField: {
    backgroundColor: _theme.default.darkGrey
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,