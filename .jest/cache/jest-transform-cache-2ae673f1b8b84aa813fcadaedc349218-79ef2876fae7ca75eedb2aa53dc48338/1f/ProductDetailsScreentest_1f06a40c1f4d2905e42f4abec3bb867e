940e26f8b2454f1484f7a13a184b34e4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ProductDetailsScreen = require("../ProductDetailsScreen");
var _ProductContext = require("../../context/ProductContext");
var _jsxRuntime = require("react/jsx-runtime");
describe('ProductDetailsScreen', function () {
  var mockProduct = {
    id: '1',
    name: 'Product 1',
    description: 'Description of Product 1',
    logo: 'https://example.com/product1.jpg',
    date_release: '2023-10-27T10:00:00Z',
    date_revision: '2023-10-28T14:30:00Z'
  };
  var mockRoute = {
    params: {
      product: mockProduct
    }
  };
  it('renders correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProductDetailsScreen.ProductDetailsScreen, {
        navigation: {
          goBack: jest.fn()
        },
        route: mockRoute
      })),
      getByText = _render.getByText;
    expect(getByText(`ID: ${mockProduct.id}`)).toBeTruthy();
    expect(getByText(`${mockProduct.name}`)).toBeTruthy();
    expect(getByText(`${mockProduct.description}`)).toBeTruthy();
    expect(getByText('Fecha liberacion')).toBeTruthy();
    expect(getByText('Fecha revision')).toBeTruthy();
  });
  it('navigates to ProductRegisterScreen on Edit button press', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProductContext.ProductsContext.Provider, {
        value: {
          deleteProduct: jest.fn()
        },
        children: (0, _jsxRuntime.jsx)(_ProductDetailsScreen.ProductDetailsScreen, {
          navigation: {
            goBack: jest.fn(),
            navigate: jest.fn()
          },
          route: mockRoute
        })
      })),
      getByTestId = _render2.getByTestId;
    _reactNative.fireEvent.press(getByTestId('edit-button'));
    expect(navigation.navigate).toHaveBeenCalledWith('ProductRegisterScreen', {
      product: mockProduct
    });
  });
  it('shows modal on Delete button press', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProductContext.ProductsContext.Provider, {
        value: {
          deleteProduct: jest.fn()
        },
        children: (0, _jsxRuntime.jsx)(_ProductDetailsScreen.ProductDetailsScreen, {
          navigation: {
            goBack: jest.fn(),
            navigate: jest.fn()
          },
          route: mockRoute
        })
      })),
      getByTestId = _render3.getByTestId,
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('Eliminar'));
    expect(getByText(`Â¿Estas seguro de eliminar el producto ${mockProduct.name}?`)).toBeTruthy();
  }));
  it('handles product deletion correctly', (0, _asyncToGenerator2.default)(function* () {
    var deleteProduct = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProductContext.ProductsContext.Provider, {
        value: {
          deleteProduct: deleteProduct
        },
        children: (0, _jsxRuntime.jsx)(_ProductDetailsScreen.ProductDetailsScreen, {
          navigation: {
            goBack: jest.fn(),
            navigate: jest.fn()
          },
          route: mockRoute
        })
      })),
      getByText = _render4.getByText;
    _reactNative.fireEvent.press(getByText('Eliminar'));
    yield (0, _reactNative.waitFor)(function () {
      expect(deleteProduct).toHaveBeenCalledWith(mockProduct.id);
      expect(navigation.pop).toHaveBeenCalled();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,