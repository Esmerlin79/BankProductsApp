b57298d72386d276b992ae5d753ca9e6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProductRegisterScreen = void 0;
var _reactNative = require("react-native");
var _theme = _interopRequireDefault(require("../themes/theme"));
var _components = require("../components");
var _utils = require("../utils");
var _useProductRegister2 = _interopRequireDefault(require("../hooks/useProductRegister"));
var _jsxRuntime = require("react/jsx-runtime");
var ProductRegisterScreen = exports.ProductRegisterScreen = function ProductRegisterScreen(_ref) {
  var _route$params;
  var navigation = _ref.navigation,
    route = _ref.route;
  var product = (_route$params = route.params) == null ? void 0 : _route$params.product;
  var _useProductRegister = (0, _useProductRegister2.default)(product, navigation),
    form = _useProductRegister.form,
    isLoading = _useProductRegister.isLoading,
    _onChange = _useProductRegister.onChange,
    isProductIdValid = _useProductRegister.isProductIdValid,
    isReleaseDateValid = _useProductRegister.isReleaseDateValid,
    handleReleaseChange = _useProductRegister.handleReleaseChange,
    clearForm = _useProductRegister.clearForm,
    handleCreateOrUpdateProduct = _useProductRegister.handleCreateOrUpdateProduct;
  var id = form.id,
    name = form.name,
    description = form.description,
    logo = form.logo,
    releaseDate = form.releaseDate,
    reviewDate = form.reviewDate;
  return (0, _jsxRuntime.jsx)(_reactNative.SafeAreaView, {
    style: {
      flex: 1
    },
    children: (0, _jsxRuntime.jsx)(_reactNative.KeyboardAvoidingView, {
      style: styles.container,
      behavior: _reactNative.Platform.OS === 'ios' ? 'padding' : 'height',
      children: (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
        style: {
          flex: 1
        },
        showsVerticalScrollIndicator: false,
        children: [(0, _jsxRuntime.jsx)(_components.Header, {
          title: "BANCO PICHINCHA",
          showArrowLeft: true,
          onBack: function onBack() {
            return navigation.pop();
          }
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.contentProductRegister,
          children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: styles.title,
            children: ["Formulario de ", product ? 'Edicci√≥n' : 'Registro']
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: Object.assign({}, styles.inputGroup, {
              marginTop: 20
            }),
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.text,
              children: "ID"
            }), (0, _jsxRuntime.jsx)(_components.CustomTextInput, {
              onChange: function onChange(value) {
                return _onChange(value, 'id');
              },
              value: id,
              errorInput: isProductIdValid,
              messageError: "ID no valido",
              disabled: product ? true : false
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.inputGroup,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.text,
              children: "Nombre"
            }), (0, _jsxRuntime.jsx)(_components.CustomTextInput, {
              onChange: function onChange(value) {
                return _onChange(value, 'name');
              },
              value: name,
              errorInput: (0, _utils.validateInputs)('name', name),
              messageError: "Este campo es requerido!"
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.inputGroup,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.text,
              children: "Descripcion"
            }), (0, _jsxRuntime.jsx)(_components.CustomTextInput, {
              onChange: function onChange(value) {
                return _onChange(value, 'description');
              },
              value: description,
              errorInput: (0, _utils.validateInputs)('description', description),
              messageError: "Este campo es requerido!"
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.inputGroup,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.text,
              children: "Logo"
            }), (0, _jsxRuntime.jsx)(_components.CustomTextInput, {
              onChange: function onChange(value) {
                return _onChange(value, 'logo');
              },
              value: logo,
              errorInput: (0, _utils.validateInputs)('logo', logo),
              messageError: "Este campo es requerido!"
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.inputGroup,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.text,
              children: "Fecha Liberaci\xF3n"
            }), (0, _jsxRuntime.jsx)(_components.CustomDatePicker, {
              onChange: function onChange(value) {
                return handleReleaseChange(value);
              },
              value: releaseDate,
              errorInput: isReleaseDateValid,
              messageError: "La fecha no debe ser menor a la actual"
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.inputGroup,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.text,
              children: "Fecha Revisi\xF3n"
            }), (0, _jsxRuntime.jsx)(_components.CustomDatePicker, {
              onChange: function onChange(value) {
                return _onChange(value, 'reviewDate');
              },
              value: reviewDate,
              disabled: true
            })]
          })]
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: {
            flex: 1
          }
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.containerButtons,
          children: [(0, _jsxRuntime.jsx)(_components.CustomButton, {
            onPress: function onPress() {
              return handleCreateOrUpdateProduct();
            },
            title: "Enviar",
            backgroundColor: _theme.default.yellow,
            color: _theme.default.darkBlue
          }), (0, _jsxRuntime.jsx)(_components.CustomButton, {
            onPress: function onPress() {
              return clearForm();
            },
            title: "Reiniciar",
            backgroundColor: _theme.default.purple,
            color: _theme.default.darkBlue
          })]
        }), isLoading && (0, _jsxRuntime.jsx)(_components.CustomLoading, {})]
      })
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: _theme.default.lightWhite
  },
  contentProductRegister: {
    padding: 20
  },
  title: {
    fontSize: 24,
    color: _theme.default.black,
    fontWeight: 'bold'
  },
  inputGroup: {
    marginTop: 10
  },
  text: {
    fontSize: 16,
    color: _theme.default.black,
    fontWeight: '400',
    marginBottom: 10
  },
  containerButtons: {
    width: '100%',
    padding: 20,
    alignSelf: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,