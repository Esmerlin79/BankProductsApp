62ad5e6f0ff72cb60ec8819e20a1b5c9
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _elements = require("@react-navigation/elements");
var _color = _interopRequireDefault(require("color"));
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _CardStyleInterpolators = require("../../TransitionConfigs/CardStyleInterpolators");
var _TransitionPresets = require("../../TransitionConfigs/TransitionPresets");
var _findLastIndex = _interopRequireDefault(require("../../utils/findLastIndex"));
var _getDistanceForDirection = _interopRequireDefault(require("../../utils/getDistanceForDirection"));
var _Screens = require("../Screens");
var _Card = require("./Card");
var _CardContainer = _interopRequireDefault(require("./CardContainer"));
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var EPSILON = 1e-5;
var STATE_INACTIVE = 0;
var STATE_TRANSITIONING_OR_BELOW_TOP = 1;
var STATE_ON_TOP = 2;
var FALLBACK_DESCRIPTOR = Object.freeze({
  options: {}
});
var getInterpolationIndex = function getInterpolationIndex(scenes, index) {
  var cardStyleInterpolator = scenes[index].descriptor.options.cardStyleInterpolator;
  var interpolationIndex = 0;
  for (var i = index - 1; i >= 0; i--) {
    var _scenes$i;
    var cardStyleInterpolatorCurrent = (_scenes$i = scenes[i]) === null || _scenes$i === void 0 ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;
    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {
      break;
    }
    interpolationIndex++;
  }
  return interpolationIndex;
};
var getIsModal = function getIsModal(scene, interpolationIndex, isParentModal) {
  if (isParentModal) {
    return true;
  }
  var cardStyleInterpolator = scene.descriptor.options.cardStyleInterpolator;
  var isModalPresentation = (0, _Card.getIsModalPresentation)(cardStyleInterpolator);
  var isModal = isModalPresentation && interpolationIndex !== 0;
  return isModal;
};
var getHeaderHeights = function getHeaderHeights(scenes, insets, isParentHeaderShown, isParentModal, layout, previous) {
  return scenes.reduce(function (acc, curr, index) {
    var _curr$descriptor$opti = curr.descriptor.options,
      _curr$descriptor$opti2 = _curr$descriptor$opti.headerStatusBarHeight,
      headerStatusBarHeight = _curr$descriptor$opti2 === void 0 ? isParentHeaderShown ? 0 : insets.top : _curr$descriptor$opti2,
      headerStyle = _curr$descriptor$opti.headerStyle;
    var style = _reactNative.StyleSheet.flatten(headerStyle || {});
    var height = 'height' in style && typeof style.height === 'number' ? style.height : previous[curr.route.key];
    var interpolationIndex = getInterpolationIndex(scenes, index);
    var isModal = getIsModal(curr, interpolationIndex, isParentModal);
    acc[curr.route.key] = typeof height === 'number' ? height : (0, _elements.getDefaultHeaderHeight)(layout, isModal, headerStatusBarHeight);
    return acc;
  }, {});
};
var getDistanceFromOptions = function getDistanceFromOptions(layout, descriptor) {
  var _ref4 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},
    presentation = _ref4.presentation,
    _ref4$gestureDirectio = _ref4.gestureDirection,
    gestureDirection = _ref4$gestureDirectio === void 0 ? presentation === 'modal' ? _TransitionPresets.ModalTransition.gestureDirection : _TransitionPresets.DefaultTransition.gestureDirection : _ref4$gestureDirectio;
  return (0, _getDistanceForDirection.default)(layout, gestureDirection);
};
var getProgressFromGesture = function getProgressFromGesture(gesture, layout, descriptor) {
  var distance = getDistanceFromOptions({
    width: Math.max(1, layout.width),
    height: Math.max(1, layout.height)
  }, descriptor);
  if (distance > 0) {
    return gesture.interpolate({
      inputRange: [0, distance],
      outputRange: [1, 0]
    });
  }
  return gesture.interpolate({
    inputRange: [distance, 0],
    outputRange: [0, 1]
  });
};
var CardStack = function (_React$Component) {
  (0, _inherits2.default)(CardStack, _React$Component);
  var _super = _createSuper(CardStack);
  function CardStack(_props) {
    var _this;
    (0, _classCallCheck2.default)(this, CardStack);
    _this = _super.call(this, _props);
    _this.handleLayout = function (e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
        height = _e$nativeEvent$layout.height,
        width = _e$nativeEvent$layout.width;
      var layout = {
        width: width,
        height: height
      };
      _this.setState(function (state, props) {
        if (height === state.layout.height && width === state.layout.width) {
          return null;
        }
        return {
          layout: layout,
          headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)
        };
      });
    };
    _this.handleHeaderLayout = function (_ref) {
      var route = _ref.route,
        height = _ref.height;
      _this.setState(function (_ref2) {
        var headerHeights = _ref2.headerHeights;
        var previousHeight = headerHeights[route.key];
        if (previousHeight === height) {
          return null;
        }
        return {
          headerHeights: Object.assign({}, headerHeights, (0, _defineProperty2.default)({}, route.key, height))
        };
      });
    };
    _this.getFocusedRoute = function () {
      var state = _this.props.state;
      return state.routes[state.index];
    };
    _this.getPreviousScene = function (_ref3) {
      var route = _ref3.route;
      var getPreviousRoute = _this.props.getPreviousRoute;
      var scenes = _this.state.scenes;
      var previousRoute = getPreviousRoute({
        route: route
      });
      if (previousRoute) {
        var previousScene = scenes.find(function (scene) {
          return scene.descriptor.route.key === previousRoute.key;
        });
        return previousScene;
      }
      return undefined;
    };
    _this.state = {
      routes: [],
      scenes: [],
      gestures: {},
      layout: _elements.SafeAreaProviderCompat.initialMetrics.frame,
      descriptors: _this.props.descriptors,
      headerHeights: {}
    };
    return _this;
  }
  (0, _createClass2.default)(CardStack, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props = this.props,
        insets = _this$props.insets,
        state = _this$props.state,
        routes = _this$props.routes,
        closingRouteKeys = _this$props.closingRouteKeys,
        onOpenRoute = _this$props.onOpenRoute,
        onCloseRoute = _this$props.onCloseRoute,
        renderHeader = _this$props.renderHeader,
        renderScene = _this$props.renderScene,
        isParentHeaderShown = _this$props.isParentHeaderShown,
        isParentModal = _this$props.isParentModal,
        onTransitionStart = _this$props.onTransitionStart,
        onTransitionEnd = _this$props.onTransitionEnd,
        onGestureStart = _this$props.onGestureStart,
        onGestureEnd = _this$props.onGestureEnd,
        onGestureCancel = _this$props.onGestureCancel,
        _this$props$detachIna = _this$props.detachInactiveScreens,
        detachInactiveScreens = _this$props$detachIna === void 0 ? _reactNative.Platform.OS === 'web' || _reactNative.Platform.OS === 'android' || _reactNative.Platform.OS === 'ios' : _this$props$detachIna;
      var _this$state = this.state,
        scenes = _this$state.scenes,
        layout = _this$state.layout,
        gestures = _this$state.gestures,
        headerHeights = _this$state.headerHeights;
      var focusedRoute = state.routes[state.index];
      var focusedHeaderHeight = headerHeights[focusedRoute.key];
      var isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(function (scene) {
        var _scene$descriptor$opt;
        var options = (_scene$descriptor$opt = scene.descriptor.options) != null ? _scene$descriptor$opt : {};
        var headerMode = options.headerMode,
          headerTransparent = options.headerTransparent,
          _options$headerShown = options.headerShown,
          headerShown = _options$headerShown === void 0 ? true : _options$headerShown;
        if (headerTransparent || headerShown === false || headerMode === 'screen') {
          return true;
        }
        return false;
      });
      var activeScreensLimit = 1;
      for (var i = scenes.length - 1; i >= 0; i--) {
        var options = scenes[i].descriptor.options;
        var _options$detachPrevio = options.detachPreviousScreen,
          detachPreviousScreen = _options$detachPrevio === void 0 ? options.presentation === 'transparentModal' ? false : (0, _Card.getIsModalPresentation)(options.cardStyleInterpolator) ? i !== (0, _findLastIndex.default)(scenes, function (scene) {
            var cardStyleInterpolator = scene.descriptor.options.cardStyleInterpolator;
            return cardStyleInterpolator === _CardStyleInterpolators.forModalPresentationIOS || (cardStyleInterpolator === null || cardStyleInterpolator === void 0 ? void 0 : cardStyleInterpolator.name) === 'forModalPresentationIOS';
          }) : true : _options$detachPrevio;
        if (detachPreviousScreen === false) {
          activeScreensLimit++;
        } else {
          if (i <= scenes.length - 2) {
            break;
          }
        }
      }
      var floatingHeader = React.createElement(React.Fragment, {
        key: "header"
      }, renderHeader({
        mode: 'float',
        layout: layout,
        scenes: scenes,
        getPreviousScene: this.getPreviousScene,
        getFocusedRoute: this.getFocusedRoute,
        onContentHeightChange: this.handleHeaderLayout,
        style: [styles.floating, isFloatHeaderAbsolute && [{
          height: focusedHeaderHeight
        }, styles.absolute]]
      }));
      return React.createElement(_elements.Background, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(_Screens.MaybeScreenContainer, {
        enabled: detachInactiveScreens,
        style: styles.container,
        onLayout: this.handleLayout
      }, routes.map(function (route, index, self) {
        var _scenes, _scenes2;
        var focused = focusedRoute.key === route.key;
        var gesture = gestures[route.key];
        var scene = scenes[index];
        var isScreenActive = 1;
        if (index < self.length - activeScreensLimit - 1) {
          isScreenActive = STATE_INACTIVE;
        } else {
          var sceneForActivity = scenes[self.length - 1];
          var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;
          isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({
            inputRange: [0, 1 - EPSILON, 1],
            outputRange: [1, 1, outputValue],
            extrapolate: 'clamp'
          }) : STATE_TRANSITIONING_OR_BELOW_TOP;
        }
        var _scene$descriptor$opt2 = scene.descriptor.options,
          _scene$descriptor$opt3 = _scene$descriptor$opt2.headerShown,
          headerShown = _scene$descriptor$opt3 === void 0 ? true : _scene$descriptor$opt3,
          headerTransparent = _scene$descriptor$opt2.headerTransparent,
          headerStyle = _scene$descriptor$opt2.headerStyle,
          headerTintColor = _scene$descriptor$opt2.headerTintColor,
          freezeOnBlur = _scene$descriptor$opt2.freezeOnBlur;
        var safeAreaInsetTop = insets.top;
        var safeAreaInsetRight = insets.right;
        var safeAreaInsetBottom = insets.bottom;
        var safeAreaInsetLeft = insets.left;
        var headerHeight = headerShown !== false ? headerHeights[route.key] : 0;
        var headerDarkContent;
        if (headerShown) {
          if (typeof headerTintColor === 'string') {
            headerDarkContent = (0, _color.default)(headerTintColor).isDark();
          } else {
            var flattenedHeaderStyle = _reactNative.StyleSheet.flatten(headerStyle);
            if (flattenedHeaderStyle && 'backgroundColor' in flattenedHeaderStyle && typeof flattenedHeaderStyle.backgroundColor === 'string') {
              headerDarkContent = !(0, _color.default)(flattenedHeaderStyle.backgroundColor).isDark();
            }
          }
        }
        var interpolationIndex = getInterpolationIndex(scenes, index);
        var isModal = getIsModal(scene, interpolationIndex, isParentModal);
        var isNextScreenTransparent = ((_scenes = scenes[index + 1]) === null || _scenes === void 0 ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';
        var detachCurrentScreen = ((_scenes2 = scenes[index + 1]) === null || _scenes2 === void 0 ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;
        return React.createElement(_Screens.MaybeScreen, {
          key: route.key,
          style: _reactNative.StyleSheet.absoluteFill,
          enabled: detachInactiveScreens,
          active: isScreenActive,
          freezeOnBlur: freezeOnBlur,
          pointerEvents: "box-none"
        }, React.createElement(_CardContainer.default, {
          index: index,
          interpolationIndex: interpolationIndex,
          modal: isModal,
          active: index === self.length - 1,
          focused: focused,
          closing: closingRouteKeys.includes(route.key),
          layout: layout,
          gesture: gesture,
          scene: scene,
          safeAreaInsetTop: safeAreaInsetTop,
          safeAreaInsetRight: safeAreaInsetRight,
          safeAreaInsetBottom: safeAreaInsetBottom,
          safeAreaInsetLeft: safeAreaInsetLeft,
          onGestureStart: onGestureStart,
          onGestureCancel: onGestureCancel,
          onGestureEnd: onGestureEnd,
          headerHeight: headerHeight,
          isParentHeaderShown: isParentHeaderShown,
          onHeaderHeightChange: _this2.handleHeaderLayout,
          getPreviousScene: _this2.getPreviousScene,
          getFocusedRoute: _this2.getFocusedRoute,
          headerDarkContent: headerDarkContent,
          hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,
          renderHeader: renderHeader,
          renderScene: renderScene,
          onOpenRoute: onOpenRoute,
          onCloseRoute: onCloseRoute,
          onTransitionStart: onTransitionStart,
          onTransitionEnd: onTransitionEnd,
          isNextScreenTransparent: isNextScreenTransparent,
          detachCurrentScreen: detachCurrentScreen
        }));
      })), isFloatHeaderAbsolute ? floatingHeader : null);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (props.routes === state.routes && props.descriptors === state.descriptors) {
        return null;
      }
      var gestures = props.routes.reduce(function (acc, curr) {
        var descriptor = props.descriptors[curr.key];
        var _ref5 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},
          animationEnabled = _ref5.animationEnabled;
        acc[curr.key] = state.gestures[curr.key] || new _reactNative.Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(state.layout, descriptor) : 0);
        return acc;
      }, {});
      var scenes = props.routes.map(function (route, index, self) {
        var _descriptor$options$h;
        var previousRoute = self[index - 1];
        var nextRoute = self[index + 1];
        var oldScene = state.scenes[index];
        var currentGesture = gestures[route.key];
        var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;
        var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;
        var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);
        var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];
        var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];
        var optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;
        var defaultTransitionPreset = optionsForTransitionConfig.presentation === 'modal' ? _TransitionPresets.ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? _TransitionPresets.ModalFadeTransition : _TransitionPresets.DefaultTransition;
        var _optionsForTransition = optionsForTransitionConfig.animationEnabled,
          animationEnabled = _optionsForTransition === void 0 ? _reactNative.Platform.OS !== 'web' && _reactNative.Platform.OS !== 'windows' && _reactNative.Platform.OS !== 'macos' : _optionsForTransition,
          _optionsForTransition2 = optionsForTransitionConfig.gestureEnabled,
          gestureEnabled = _optionsForTransition2 === void 0 ? _reactNative.Platform.OS === 'ios' && animationEnabled : _optionsForTransition2,
          _optionsForTransition3 = optionsForTransitionConfig.gestureDirection,
          gestureDirection = _optionsForTransition3 === void 0 ? defaultTransitionPreset.gestureDirection : _optionsForTransition3,
          _optionsForTransition4 = optionsForTransitionConfig.transitionSpec,
          transitionSpec = _optionsForTransition4 === void 0 ? defaultTransitionPreset.transitionSpec : _optionsForTransition4,
          _optionsForTransition5 = optionsForTransitionConfig.cardStyleInterpolator,
          cardStyleInterpolator = _optionsForTransition5 === void 0 ? animationEnabled === false ? _CardStyleInterpolators.forNoAnimation : defaultTransitionPreset.cardStyleInterpolator : _optionsForTransition5,
          _optionsForTransition6 = optionsForTransitionConfig.headerStyleInterpolator,
          headerStyleInterpolator = _optionsForTransition6 === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _optionsForTransition6,
          _optionsForTransition7 = optionsForTransitionConfig.cardOverlayEnabled,
          cardOverlayEnabled = _optionsForTransition7 === void 0 ? _reactNative.Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || (0, _Card.getIsModalPresentation)(cardStyleInterpolator) : _optionsForTransition7;
        var headerMode = (_descriptor$options$h = descriptor.options.headerMode) != null ? _descriptor$options$h : !(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || (0, _Card.getIsModalPresentation)(cardStyleInterpolator)) && _reactNative.Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen';
        var scene = {
          route: route,
          descriptor: Object.assign({}, descriptor, {
            options: Object.assign({}, descriptor.options, {
              animationEnabled: animationEnabled,
              cardOverlayEnabled: cardOverlayEnabled,
              cardStyleInterpolator: cardStyleInterpolator,
              gestureDirection: gestureDirection,
              gestureEnabled: gestureEnabled,
              headerStyleInterpolator: headerStyleInterpolator,
              transitionSpec: transitionSpec,
              headerMode: headerMode
            })
          }),
          progress: {
            current: getProgressFromGesture(currentGesture, state.layout, descriptor),
            next: nextGesture && (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor) : undefined,
            previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor) : undefined
          },
          __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]
        };
        if (oldScene && scene.__memo.every(function (it, i) {
          return oldScene.__memo[i] === it;
        })) {
          return oldScene;
        }
        return scene;
      });
      return {
        routes: props.routes,
        scenes: scenes,
        gestures: gestures,
        descriptors: props.descriptors,
        headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)
      };
    }
  }]);
  return CardStack;
}(React.Component);
exports.default = CardStack;
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  absolute: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0
  },
  floating: {
    zIndex: 1
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,