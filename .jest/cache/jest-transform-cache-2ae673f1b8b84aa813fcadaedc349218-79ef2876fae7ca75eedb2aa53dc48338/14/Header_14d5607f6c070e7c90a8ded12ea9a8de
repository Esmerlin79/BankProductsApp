a1edcad8d0358495616998fedefe1aad
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Header = void 0;
var _reactNative = require("react-native");
var _FontAwesome = _interopRequireDefault(require("react-native-vector-icons/FontAwesome5"));
var _theme = _interopRequireDefault(require("../themes/theme"));
var _jsxRuntime = require("react/jsx-runtime");
var Header = exports.Header = function Header(_ref) {
  var title = _ref.title,
    showArrowLeft = _ref.showArrowLeft,
    onBack = _ref.onBack;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: Object.assign({}, styles.container, {
      justifyContent: showArrowLeft ? 'flex-start' : 'center'
    }),
    children: [showArrowLeft && (0, _jsxRuntime.jsx)(_FontAwesome.default, {
      name: 'angle-left',
      size: 24,
      color: _theme.default.gray,
      style: {
        marginRight: '20%'
      },
      onPress: onBack,
      testID: "back-arrow"
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.labelHeaderContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.logoBox
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.text,
        children: title
      })]
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    width: '100%',
    height: 60,
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
    borderBottomWidth: 1,
    borderBottomColor: _theme.default.lightGrey,
    padding: 10
  },
  labelHeaderContainer: {
    display: 'flex',
    flexDirection: 'row',
    gap: 5
  },
  logoBox: {
    width: 20,
    height: 20,
    backgroundColor: _theme.default.yellow,
    marginTop: 5
  },
  text: {
    color: _theme.default.darkBlue,
    fontSize: 20,
    fontWeight: 'bold'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX0ZvbnRBd2Vzb21lIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl90aGVtZSIsIl9qc3hSdW50aW1lIiwiSGVhZGVyIiwiZXhwb3J0cyIsIl9yZWYiLCJ0aXRsZSIsInNob3dBcnJvd0xlZnQiLCJvbkJhY2siLCJqc3hzIiwiVmlldyIsInN0eWxlIiwiT2JqZWN0IiwiYXNzaWduIiwic3R5bGVzIiwiY29udGFpbmVyIiwianVzdGlmeUNvbnRlbnQiLCJjaGlsZHJlbiIsImpzeCIsImRlZmF1bHQiLCJuYW1lIiwic2l6ZSIsImNvbG9yIiwidGhlbWUiLCJncmF5IiwibWFyZ2luUmlnaHQiLCJvblByZXNzIiwidGVzdElEIiwibGFiZWxIZWFkZXJDb250YWluZXIiLCJsb2dvQm94IiwiVGV4dCIsInRleHQiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwid2lkdGgiLCJoZWlnaHQiLCJkaXNwbGF5IiwiZmxleERpcmVjdGlvbiIsImFsaWduSXRlbXMiLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlckJvdHRvbUNvbG9yIiwibGlnaHRHcmV5IiwicGFkZGluZyIsImdhcCIsImJhY2tncm91bmRDb2xvciIsInllbGxvdyIsIm1hcmdpblRvcCIsImRhcmtCbHVlIiwiZm9udFNpemUiLCJmb250V2VpZ2h0Il0sInNvdXJjZXMiOlsiSGVhZGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBcbiAgICBTdHlsZVNoZWV0LFxuICAgIFZpZXcsXG4gICAgVGV4dCBcbn0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuXG5pbXBvcnQgSWNvbiBmcm9tICdyZWFjdC1uYXRpdmUtdmVjdG9yLWljb25zL0ZvbnRBd2Vzb21lNSc7XG5cbmltcG9ydCB0aGVtZSBmcm9tIFwiLi4vdGhlbWVzL3RoZW1lXCI7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBvbkJhY2s/OiAoKSA9PiB2b2lkO1xuICAgIHNob3dBcnJvd0xlZnQ6IGJvb2xlYW47XG59XG5leHBvcnQgY29uc3QgSGVhZGVyID0gKHsgdGl0bGUsIHNob3dBcnJvd0xlZnQsIG9uQmFjayB9OiBQcm9wcykgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxWaWV3IHN0eWxlPXt7IC4uLnN0eWxlcy5jb250YWluZXIsIGp1c3RpZnlDb250ZW50OiBzaG93QXJyb3dMZWZ0ID8gJ2ZsZXgtc3RhcnQnIDogJ2NlbnRlcicgfX0+XG5cbiAgICAgICAgICAgIHtzaG93QXJyb3dMZWZ0ICYmIChcbiAgICAgICAgICAgICAgICA8SWNvbiBcbiAgICAgICAgICAgICAgICAgICAgbmFtZT17J2FuZ2xlLWxlZnQnfSBcbiAgICAgICAgICAgICAgICAgICAgc2l6ZT17MjR9IFxuICAgICAgICAgICAgICAgICAgICBjb2xvcj17dGhlbWUuZ3JheX0gXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IG1hcmdpblJpZ2h0OiAnMjAlJ319IFxuICAgICAgICAgICAgICAgICAgICBvblByZXNzPXsgIG9uQmFjayB9XG4gICAgICAgICAgICAgICAgICAgIHRlc3RJRD1cImJhY2stYXJyb3dcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuXG4gICAgICAgICAgICA8VmlldyBzdHlsZT17IHN0eWxlcy5sYWJlbEhlYWRlckNvbnRhaW5lciB9PlxuICAgICAgICAgICAgICAgIDxWaWV3IHN0eWxlPXsgc3R5bGVzLmxvZ29Cb3ggfSAvPlxuICAgICAgICAgICAgICAgIDxUZXh0IHN0eWxlPXsgc3R5bGVzLnRleHQgfT57IHRpdGxlIH08L1RleHQ+XG4gICAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgIDwvVmlldz5cblxuICAgIClcbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6IDYwLFxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgYm9yZGVyQm90dG9tV2lkdGg6IDEsXG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0aGVtZS5saWdodEdyZXksXG4gICAgICAgIHBhZGRpbmc6IDEwLFxuICAgIH0sXG4gICAgbGFiZWxIZWFkZXJDb250YWluZXI6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICAgICAgZ2FwOiA1LFxuICAgIH0sXG4gICAgbG9nb0JveDoge1xuICAgICAgICB3aWR0aDogMjAsXG4gICAgICAgIGhlaWdodDogMjAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUueWVsbG93LFxuICAgICAgICBtYXJnaW5Ub3A6IDUsXG4gICAgfSxcbiAgICB0ZXh0OiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5kYXJrQmx1ZSxcbiAgICAgICAgZm9udFNpemU6IDIwLFxuICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCdcbiAgICB9XG59KSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFNQSxJQUFBQyxZQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFFQSxJQUFBRyxNQUFBLEdBQUFELHNCQUFBLENBQUFGLE9BQUE7QUFBb0MsSUFBQUksV0FBQSxHQUFBSixPQUFBO0FBTzdCLElBQU1LLE1BQU0sR0FBQUMsT0FBQSxDQUFBRCxNQUFBLEdBQUcsU0FBVEEsTUFBTUEsQ0FBQUUsSUFBQSxFQUFnRDtFQUFBLElBQTFDQyxLQUFLLEdBQUFELElBQUEsQ0FBTEMsS0FBSztJQUFFQyxhQUFhLEdBQUFGLElBQUEsQ0FBYkUsYUFBYTtJQUFFQyxNQUFNLEdBQUFILElBQUEsQ0FBTkcsTUFBTTtFQUNqRCxPQUNJLElBQUFOLFdBQUEsQ0FBQU8sSUFBQSxFQUFDWixZQUFBLENBQUFhLElBQUk7SUFBQ0MsS0FBSyxFQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FBT0MsTUFBTSxDQUFDQyxTQUFTO01BQUVDLGNBQWMsRUFBRVQsYUFBYSxHQUFHLFlBQVksR0FBRztJQUFRLEVBQUc7SUFBQVUsUUFBQSxHQUV6RlYsYUFBYSxJQUNWLElBQUFMLFdBQUEsQ0FBQWdCLEdBQUEsRUFBQ25CLFlBQUEsQ0FBQW9CLE9BQUk7TUFDREMsSUFBSSxFQUFFLFlBQWE7TUFDbkJDLElBQUksRUFBRSxFQUFHO01BQ1RDLEtBQUssRUFBRUMsY0FBSyxDQUFDQyxJQUFLO01BQ2xCYixLQUFLLEVBQUU7UUFBRWMsV0FBVyxFQUFFO01BQUssQ0FBRTtNQUM3QkMsT0FBTyxFQUFJbEIsTUFBUTtNQUNuQm1CLE1BQU0sRUFBQztJQUFZLENBQ3RCLENBQ0osRUFFRCxJQUFBekIsV0FBQSxDQUFBTyxJQUFBLEVBQUNaLFlBQUEsQ0FBQWEsSUFBSTtNQUFDQyxLQUFLLEVBQUdHLE1BQU0sQ0FBQ2Msb0JBQXNCO01BQUFYLFFBQUEsR0FDdkMsSUFBQWYsV0FBQSxDQUFBZ0IsR0FBQSxFQUFDckIsWUFBQSxDQUFBYSxJQUFJO1FBQUNDLEtBQUssRUFBR0csTUFBTSxDQUFDZTtNQUFTLENBQUUsQ0FBQyxFQUNqQyxJQUFBM0IsV0FBQSxDQUFBZ0IsR0FBQSxFQUFDckIsWUFBQSxDQUFBaUMsSUFBSTtRQUFDbkIsS0FBSyxFQUFHRyxNQUFNLENBQUNpQixJQUFNO1FBQUFkLFFBQUEsRUFBR1g7TUFBSyxDQUFRLENBQUM7SUFBQSxDQUMxQyxDQUFDO0VBQUEsQ0FDTCxDQUFDO0FBR2YsQ0FBQztBQUVELElBQU1RLE1BQU0sR0FBR2tCLHVCQUFVLENBQUNDLE1BQU0sQ0FBQztFQUM3QmxCLFNBQVMsRUFBRTtJQUNQbUIsS0FBSyxFQUFFLE1BQU07SUFDYkMsTUFBTSxFQUFFLEVBQUU7SUFDVkMsT0FBTyxFQUFFLE1BQU07SUFDZkMsYUFBYSxFQUFFLEtBQUs7SUFDcEJDLFVBQVUsRUFBRSxRQUFRO0lBQ3BCQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3BCQyxpQkFBaUIsRUFBRWpCLGNBQUssQ0FBQ2tCLFNBQVM7SUFDbENDLE9BQU8sRUFBRTtFQUNiLENBQUM7RUFDRGQsb0JBQW9CLEVBQUU7SUFDbEJRLE9BQU8sRUFBRSxNQUFNO0lBQ2ZDLGFBQWEsRUFBRSxLQUFLO0lBQ3BCTSxHQUFHLEVBQUU7RUFDVCxDQUFDO0VBQ0RkLE9BQU8sRUFBRTtJQUNMSyxLQUFLLEVBQUUsRUFBRTtJQUNUQyxNQUFNLEVBQUUsRUFBRTtJQUNWUyxlQUFlLEVBQUVyQixjQUFLLENBQUNzQixNQUFNO0lBQzdCQyxTQUFTLEVBQUU7RUFDZixDQUFDO0VBQ0RmLElBQUksRUFBRTtJQUNGVCxLQUFLLEVBQUVDLGNBQUssQ0FBQ3dCLFFBQVE7SUFDckJDLFFBQVEsRUFBRSxFQUFFO0lBQ1pDLFVBQVUsRUFBRTtFQUNoQjtBQUNKLENBQUMsQ0FBQyJ9