b19bd5d4528cd01ad9e0ed9dd0c99a69
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ModalComponent = require("../ModalComponent");
var _jsxRuntime = require("react/jsx-runtime");
describe('ModalComponent', function () {
  jest.useFakeTimers();
  it('ModalComponent renders correctly with title', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModalComponent.ModalComponent, {
        isVisible: true,
        title: "Test Modal",
        onConfirm: function onConfirm() {},
        onClose: function onClose() {}
      })),
      getByText = _render.getByText;
    var modalTitle = getByText('Test Modal');
    expect(modalTitle).toBeDefined();
  });
  it('ModalComponent calls onClose on close button press', function () {
    var mockOnClose = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ModalComponent.ModalComponent, {
        isVisible: true,
        title: "Test Modal",
        onConfirm: function onConfirm() {},
        onClose: mockOnClose
      })),
      getByTestId = _render2.getByTestId;
    var closeButton = getByTestId('close-button');
    _reactNative.fireEvent.press(closeButton);
    expect(mockOnClose).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Nb2RhbENvbXBvbmVudCIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJqZXN0IiwidXNlRmFrZVRpbWVycyIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsIk1vZGFsQ29tcG9uZW50IiwiaXNWaXNpYmxlIiwidGl0bGUiLCJvbkNvbmZpcm0iLCJvbkNsb3NlIiwiZ2V0QnlUZXh0IiwibW9kYWxUaXRsZSIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwibW9ja09uQ2xvc2UiLCJmbiIsIl9yZW5kZXIyIiwiZ2V0QnlUZXN0SWQiLCJjbG9zZUJ1dHRvbiIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZCJdLCJzb3VyY2VzIjpbIk1vZGFsQ29tcG9uZW50LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IE1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi4vTW9kYWxDb21wb25lbnQnO1xuXG5kZXNjcmliZSgnTW9kYWxDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgamVzdC51c2VGYWtlVGltZXJzKClcblxuICAgIGl0KCdNb2RhbENvbXBvbmVudCByZW5kZXJzIGNvcnJlY3RseSB3aXRoIHRpdGxlJywgKCkgPT4ge1xuICAgICAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgICAgICAgIDxNb2RhbENvbXBvbmVudCBpc1Zpc2libGU9e3RydWV9IHRpdGxlPVwiVGVzdCBNb2RhbFwiIG9uQ29uZmlybT17KCkgPT4ge319IG9uQ2xvc2U9eygpID0+IHt9fSAvPlxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbW9kYWxUaXRsZSA9IGdldEJ5VGV4dCgnVGVzdCBNb2RhbCcpO1xuXG4gICAgICAgIGV4cGVjdChtb2RhbFRpdGxlKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ01vZGFsQ29tcG9uZW50IGNhbGxzIG9uQ2xvc2Ugb24gY2xvc2UgYnV0dG9uIHByZXNzJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBtb2NrT25DbG9zZSA9IGplc3QuZm4oKTtcbiAgICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8TW9kYWxDb21wb25lbnQgaXNWaXNpYmxlPXt0cnVlfSB0aXRsZT1cIlRlc3QgTW9kYWxcIiBvbkNvbmZpcm09eygpID0+IHt9fSBvbkNsb3NlPXttb2NrT25DbG9zZX0gLz5cbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgY2xvc2VCdXR0b24gPSBnZXRCeVRlc3RJZCgnY2xvc2UtYnV0dG9uJyk7XG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhjbG9zZUJ1dHRvbik7XG5cbiAgICAgICAgZXhwZWN0KG1vY2tPbkNsb3NlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG59KVxuXG4iXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxlQUFBLEdBQUFGLE9BQUE7QUFBbUQsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBRW5ESSxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsWUFBTTtFQUM3QkMsSUFBSSxDQUFDQyxhQUFhLENBQUMsQ0FBQztFQUVwQkMsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLFlBQU07SUFDcEQsSUFBQUMsT0FBQSxHQUFzQixJQUFBQyxtQkFBTSxFQUN2QixJQUFBTixXQUFBLENBQUFPLEdBQUEsRUFBQ1IsZUFBQSxDQUFBUyxjQUFjO1FBQUNDLFNBQVMsRUFBRSxJQUFLO1FBQUNDLEtBQUssRUFBQyxZQUFZO1FBQUNDLFNBQVMsRUFBRSxTQUFBQSxVQUFBLEVBQU0sQ0FBQyxDQUFFO1FBQUNDLE9BQU8sRUFBRSxTQUFBQSxRQUFBLEVBQU0sQ0FBQztNQUFFLENBQUUsQ0FDbEcsQ0FBQztNQUZPQyxTQUFTLEdBQUFSLE9BQUEsQ0FBVFEsU0FBUztJQUlqQixJQUFNQyxVQUFVLEdBQUdELFNBQVMsQ0FBQyxZQUFZLENBQUM7SUFFMUNFLE1BQU0sQ0FBQ0QsVUFBVSxDQUFDLENBQUNFLFdBQVcsQ0FBQyxDQUFDO0VBQ3BDLENBQUMsQ0FBQztFQUVGWixFQUFFLENBQUMsb0RBQW9ELEVBQUUsWUFBTTtJQUMzRCxJQUFNYSxXQUFXLEdBQUdmLElBQUksQ0FBQ2dCLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLElBQUFDLFFBQUEsR0FBd0IsSUFBQWIsbUJBQU0sRUFDOUIsSUFBQU4sV0FBQSxDQUFBTyxHQUFBLEVBQUNSLGVBQUEsQ0FBQVMsY0FBYztRQUFDQyxTQUFTLEVBQUUsSUFBSztRQUFDQyxLQUFLLEVBQUMsWUFBWTtRQUFDQyxTQUFTLEVBQUUsU0FBQUEsVUFBQSxFQUFNLENBQUMsQ0FBRTtRQUFDQyxPQUFPLEVBQUVLO01BQVksQ0FBRSxDQUNoRyxDQUFDO01BRk9HLFdBQVcsR0FBQUQsUUFBQSxDQUFYQyxXQUFXO0lBR25CLElBQU1DLFdBQVcsR0FBR0QsV0FBVyxDQUFDLGNBQWMsQ0FBQztJQUMvQ0Usc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDRixXQUFXLENBQUM7SUFFNUJOLE1BQU0sQ0FBQ0UsV0FBVyxDQUFDLENBQUNPLGdCQUFnQixDQUFDLENBQUM7RUFDMUMsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDIn0=