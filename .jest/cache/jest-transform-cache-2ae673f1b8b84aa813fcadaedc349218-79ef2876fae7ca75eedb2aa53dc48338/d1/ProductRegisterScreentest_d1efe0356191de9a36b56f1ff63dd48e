add3571427584d324967556b7065b2d1
_getJestObj().mock('../../hooks/useProductRegister');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ProductRegisterScreen = require("../ProductRegisterScreen");
var _useProductRegister = _interopRequireDefault(require("../../hooks/useProductRegister"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ProductRegisterScreen', function () {
  var mockUseProductRegister;
  beforeEach(function () {
    mockUseProductRegister = _useProductRegister.default;
    mockUseProductRegister.mockReturnValue({
      form: {
        id: 'mockId',
        name: '',
        description: '',
        logo: '',
        releaseDate: '',
        reviewDate: ''
      },
      isLoading: false,
      onChange: jest.fn(),
      isProductIdValid: false,
      isReleaseDateValid: false,
      handleReleaseChange: jest.fn(),
      clearForm: jest.fn(),
      handleCreateOrUpdateProduct: jest.fn()
    });
  });
  var mockRoute = {
    params: {
      product: null
    }
  };
  it('renders correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProductRegisterScreen.ProductRegisterScreen, {
        navigation: {
          pop: jest.fn()
        },
        route: mockRoute
      })),
      getByText = _render.getByText;
    expect(getByText('BANCO PICHINCHA')).toBeTruthy();
    expect(getByText('Formulario de Registro')).toBeTruthy();
    expect(getByText('ID')).toBeTruthy();
    expect(getByText('Nombre')).toBeTruthy();
    expect(getByText('Descripcion')).toBeTruthy();
    expect(getByText('Logo')).toBeTruthy();
    expect(getByText('Fecha Liberación')).toBeTruthy();
    expect(getByText('Fecha Revisión')).toBeTruthy();
    expect(getByText('Enviar')).toBeTruthy();
    expect(getByText('Reiniciar')).toBeTruthy();
  });
  it('calls handleCreateOrUpdateProduct on "Enviar" button press', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProductRegisterScreen.ProductRegisterScreen, {
        navigation: {
          pop: jest.fn()
        },
        route: mockRoute
      })),
      getByText = _render2.getByText;
    var sendButton = getByText('Enviar');
    _reactNative.fireEvent.press(sendButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUseProductRegister.mock.results[0].value.handleCreateOrUpdateProduct).toHaveBeenCalled();
    });
  }));
  it('calls clearForm on "Reiniciar" button press', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProductRegisterScreen.ProductRegisterScreen, {
        navigation: {
          pop: jest.fn()
        },
        route: mockRoute
      })),
      getByText = _render3.getByText,
      findByText = _render3.findByText;
    var resetButton = getByText('Reiniciar');
    _reactNative.fireEvent.press(resetButton);
    var resetButtonText = yield findByText('Reiniciar');
    expect(mockUseProductRegister.mock.results[0].value.clearForm).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,