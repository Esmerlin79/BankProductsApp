52d96d0ebde5f4ab3699067acec637bd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModalComponent = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _FontAwesome = _interopRequireDefault(require("react-native-vector-icons/FontAwesome"));
var _reactNativeModal = _interopRequireDefault(require("react-native-modal"));
var _theme = _interopRequireDefault(require("../themes/theme"));
var _CustomButton = require("./CustomButton");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function cov_1isilpwdc4() {
  var path = "/Users/esmerlinelivo/Desktop/BancoPichinchaApp/src/components/ModalComponent.tsx";
  var hash = "5b042b03fe480fd7f7d051f4ccbdadd5d11c07e0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/esmerlinelivo/Desktop/BancoPichinchaApp/src/components/ModalComponent.tsx",
    statementMap: {
      "0": {
        start: {
          line: 23,
          column: 61
        },
        end: {
          line: 80,
          column: 1
        }
      },
      "1": {
        start: {
          line: 24,
          column: 21
        },
        end: {
          line: 24,
          column: 60
        }
      },
      "2": {
        start: {
          line: 26,
          column: 2
        },
        end: {
          line: 38,
          column: 18
        }
      },
      "3": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "4": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 31,
          column: 17
        }
      },
      "5": {
        start: {
          line: 33,
          column: 6
        },
        end: {
          line: 36,
          column: 17
        }
      },
      "6": {
        start: {
          line: 40,
          column: 2
        },
        end: {
          line: 79,
          column: 4
        }
      },
      "7": {
        start: {
          line: 62,
          column: 35
        },
        end: {
          line: 62,
          column: 46
        }
      },
      "8": {
        start: {
          line: 69,
          column: 35
        },
        end: {
          line: 69,
          column: 44
        }
      },
      "9": {
        start: {
          line: 82,
          column: 15
        },
        end: {
          line: 120,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 23,
            column: 61
          },
          end: {
            line: 23,
            column: 62
          }
        },
        loc: {
          start: {
            line: 23,
            column: 107
          },
          end: {
            line: 80,
            column: 1
          }
        },
        line: 23
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        },
        loc: {
          start: {
            line: 26,
            column: 18
          },
          end: {
            line: 38,
            column: 3
          }
        },
        line: 26
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 62,
            column: 29
          },
          end: {
            line: 62,
            column: 30
          }
        },
        loc: {
          start: {
            line: 62,
            column: 35
          },
          end: {
            line: 62,
            column: 46
          }
        },
        line: 62
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 69,
            column: 29
          },
          end: {
            line: 69,
            column: 30
          }
        },
        loc: {
          start: {
            line: 69,
            column: 35
          },
          end: {
            line: 69,
            column: 44
          }
        },
        line: 69
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        }, {
          start: {
            line: 32,
            column: 11
          },
          end: {
            line: 37,
            column: 5
          }
        }],
        line: 27
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5b042b03fe480fd7f7d051f4ccbdadd5d11c07e0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1isilpwdc4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1isilpwdc4();
cov_1isilpwdc4().s[0]++;
var ModalComponent = exports.ModalComponent = function ModalComponent(_ref) {
  var isVisible = _ref.isVisible,
    title = _ref.title,
    onConfirm = _ref.onConfirm,
    onClose = _ref.onClose;
  cov_1isilpwdc4().f[0]++;
  var translateY = (cov_1isilpwdc4().s[1]++, (0, _react.useRef)(new _reactNative.Animated.Value(500)).current);
  cov_1isilpwdc4().s[2]++;
  (0, _react.useEffect)(function () {
    cov_1isilpwdc4().f[1]++;
    cov_1isilpwdc4().s[3]++;
    if (isVisible) {
      cov_1isilpwdc4().b[0][0]++;
      cov_1isilpwdc4().s[4]++;
      _reactNative.Animated.spring(translateY, {
        toValue: 0,
        useNativeDriver: true
      }).start();
    } else {
      cov_1isilpwdc4().b[0][1]++;
      cov_1isilpwdc4().s[5]++;
      _reactNative.Animated.spring(translateY, {
        toValue: 500,
        useNativeDriver: true
      }).start();
    }
  }, [isVisible]);
  cov_1isilpwdc4().s[6]++;
  return (0, _jsxRuntime.jsx)(_reactNativeModal.default, {
    isVisible: isVisible,
    animationIn: "slideInUp",
    animationOut: "slideOutDown",
    useNativeDriver: true,
    style: {
      margin: 0,
      padding: 0
    },
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.modalContainer,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.modalContent,
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.headerModal,
          children: (0, _jsxRuntime.jsx)(_FontAwesome.default, {
            name: 'close',
            size: 20,
            color: _theme.default.gray,
            onPress: onClose,
            testID: "close-button"
          })
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.titleContent,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.title,
            children: title
          })
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.divider
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.contentButton,
          children: [(0, _jsxRuntime.jsx)(_CustomButton.CustomButton, {
            onPress: function onPress() {
              cov_1isilpwdc4().f[2]++;
              cov_1isilpwdc4().s[7]++;
              return onConfirm();
            },
            title: "Confirmar",
            backgroundColor: _theme.default.yellow,
            color: _theme.default.darkBlue
          }), (0, _jsxRuntime.jsx)(_CustomButton.CustomButton, {
            onPress: function onPress() {
              cov_1isilpwdc4().f[3]++;
              cov_1isilpwdc4().s[8]++;
              return onClose();
            },
            title: "Cancelar",
            backgroundColor: _theme.default.purple,
            color: _theme.default.darkBlue
          })]
        })]
      })
    })
  });
};
var styles = (cov_1isilpwdc4().s[9]++, _reactNative.StyleSheet.create({
  modalContainer: {
    flex: 1,
    justifyContent: 'flex-end'
  },
  modalContent: {
    backgroundColor: _theme.default.lightWhite,
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    minHeight: 300
  },
  headerModal: {
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-end',
    height: 60,
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: _theme.default.lightGrey
  },
  titleContent: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20
  },
  title: {
    fontSize: 17,
    color: _theme.default.black,
    textAlign: 'center'
  },
  divider: {
    borderWidth: 1,
    borderColor: _theme.default.lightGrey
  },
  contentButton: {
    padding: 20
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,