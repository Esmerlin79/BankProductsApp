288fb7714226398335d63815964e3c05
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CustomDatePicker = require("../CustomDatePicker");
var _jsxRuntime = require("react/jsx-runtime");
describe('CustomDatePicker', function () {
  it('renders correctly with a default value', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CustomDatePicker.CustomDatePicker, {
        value: "2023-12-31T00:00:00.000Z",
        onChange: function onChange() {}
      })),
      getByText = _render.getByText;
    var formattedDate = getByText('30/12/2023');
    expect(formattedDate).toBeDefined();
  });
  it('calls onChange when date is changed', (0, _asyncToGenerator2.default)(function* () {
    var mockOnChange = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CustomDatePicker.CustomDatePicker, {
        value: "2023-12-31T00:00:00.000Z",
        onChange: mockOnChange
      })),
      getByTestId = _render2.getByTestId;
    _reactNative.fireEvent.press(getByTestId('datePicker'));
    yield (0, _reactNative.waitFor)(function () {
      (0, _reactNative.fireEvent)(getByTestId('datePicker'), 'change', {
        nativeEvent: {
          timestamp: Date.now()
        }
      });
    });
  }));
  it('displays an error message when there is an error', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CustomDatePicker.CustomDatePicker, {
        value: "",
        errorInput: true,
        messageError: "Fecha inv\xE1lida",
        onChange: function onChange() {}
      })),
      getByText = _render3.getByText;
    var errorMessage = getByText('Fecha inv√°lida');
    expect(errorMessage).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9DdXN0b21EYXRlUGlja2VyIiwiX2pzeFJ1bnRpbWUiLCJkZXNjcmliZSIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsIkN1c3RvbURhdGVQaWNrZXIiLCJ2YWx1ZSIsIm9uQ2hhbmdlIiwiZ2V0QnlUZXh0IiwiZm9ybWF0dGVkRGF0ZSIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiZGVmYXVsdCIsIm1vY2tPbkNoYW5nZSIsImplc3QiLCJmbiIsIl9yZW5kZXIyIiwiZ2V0QnlUZXN0SWQiLCJmaXJlRXZlbnQiLCJwcmVzcyIsIndhaXRGb3IiLCJuYXRpdmVFdmVudCIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJfcmVuZGVyMyIsImVycm9ySW5wdXQiLCJtZXNzYWdlRXJyb3IiLCJlcnJvck1lc3NhZ2UiXSwic291cmNlcyI6WyJDdXN0b21EYXRlUGlja2V0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IEN1c3RvbURhdGVQaWNrZXIgfSBmcm9tICcuLi9DdXN0b21EYXRlUGlja2VyJztcblxuZGVzY3JpYmUoJ0N1c3RvbURhdGVQaWNrZXInLCAoKSA9PiB7XG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIGEgZGVmYXVsdCB2YWx1ZScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPEN1c3RvbURhdGVQaWNrZXJcbiAgICAgICAgdmFsdWU9XCIyMDIzLTEyLTMxVDAwOjAwOjAwLjAwMFpcIiBcbiAgICAgICAgb25DaGFuZ2U9eygpID0+IHt9fVxuICAgICAgLz5cbiAgICApO1xuXG4gICAgY29uc3QgZm9ybWF0dGVkRGF0ZSA9IGdldEJ5VGV4dCgnMzAvMTIvMjAyMycpOyBcbiAgICBleHBlY3QoZm9ybWF0dGVkRGF0ZSkudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIG9uQ2hhbmdlIHdoZW4gZGF0ZSBpcyBjaGFuZ2VkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tPbkNoYW5nZSA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8Q3VzdG9tRGF0ZVBpY2tlclxuICAgICAgICB2YWx1ZT1cIjIwMjMtMTItMzFUMDA6MDA6MDAuMDAwWlwiIFxuICAgICAgICBvbkNoYW5nZT17bW9ja09uQ2hhbmdlfVxuICAgICAgLz5cbiAgICApO1xuXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkYXRlUGlja2VyJykpO1xuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZmlyZUV2ZW50KGdldEJ5VGVzdElkKCdkYXRlUGlja2VyJyksICdjaGFuZ2UnLCB7IG5hdGl2ZUV2ZW50OiB7IHRpbWVzdGFtcDogRGF0ZS5ub3coKSB9IH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnZGlzcGxheXMgYW4gZXJyb3IgbWVzc2FnZSB3aGVuIHRoZXJlIGlzIGFuIGVycm9yJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8Q3VzdG9tRGF0ZVBpY2tlclxuICAgICAgICB2YWx1ZT1cIlwiXG4gICAgICAgIGVycm9ySW5wdXRcbiAgICAgICAgbWVzc2FnZUVycm9yPVwiRmVjaGEgaW52w6FsaWRhXCJcbiAgICAgICAgb25DaGFuZ2U9eygpID0+IHt9fVxuICAgICAgLz5cbiAgICApO1xuXG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZ2V0QnlUZXh0KCdGZWNoYSBpbnbDoWxpZGEnKTtcbiAgICBleHBlY3Qo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