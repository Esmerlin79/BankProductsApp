d94c56574e080d76b9502910d54101c5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _lodash = _interopRequireDefault(require("lodash"));
var _dateFns = require("date-fns");
var _useForm2 = require("./useForm");
var _utils = require("../utils");
var _reactNative = require("react-native");
var _ProductContext = require("../context/ProductContext");
var useProductRegister = function useProductRegister() {
  var initialProduct = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var navigation = arguments.length > 1 ? arguments[1] : undefined;
  var product = initialProduct;
  var _useContext = (0, _react.useContext)(_ProductContext.ProductsContext),
    verifyProductId = _useContext.verifyProductId,
    createProduct = _useContext.createProduct,
    editProduct = _useContext.editProduct;
  var _useForm = (0, _useForm2.useForm)({
      id: product ? product.id : '',
      name: product ? product.name : '',
      description: product ? product.description : '',
      logo: product ? product.logo : '',
      releaseDate: product ? product.date_release : new Date().toISOString(),
      reviewDate: product ? product.date_revision : (0, _dateFns.addYears)(new Date(), 1).toISOString()
    }),
    form = _useForm.form,
    setFormValue = _useForm.setFormValue,
    onChange = _useForm.onChange;
  var name = form.name,
    description = form.description,
    logo = form.logo;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isLoading = _useState2[0],
    setIsLoading = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isProductIdValid = _useState4[0],
    setIsProductIdValid = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isReleaseDateValid = _useState6[0],
    setIsReleaseDateValid = _useState6[1];
  var handleReleaseChange = function handleReleaseChange(value) {
    var releaseDate = (0, _dateFns.parseISO)(value);
    var reviewDate = (0, _dateFns.addYears)(releaseDate, 1);
    setFormValue(Object.assign({}, form, {
      releaseDate: value,
      reviewDate: reviewDate.toISOString()
    }));
  };
  var handleVerifyProductId = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (productId) {
      try {
        if (product) return;
        if ((0, _utils.validateInputs)('ID', productId)) return setIsProductIdValid(true);
        var isValid = yield verifyProductId(productId);
        setIsProductIdValid(isValid);
      } catch (error) {
        _reactNative.Alert.alert('Error', 'Hubo un error al validar el ID', [{
          text: 'Ok',
          onPress: function onPress() {}
        }]);
        return true;
      }
    });
    return function handleVerifyProductId(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  var handleCreateOrUpdateProduct = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        if (isProductIdValid || (0, _utils.validateInputs)('name', name) || (0, _utils.validateInputs)('description', description) || (0, _utils.validateInputs)('logo', logo) || isReleaseDateValid) return;
        setIsLoading(true);
        if (product) {
          yield editProduct(Object.assign({}, form, {
            date_release: form.releaseDate,
            date_revision: form.reviewDate
          }));
          setIsLoading(false);
          navigation.navigate('ProductsScreen', {});
        } else {
          yield createProduct(Object.assign({}, form, {
            date_release: form.releaseDate,
            date_revision: form.reviewDate
          }));
          setIsLoading(false);
          navigation.pop();
        }
      } catch (error) {
        setIsLoading(false);
        _reactNative.Alert.alert('Error', 'Hubo un error al crear el producto', [{
          text: 'Ok',
          onPress: function onPress() {}
        }]);
      }
    });
    return function handleCreateOrUpdateProduct() {
      return _ref2.apply(this, arguments);
    };
  }();
  var debouncedHandleValidateId = _lodash.default.debounce(handleVerifyProductId, 500);
  var clearForm = function clearForm() {
    setFormValue({
      id: product ? product.id : '',
      name: '',
      description: '',
      logo: '',
      releaseDate: '',
      reviewDate: ''
    });
  };
  (0, _react.useEffect)(function () {
    debouncedHandleValidateId(form.id);
    return function () {
      debouncedHandleValidateId.cancel();
    };
  }, [form.id]);
  (0, _react.useEffect)(function () {
    if (form.releaseDate) setIsReleaseDateValid((0, _utils.validateInputs)('releaseDate', form.releaseDate));
  }, [form.releaseDate]);
  return {
    form: form,
    isLoading: isLoading,
    isProductIdValid: isProductIdValid,
    isReleaseDateValid: isReleaseDateValid,
    handleReleaseChange: handleReleaseChange,
    clearForm: clearForm,
    onChange: onChange,
    debouncedHandleValidateId: debouncedHandleValidateId,
    handleCreateOrUpdateProduct: handleCreateOrUpdateProduct
  };
};
var _default = exports.default = useProductRegister;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,