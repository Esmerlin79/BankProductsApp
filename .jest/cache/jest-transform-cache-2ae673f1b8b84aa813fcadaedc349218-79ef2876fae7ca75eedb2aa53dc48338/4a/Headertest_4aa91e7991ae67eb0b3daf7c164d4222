be34c3a171b1d5aeeffd3c36082d4476
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Header = require("../Header");
var _jsxRuntime = require("react/jsx-runtime");
describe('Header', function () {
  it('Header renders correctly with title', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.Header, {
        title: "Test Title",
        showArrowLeft: false
      })),
      getByText = _render.getByText;
    var titleText = getByText('Test Title');
    expect(titleText).toBeDefined();
  });
  it('Header renders correctly with back arrow', function () {
    var mockOnBack = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.Header, {
        title: "Test Title",
        showArrowLeft: true,
        onBack: mockOnBack
      })),
      getByTestId = _render2.getByTestId;
    var backArrow = getByTestId('back-arrow');
    expect(backArrow).toBeDefined();
    _reactNative.fireEvent.press(backArrow);
    expect(mockOnBack).toHaveBeenCalled();
  });
  it('Header does not render back arrow when showArrowLeft is false', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Header.Header, {
        title: "Test Title",
        showArrowLeft: false
      })),
      queryByTestId = _render3.queryByTestId;
    var backArrow = queryByTestId('back-arrow');
    expect(backArrow).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9IZWFkZXIiLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiSGVhZGVyIiwidGl0bGUiLCJzaG93QXJyb3dMZWZ0IiwiZ2V0QnlUZXh0IiwidGl0bGVUZXh0IiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJtb2NrT25CYWNrIiwiamVzdCIsImZuIiwiX3JlbmRlcjIiLCJvbkJhY2siLCJnZXRCeVRlc3RJZCIsImJhY2tBcnJvdyIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXIzIiwicXVlcnlCeVRlc3RJZCIsInRvQmVOdWxsIl0sInNvdXJjZXMiOlsiSGVhZGVyLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IEhlYWRlciB9IGZyb20gJy4uL0hlYWRlcic7XG5cbmRlc2NyaWJlKCdIZWFkZXInLCAoKSA9PiB7XG4gIGl0KCdIZWFkZXIgcmVuZGVycyBjb3JyZWN0bHkgd2l0aCB0aXRsZScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxIZWFkZXIgdGl0bGU9XCJUZXN0IFRpdGxlXCIgc2hvd0Fycm93TGVmdD17ZmFsc2V9IC8+KTtcbiAgICBjb25zdCB0aXRsZVRleHQgPSBnZXRCeVRleHQoJ1Rlc3QgVGl0bGUnKTtcbiAgICBleHBlY3QodGl0bGVUZXh0KS50b0JlRGVmaW5lZCgpO1xuICB9KTtcbiAgXG4gIGl0KCdIZWFkZXIgcmVuZGVycyBjb3JyZWN0bHkgd2l0aCBiYWNrIGFycm93JywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tPbkJhY2sgPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPEhlYWRlciB0aXRsZT1cIlRlc3QgVGl0bGVcIiBzaG93QXJyb3dMZWZ0PXt0cnVlfSBvbkJhY2s9e21vY2tPbkJhY2t9IC8+XG4gICAgKTtcbiAgICBjb25zdCBiYWNrQXJyb3cgPSBnZXRCeVRlc3RJZCgnYmFjay1hcnJvdycpO1xuICAgIGV4cGVjdChiYWNrQXJyb3cpLnRvQmVEZWZpbmVkKCk7XG4gIFxuICAgIGZpcmVFdmVudC5wcmVzcyhiYWNrQXJyb3cpO1xuICAgIGV4cGVjdChtb2NrT25CYWNrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuICBcbiAgaXQoJ0hlYWRlciBkb2VzIG5vdCByZW5kZXIgYmFjayBhcnJvdyB3aGVuIHNob3dBcnJvd0xlZnQgaXMgZmFsc2UnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBxdWVyeUJ5VGVzdElkIH0gPSByZW5kZXIoPEhlYWRlciB0aXRsZT1cIlRlc3QgVGl0bGVcIiBzaG93QXJyb3dMZWZ0PXtmYWxzZX0gLz4pO1xuICAgIGNvbnN0IGJhY2tBcnJvdyA9IHF1ZXJ5QnlUZXN0SWQoJ2JhY2stYXJyb3cnKTtcbiAgICBleHBlY3QoYmFja0Fycm93KS50b0JlTnVsbCgpO1xuICB9KTtcbn0pXG4iXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFBbUMsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBRW5DSSxRQUFRLENBQUMsUUFBUSxFQUFFLFlBQU07RUFDdkJDLEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxZQUFNO0lBQzlDLElBQUFDLE9BQUEsR0FBc0IsSUFBQUMsbUJBQU0sRUFBQyxJQUFBSixXQUFBLENBQUFLLEdBQUEsRUFBQ04sT0FBQSxDQUFBTyxNQUFNO1FBQUNDLEtBQUssRUFBQyxZQUFZO1FBQUNDLGFBQWEsRUFBRTtNQUFNLENBQUUsQ0FBQyxDQUFDO01BQXpFQyxTQUFTLEdBQUFOLE9BQUEsQ0FBVE0sU0FBUztJQUNqQixJQUFNQyxTQUFTLEdBQUdELFNBQVMsQ0FBQyxZQUFZLENBQUM7SUFDekNFLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLENBQUNFLFdBQVcsQ0FBQyxDQUFDO0VBQ2pDLENBQUMsQ0FBQztFQUVGVixFQUFFLENBQUMsMENBQTBDLEVBQUUsWUFBTTtJQUNuRCxJQUFNVyxVQUFVLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDNUIsSUFBQUMsUUFBQSxHQUF3QixJQUFBWixtQkFBTSxFQUM1QixJQUFBSixXQUFBLENBQUFLLEdBQUEsRUFBQ04sT0FBQSxDQUFBTyxNQUFNO1FBQUNDLEtBQUssRUFBQyxZQUFZO1FBQUNDLGFBQWEsRUFBRSxJQUFLO1FBQUNTLE1BQU0sRUFBRUo7TUFBVyxDQUFFLENBQ3ZFLENBQUM7TUFGT0ssV0FBVyxHQUFBRixRQUFBLENBQVhFLFdBQVc7SUFHbkIsSUFBTUMsU0FBUyxHQUFHRCxXQUFXLENBQUMsWUFBWSxDQUFDO0lBQzNDUCxNQUFNLENBQUNRLFNBQVMsQ0FBQyxDQUFDUCxXQUFXLENBQUMsQ0FBQztJQUUvQlEsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDRixTQUFTLENBQUM7SUFDMUJSLE1BQU0sQ0FBQ0UsVUFBVSxDQUFDLENBQUNTLGdCQUFnQixDQUFDLENBQUM7RUFDdkMsQ0FBQyxDQUFDO0VBRUZwQixFQUFFLENBQUMsK0RBQStELEVBQUUsWUFBTTtJQUN4RSxJQUFBcUIsUUFBQSxHQUEwQixJQUFBbkIsbUJBQU0sRUFBQyxJQUFBSixXQUFBLENBQUFLLEdBQUEsRUFBQ04sT0FBQSxDQUFBTyxNQUFNO1FBQUNDLEtBQUssRUFBQyxZQUFZO1FBQUNDLGFBQWEsRUFBRTtNQUFNLENBQUUsQ0FBQyxDQUFDO01BQTdFZ0IsYUFBYSxHQUFBRCxRQUFBLENBQWJDLGFBQWE7SUFDckIsSUFBTUwsU0FBUyxHQUFHSyxhQUFhLENBQUMsWUFBWSxDQUFDO0lBQzdDYixNQUFNLENBQUNRLFNBQVMsQ0FBQyxDQUFDTSxRQUFRLENBQUMsQ0FBQztFQUM5QixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==