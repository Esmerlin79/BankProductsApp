872657e8a0b179080950a02e44c18e9f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reversePercentage = exports.makeSlideTranslation = exports.initializeAnimations = exports.buildAnimations = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _reactNative = require("react-native");
var animatable = _interopRequireWildcard(require("react-native-animatable"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var _Dimensions$get = _reactNative.Dimensions.get('window'),
  height = _Dimensions$get.height,
  width = _Dimensions$get.width;
var initializeAnimations = exports.initializeAnimations = function initializeAnimations() {
  var animationDefinitions = {
    slideInDown: makeSlideTranslation('translateY', -height, 0),
    slideInUp: makeSlideTranslation('translateY', height, 0),
    slideInLeft: makeSlideTranslation('translateX', -width, 0),
    slideInRight: makeSlideTranslation('translateX', width, 0),
    slideOutDown: makeSlideTranslation('translateY', 0, height),
    slideOutUp: makeSlideTranslation('translateY', 0, -height),
    slideOutLeft: makeSlideTranslation('translateX', 0, -width),
    slideOutRight: makeSlideTranslation('translateX', 0, width)
  };
  animatable.initializeRegistryWithDefinitions(animationDefinitions);
};
var makeSlideTranslation = exports.makeSlideTranslation = function makeSlideTranslation(translationType, fromValue, toValue) {
  return {
    from: (0, _defineProperty2.default)({}, translationType, fromValue),
    to: (0, _defineProperty2.default)({}, translationType, toValue)
  };
};
var buildAnimations = exports.buildAnimations = function buildAnimations(_ref) {
  var animationIn = _ref.animationIn,
    animationOut = _ref.animationOut;
  var updatedAnimationIn;
  var updatedAnimationOut;
  if (isObject(animationIn)) {
    var animationName = JSON.stringify(animationIn);
    makeAnimation(animationName, animationIn);
    updatedAnimationIn = animationName;
  } else {
    updatedAnimationIn = animationIn;
  }
  if (isObject(animationOut)) {
    var _animationName = JSON.stringify(animationOut);
    makeAnimation(_animationName, animationOut);
    updatedAnimationOut = _animationName;
  } else {
    updatedAnimationOut = animationOut;
  }
  return {
    animationIn: updatedAnimationIn,
    animationOut: updatedAnimationOut
  };
};
var reversePercentage = exports.reversePercentage = function reversePercentage(x) {
  return -(x - 1);
};
var makeAnimation = function makeAnimation(name, obj) {
  animatable.registerAnimation(name, animatable.createAnimation(obj));
};
var isObject = function isObject(obj) {
  return obj !== null && typeof obj === 'object';
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,