{"version":3,"names":["_react","_interopRequireWildcard","require","_propTypes","_interopRequireDefault","_reactNative","_ensureNativeModuleAvailable","_createIconSourceCache","_iconButton","_NativeRNVectorIcons","_jsxRuntime","_excluded","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","DEFAULT_ICON_SIZE","exports","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","web","IconNamePropType","PropTypes","oneOf","keys","Icon","_PureComponent","_inherits2","_super","_classCallCheck2","_createClass2","key","value","render","_this$props","props","name","size","color","style","children","_objectWithoutProperties2","glyph","String","fromCodePoint","styleDefaults","fontSize","styleOverrides","fontWeight","jsxs","Text","assign","selectable","PureComponent","propTypes","allowFontScaling","bool","number","any","node","defaultProps","imageSourceCache","createIconSourceCache","resolveGlyph","getImageSourceSync","length","undefined","ensureNativeModuleAvailable","processedColor","processColor","cacheKey","imagePath","NativeIconAPI","getImageForFontSync","uri","scale","PixelRatio","setValue","error","setError","getImageSource","_x","_getImageSource","_asyncToGenerator2","getImageForFont","loadFont","_loadFont","file","OS","Error","loadFontWithFileName","_toConsumableArray2","split","hasIcon","getRawGlyphMap","getFontFamily","Button","createIconButtonComponent"],"sources":["create-icon-set.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Platform, PixelRatio, processColor, Text } from 'react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconSourceCache from './create-icon-source-cache';\nimport createIconButtonComponent from './icon-button';\nimport NativeIconAPI from './NativeRNVectorIcons';\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCodePoint(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n\n      return (\n        <Text selectable={false} {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    const glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n\n  function getImageSourceSync(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        throw new Error('Unable to load font, because no file was specified. ');\n      }\n      await NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"],"mappings":"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"}