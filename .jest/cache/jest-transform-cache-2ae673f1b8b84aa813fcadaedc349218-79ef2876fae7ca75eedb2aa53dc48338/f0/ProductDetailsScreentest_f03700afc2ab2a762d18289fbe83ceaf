bd2695737716e73d21b6842b9a12b578
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ProductDetailsScreen = require("../ProductDetailsScreen");
var _jsxRuntime = require("react/jsx-runtime");
describe('ProductDetailsScreen', function () {
  jest.useFakeTimers();
  var mockProduct = {
    id: '1',
    name: 'Product 1',
    description: 'Description of Product 1',
    logo: 'https://example.com/product1.jpg',
    date_release: '2023-10-27T10:00:00Z',
    date_revision: '2023-10-28T14:30:00Z'
  };
  var mockRoute = {
    params: {
      product: mockProduct
    }
  };
  it('renders correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProductDetailsScreen.ProductDetailsScreen, {
        navigation: {
          goBack: jest.fn()
        },
        route: mockRoute
      })),
      getByText = _render.getByText;
    expect(getByText(`ID: ${mockProduct.id}`)).toBeTruthy();
    expect(getByText(`${mockProduct.name}`)).toBeTruthy();
    expect(getByText(`${mockProduct.description}`)).toBeTruthy();
    expect(getByText('Fecha liberacion')).toBeTruthy();
    expect(getByText('Fecha revision')).toBeTruthy();
  });
  it('show button Eliminar correctly', (0, _asyncToGenerator2.default)(function* () {
    var deleteProduct = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProductDetailsScreen.ProductDetailsScreen, {
        navigation: {
          goBack: jest.fn(),
          navigate: jest.fn()
        },
        route: mockRoute
      })),
      getByText = _render2.getByText,
      rerender = _render2.rerender;
    _reactNative.fireEvent.press(getByText('Eliminar'));
    expect(getByText('Eliminar')).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Qcm9kdWN0RGV0YWlsc1NjcmVlbiIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJqZXN0IiwidXNlRmFrZVRpbWVycyIsIm1vY2tQcm9kdWN0IiwiaWQiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJsb2dvIiwiZGF0ZV9yZWxlYXNlIiwiZGF0ZV9yZXZpc2lvbiIsIm1vY2tSb3V0ZSIsInBhcmFtcyIsInByb2R1Y3QiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJQcm9kdWN0RGV0YWlsc1NjcmVlbiIsIm5hdmlnYXRpb24iLCJnb0JhY2siLCJmbiIsInJvdXRlIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJkZWxldGVQcm9kdWN0IiwiX3JlbmRlcjIiLCJuYXZpZ2F0ZSIsInJlcmVuZGVyIiwiZmlyZUV2ZW50IiwicHJlc3MiXSwic291cmNlcyI6WyJQcm9kdWN0RGV0YWlsc1NjcmVlbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBQcm9kdWN0RGV0YWlsc1NjcmVlbiB9IGZyb20gJy4uL1Byb2R1Y3REZXRhaWxzU2NyZWVuJztcbmltcG9ydCB7IFByb2R1Y3RzQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvUHJvZHVjdENvbnRleHQnO1xuXG5kZXNjcmliZSgnUHJvZHVjdERldGFpbHNTY3JlZW4nLCAoKSA9PiB7XG4gIGplc3QudXNlRmFrZVRpbWVycygpXG5cbiAgY29uc3QgbW9ja1Byb2R1Y3QgPSB7XG4gICAgaWQ6ICcxJyxcbiAgICBuYW1lOiAnUHJvZHVjdCAxJyxcbiAgICBkZXNjcmlwdGlvbjogJ0Rlc2NyaXB0aW9uIG9mIFByb2R1Y3QgMScsXG4gICAgbG9nbzogJ2h0dHBzOi8vZXhhbXBsZS5jb20vcHJvZHVjdDEuanBnJyxcbiAgICBkYXRlX3JlbGVhc2U6ICcyMDIzLTEwLTI3VDEwOjAwOjAwWicsXG4gICAgZGF0ZV9yZXZpc2lvbjogJzIwMjMtMTAtMjhUMTQ6MzA6MDBaJyxcbiAgfTtcblxuICBjb25zdCBtb2NrUm91dGUgPSB7XG4gICAgcGFyYW1zOiB7XG4gICAgICBwcm9kdWN0OiBtb2NrUHJvZHVjdCxcbiAgICB9LFxuICB9O1xuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPFByb2R1Y3REZXRhaWxzU2NyZWVuIG5hdmlnYXRpb249e3sgZ29CYWNrOiBqZXN0LmZuKCkgfSBhcyBhbnl9IHJvdXRlPXttb2NrUm91dGUgYXMgYW55fSAvPlxuICAgICk7XG5cbiAgICBleHBlY3QoZ2V0QnlUZXh0KGBJRDogJHttb2NrUHJvZHVjdC5pZH1gKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoYCR7bW9ja1Byb2R1Y3QubmFtZX1gKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoYCR7bW9ja1Byb2R1Y3QuZGVzY3JpcHRpb259YCkpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdGZWNoYSBsaWJlcmFjaW9uJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdGZWNoYSByZXZpc2lvbicpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIC8vIGl0KCduYXZpZ2F0ZXMgdG8gUHJvZHVjdFJlZ2lzdGVyU2NyZWVuIG9uIEVkaXQgYnV0dG9uIHByZXNzJywgKCkgPT4ge1xuICAvLyAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gIC8vICAgICAvL0B0cy1pZ25vcmVcbiAgLy8gICAgIDxQcm9kdWN0c0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3sgZGVsZXRlUHJvZHVjdDogamVzdC5mbigpIH19PlxuICAvLyAgICAgICA8UHJvZHVjdERldGFpbHNTY3JlZW4gbmF2aWdhdGlvbj17eyBnb0JhY2s6IGplc3QuZm4oKSwgbmF2aWdhdGU6IGplc3QuZm4oKSB9IGFzIGFueX0gcm91dGU9e21vY2tSb3V0ZSBhcyBhbnl9IC8+XG4gIC8vICAgICA8L1Byb2R1Y3RzQ29udGV4dC5Qcm92aWRlcj5cbiAgLy8gICApO1xuXG4gIC8vICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnRWRpdGFyJykpO1xuICAvLyAgIC8vQHRzLWlnbm9yZVxuICAvLyAgIGV4cGVjdChuYXZpZ2F0aW9uLm5hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnUHJvZHVjdFJlZ2lzdGVyU2NyZWVuJywgeyBwcm9kdWN0OiBtb2NrUHJvZHVjdCB9KTtcbiAgLy8gfSk7XG5cbiAgLy8gaXQoJ3Nob3dzIG1vZGFsIG9uIERlbGV0ZSBidXR0b24gcHJlc3MnLCBhc3luYyAoKSA9PiB7XG4gIC8vICAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gIC8vICAgICAvL0B0cy1pZ25vcmVcbiAgLy8gICAgIDxQcm9kdWN0c0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3sgZGVsZXRlUHJvZHVjdDogamVzdC5mbigpIH19PlxuICAvLyAgICAgICA8UHJvZHVjdERldGFpbHNTY3JlZW4gbmF2aWdhdGlvbj17eyBnb0JhY2s6IGplc3QuZm4oKSwgbmF2aWdhdGU6IGplc3QuZm4oKSB9IGFzIGFueX0gcm91dGU9e21vY2tSb3V0ZSBhcyBhbnl9IC8+XG4gIC8vICAgICA8L1Byb2R1Y3RzQ29udGV4dC5Qcm92aWRlcj5cbiAgLy8gICApO1xuXG4gIC8vICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnRWxpbWluYXInKSk7XG4gIC8vICAgZXhwZWN0KGdldEJ5VGV4dChgwr9Fc3RhcyBzZWd1cm8gZGUgZWxpbWluYXIgZWwgcHJvZHVjdG8gJHttb2NrUHJvZHVjdC5uYW1lfT9gKSkudG9CZVRydXRoeSgpO1xuICAvLyB9KTtcblxuICBpdCgnc2hvdyBidXR0b24gRWxpbWluYXIgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGRlbGV0ZVByb2R1Y3QgPSBqZXN0LmZuKCk7XG4gICAgY29uc3QgeyBnZXRCeVRleHQsIHJlcmVuZGVyIH0gPSByZW5kZXIoXG4gICAgICA8UHJvZHVjdERldGFpbHNTY3JlZW4gbmF2aWdhdGlvbj17eyBnb0JhY2s6IGplc3QuZm4oKSwgbmF2aWdhdGU6IGplc3QuZm4oKSB9IGFzIGFueX0gcm91dGU9e21vY2tSb3V0ZSBhcyBhbnl9IC8+XG4gICAgKTtcblxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ0VsaW1pbmFyJykpO1xuXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnRWxpbWluYXInKSkudG9CZVRydXRoeSgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLHFCQUFBLEdBQUFGLE9BQUE7QUFBK0QsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBRy9ESSxRQUFRLENBQUMsc0JBQXNCLEVBQUUsWUFBTTtFQUNyQ0MsSUFBSSxDQUFDQyxhQUFhLENBQUMsQ0FBQztFQUVwQixJQUFNQyxXQUFXLEdBQUc7SUFDbEJDLEVBQUUsRUFBRSxHQUFHO0lBQ1BDLElBQUksRUFBRSxXQUFXO0lBQ2pCQyxXQUFXLEVBQUUsMEJBQTBCO0lBQ3ZDQyxJQUFJLEVBQUUsa0NBQWtDO0lBQ3hDQyxZQUFZLEVBQUUsc0JBQXNCO0lBQ3BDQyxhQUFhLEVBQUU7RUFDakIsQ0FBQztFQUVELElBQU1DLFNBQVMsR0FBRztJQUNoQkMsTUFBTSxFQUFFO01BQ05DLE9BQU8sRUFBRVQ7SUFDWDtFQUNGLENBQUM7RUFFRFUsRUFBRSxDQUFDLG1CQUFtQixFQUFFLFlBQU07SUFDNUIsSUFBQUMsT0FBQSxHQUFzQixJQUFBQyxtQkFBTSxFQUMxQixJQUFBaEIsV0FBQSxDQUFBaUIsR0FBQSxFQUFDbEIscUJBQUEsQ0FBQW1CLG9CQUFvQjtRQUFDQyxVQUFVLEVBQUU7VUFBRUMsTUFBTSxFQUFFbEIsSUFBSSxDQUFDbUIsRUFBRSxDQUFDO1FBQUUsQ0FBUztRQUFDQyxLQUFLLEVBQUVYO01BQWlCLENBQUUsQ0FDNUYsQ0FBQztNQUZPWSxTQUFTLEdBQUFSLE9BQUEsQ0FBVFEsU0FBUztJQUlqQkMsTUFBTSxDQUFDRCxTQUFTLENBQUUsT0FBTW5CLFdBQVcsQ0FBQ0MsRUFBRyxFQUFDLENBQUMsQ0FBQyxDQUFDb0IsVUFBVSxDQUFDLENBQUM7SUFDdkRELE1BQU0sQ0FBQ0QsU0FBUyxDQUFFLEdBQUVuQixXQUFXLENBQUNFLElBQUssRUFBQyxDQUFDLENBQUMsQ0FBQ21CLFVBQVUsQ0FBQyxDQUFDO0lBQ3JERCxNQUFNLENBQUNELFNBQVMsQ0FBRSxHQUFFbkIsV0FBVyxDQUFDRyxXQUFZLEVBQUMsQ0FBQyxDQUFDLENBQUNrQixVQUFVLENBQUMsQ0FBQztJQUM1REQsTUFBTSxDQUFDRCxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUNsREQsTUFBTSxDQUFDRCxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztFQUNsRCxDQUFDLENBQUM7RUEyQkZYLEVBQUUsQ0FBQyxnQ0FBZ0MsTUFBQVksa0JBQUEsQ0FBQUMsT0FBQSxFQUFFLGFBQVk7SUFDL0MsSUFBTUMsYUFBYSxHQUFHMUIsSUFBSSxDQUFDbUIsRUFBRSxDQUFDLENBQUM7SUFDL0IsSUFBQVEsUUFBQSxHQUFnQyxJQUFBYixtQkFBTSxFQUNwQyxJQUFBaEIsV0FBQSxDQUFBaUIsR0FBQSxFQUFDbEIscUJBQUEsQ0FBQW1CLG9CQUFvQjtRQUFDQyxVQUFVLEVBQUU7VUFBRUMsTUFBTSxFQUFFbEIsSUFBSSxDQUFDbUIsRUFBRSxDQUFDLENBQUM7VUFBRVMsUUFBUSxFQUFFNUIsSUFBSSxDQUFDbUIsRUFBRSxDQUFDO1FBQUUsQ0FBUztRQUFDQyxLQUFLLEVBQUVYO01BQWlCLENBQUUsQ0FDakgsQ0FBQztNQUZPWSxTQUFTLEdBQUFNLFFBQUEsQ0FBVE4sU0FBUztNQUFFUSxRQUFRLEdBQUFGLFFBQUEsQ0FBUkUsUUFBUTtJQUkzQkMsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDVixTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFdENDLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0VBQzVDLENBQUMsRUFBQztBQUNKLENBQUMsQ0FBQyJ9