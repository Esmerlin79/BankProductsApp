6233201beb898764b5250137c4f9490a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomTextInput = void 0;
var _reactNative = require("react-native");
var _theme = _interopRequireDefault(require("../themes/theme"));
var _jsxRuntime = require("react/jsx-runtime");
var CustomTextInput = exports.CustomTextInput = function CustomTextInput(_ref) {
  var placeholder = _ref.placeholder,
    value = _ref.value,
    onChange = _ref.onChange,
    errorInput = _ref.errorInput,
    messageError = _ref.messageError,
    disabled = _ref.disabled,
    style = _ref.style;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
      testID: "input",
      placeholder: placeholder,
      placeholderTextColor: _theme.default.black,
      editable: !disabled,
      style: [style, Object.assign({}, styles.inputField, {
        borderColor: errorInput ? _theme.default.red : _theme.default.lightGrey,
        color: disabled ? _theme.default.gray : _theme.default.black
      }), disabled && styles.disabledField],
      autoCapitalize: "words",
      autoCorrect: false,
      onChangeText: function onChangeText(value) {
        return onChange(value);
      },
      value: value
    }), errorInput && (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.text,
      children: messageError
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  inputField: {
    borderWidth: 1,
    height: 50,
    borderColor: _theme.default.lightGrey,
    borderRadius: 5,
    padding: 10
  },
  text: {
    color: _theme.default.red,
    fontSize: 16,
    marginTop: 5
  },
  disabledField: {
    backgroundColor: _theme.default.darkGrey
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX3RoZW1lIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9qc3hSdW50aW1lIiwiQ3VzdG9tVGV4dElucHV0IiwiZXhwb3J0cyIsIl9yZWYiLCJwbGFjZWhvbGRlciIsInZhbHVlIiwib25DaGFuZ2UiLCJlcnJvcklucHV0IiwibWVzc2FnZUVycm9yIiwiZGlzYWJsZWQiLCJzdHlsZSIsImpzeHMiLCJWaWV3IiwiY2hpbGRyZW4iLCJqc3giLCJUZXh0SW5wdXQiLCJ0ZXN0SUQiLCJwbGFjZWhvbGRlclRleHRDb2xvciIsInRoZW1lIiwiYmxhY2siLCJlZGl0YWJsZSIsIk9iamVjdCIsImFzc2lnbiIsInN0eWxlcyIsImlucHV0RmllbGQiLCJib3JkZXJDb2xvciIsInJlZCIsImxpZ2h0R3JleSIsImNvbG9yIiwiZ3JheSIsImRpc2FibGVkRmllbGQiLCJhdXRvQ2FwaXRhbGl6ZSIsImF1dG9Db3JyZWN0Iiwib25DaGFuZ2VUZXh0IiwiVGV4dCIsInRleHQiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiYm9yZGVyV2lkdGgiLCJoZWlnaHQiLCJib3JkZXJSYWRpdXMiLCJwYWRkaW5nIiwiZm9udFNpemUiLCJtYXJnaW5Ub3AiLCJiYWNrZ3JvdW5kQ29sb3IiLCJkYXJrR3JleSJdLCJzb3VyY2VzIjpbIkN1c3RvbVRleHRJbnB1dC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3R5bGVQcm9wLCBTdHlsZVNoZWV0LCBUZXh0LCBUZXh0SW5wdXQsIFRleHRTdHlsZSwgVmlldyB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIlxuaW1wb3J0IHRoZW1lIGZyb20gXCIuLi90aGVtZXMvdGhlbWVcIjtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgICBvbkNoYW5nZTogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgdmFsdWU6IHN0cmluZztcbiAgICBlcnJvcklucHV0PzogYm9vbGVhbjtcbiAgICBtZXNzYWdlRXJyb3I/OiBzdHJpbmc7XG4gICAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICAgIHN0eWxlPzogU3R5bGVQcm9wPFRleHRTdHlsZT47XG59XG5cbmV4cG9ydCBjb25zdCBDdXN0b21UZXh0SW5wdXQgPSAoeyBcbiAgICBwbGFjZWhvbGRlciwgXG4gICAgdmFsdWUsIFxuICAgIG9uQ2hhbmdlLCBcbiAgICBlcnJvcklucHV0LCBcbiAgICBtZXNzYWdlRXJyb3IsIFxuICAgIGRpc2FibGVkLFxuICAgIHN0eWxlIFxufTogUHJvcHMpID0+IHtcbiAgICBcbiAgICByZXR1cm4gKFxuICAgICAgPFZpZXc+XG4gICAgICAgICAgPFRleHRJbnB1dCBcbiAgICAgICAgICAgICAgICB0ZXN0SUQ9XCJpbnB1dFwiXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9eyBwbGFjZWhvbGRlciB9XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJUZXh0Q29sb3I9eyB0aGVtZS5ibGFjayB9XG4gICAgICAgICAgICAgICAgZWRpdGFibGU9eyAhZGlzYWJsZWQgfVxuICAgICAgICAgICAgICAgIHN0eWxlPXtbIFxuICAgICAgICAgICAgICAgICAgICBzdHlsZSwgXG4gICAgICAgICAgICAgICAgICAgIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdHlsZXMuaW5wdXRGaWVsZCwgXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogZXJyb3JJbnB1dCA/IHRoZW1lLnJlZCA6IHRoZW1lLmxpZ2h0R3JleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBkaXNhYmxlZCA/IHRoZW1lLmdyYXkgOiB0aGVtZS5ibGFja1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZCAmJiBzdHlsZXMuZGlzYWJsZWRGaWVsZCwgXG4gICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICBhdXRvQ2FwaXRhbGl6ZT1cIndvcmRzXCJcbiAgICAgICAgICAgICAgICBhdXRvQ29ycmVjdD17IGZhbHNlIH1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZVRleHQ9eyAodmFsdWUpID0+IG9uQ2hhbmdlKHZhbHVlKX1cbiAgICAgICAgICAgICAgICB2YWx1ZT17IHZhbHVlIH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7IGVycm9ySW5wdXQgJiYgKFxuICAgICAgICAgICAgICAgIDxUZXh0IHN0eWxlPXsgc3R5bGVzLnRleHQgfT57IG1lc3NhZ2VFcnJvciB9PC9UZXh0PlxuICAgICAgICAgICAgKX1cbiAgICAgIDwvVmlldz5cbiAgICApXG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBpbnB1dEZpZWxkOiB7XG4gICAgICAgIGJvcmRlcldpZHRoOiAxLFxuICAgICAgICBoZWlnaHQ6IDUwLFxuICAgICAgICBib3JkZXJDb2xvcjogdGhlbWUubGlnaHRHcmV5LFxuICAgICAgICBib3JkZXJSYWRpdXM6IDUsXG4gICAgICAgIHBhZGRpbmc6IDEwLFxuICAgIH0sXG4gICAgdGV4dDoge1xuICAgICAgICBjb2xvcjogdGhlbWUucmVkLFxuICAgICAgICBmb250U2l6ZTogMTYsXG4gICAgICAgIG1hcmdpblRvcDogNSxcbiAgICB9LFxuICAgIGRpc2FibGVkRmllbGQ6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5kYXJrR3JleSxcbiAgICB9LFxufSkiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQW9DLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQVk3QixJQUFNSSxlQUFlLEdBQUFDLE9BQUEsQ0FBQUQsZUFBQSxHQUFHLFNBQWxCQSxlQUFlQSxDQUFBRSxJQUFBLEVBUWY7RUFBQSxJQVBUQyxXQUFXLEdBQUFELElBQUEsQ0FBWEMsV0FBVztJQUNYQyxLQUFLLEdBQUFGLElBQUEsQ0FBTEUsS0FBSztJQUNMQyxRQUFRLEdBQUFILElBQUEsQ0FBUkcsUUFBUTtJQUNSQyxVQUFVLEdBQUFKLElBQUEsQ0FBVkksVUFBVTtJQUNWQyxZQUFZLEdBQUFMLElBQUEsQ0FBWkssWUFBWTtJQUNaQyxRQUFRLEdBQUFOLElBQUEsQ0FBUk0sUUFBUTtJQUNSQyxLQUFLLEdBQUFQLElBQUEsQ0FBTE8sS0FBSztFQUdMLE9BQ0UsSUFBQVYsV0FBQSxDQUFBVyxJQUFBLEVBQUNmLFlBQUEsQ0FBQWdCLElBQUk7SUFBQUMsUUFBQSxHQUNELElBQUFiLFdBQUEsQ0FBQWMsR0FBQSxFQUFDbEIsWUFBQSxDQUFBbUIsU0FBUztNQUNKQyxNQUFNLEVBQUMsT0FBTztNQUNkWixXQUFXLEVBQUdBLFdBQWE7TUFDM0JhLG9CQUFvQixFQUFHQyxjQUFLLENBQUNDLEtBQU87TUFDcENDLFFBQVEsRUFBRyxDQUFDWCxRQUFVO01BQ3RCQyxLQUFLLEVBQUUsQ0FDSEEsS0FBSyxFQUFBVyxNQUFBLENBQUFDLE1BQUEsS0FFRUMsTUFBTSxDQUFDQyxVQUFVO1FBQ3BCQyxXQUFXLEVBQUVsQixVQUFVLEdBQUdXLGNBQUssQ0FBQ1EsR0FBRyxHQUFHUixjQUFLLENBQUNTLFNBQVM7UUFDckRDLEtBQUssRUFBRW5CLFFBQVEsR0FBR1MsY0FBSyxDQUFDVyxJQUFJLEdBQUdYLGNBQUssQ0FBQ0M7TUFBSyxJQUU5Q1YsUUFBUSxJQUFJYyxNQUFNLENBQUNPLGFBQWEsQ0FDbEM7TUFDRkMsY0FBYyxFQUFDLE9BQU87TUFDdEJDLFdBQVcsRUFBRyxLQUFPO01BQ3JCQyxZQUFZLEVBQUcsU0FBQUEsYUFBQzVCLEtBQUs7UUFBQSxPQUFLQyxRQUFRLENBQUNELEtBQUssQ0FBQztNQUFBLENBQUM7TUFDMUNBLEtBQUssRUFBR0E7SUFBTyxDQUNsQixDQUFDLEVBQ0FFLFVBQVUsSUFDUixJQUFBUCxXQUFBLENBQUFjLEdBQUEsRUFBQ2xCLFlBQUEsQ0FBQXNDLElBQUk7TUFBQ3hCLEtBQUssRUFBR2EsTUFBTSxDQUFDWSxJQUFNO01BQUF0QixRQUFBLEVBQUdMO0lBQVksQ0FBUSxDQUNyRDtFQUFBLENBQ0QsQ0FBQztBQUViLENBQUM7QUFFRCxJQUFNZSxNQUFNLEdBQUdhLHVCQUFVLENBQUNDLE1BQU0sQ0FBQztFQUM3QmIsVUFBVSxFQUFFO0lBQ1JjLFdBQVcsRUFBRSxDQUFDO0lBQ2RDLE1BQU0sRUFBRSxFQUFFO0lBQ1ZkLFdBQVcsRUFBRVAsY0FBSyxDQUFDUyxTQUFTO0lBQzVCYSxZQUFZLEVBQUUsQ0FBQztJQUNmQyxPQUFPLEVBQUU7RUFDYixDQUFDO0VBQ0ROLElBQUksRUFBRTtJQUNGUCxLQUFLLEVBQUVWLGNBQUssQ0FBQ1EsR0FBRztJQUNoQmdCLFFBQVEsRUFBRSxFQUFFO0lBQ1pDLFNBQVMsRUFBRTtFQUNmLENBQUM7RUFDRGIsYUFBYSxFQUFFO0lBQ1hjLGVBQWUsRUFBRTFCLGNBQUssQ0FBQzJCO0VBQzNCO0FBQ0osQ0FBQyxDQUFDIn0=