a48a821ed88ae0db664cc8b76c91f228
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createAnimatableComponent;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _wrapStyleTransforms = _interopRequireDefault(require("./wrapStyleTransforms"));
var _getStyleValues = _interopRequireDefault(require("./getStyleValues"));
var _flattenStyle = _interopRequireDefault(require("./flattenStyle"));
var _createAnimation = _interopRequireDefault(require("./createAnimation"));
var _registry = require("./registry");
var _easing = _interopRequireDefault(require("./easing"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var INTERPOLATION_STYLE_PROPERTIES = ['rotate', 'rotateX', 'rotateY', 'rotateZ', 'skewX', 'skewY', 'transformMatrix', 'backgroundColor', 'borderColor', 'borderTopColor', 'borderRightColor', 'borderBottomColor', 'borderLeftColor', 'shadowColor', 'color', 'textDecorationColor', 'tintColor'];
var ZERO_CLAMPED_STYLE_PROPERTIES = ['width', 'height'];
function omit(keys, source) {
  var filtered = {};
  Object.keys(source).forEach(function (key) {
    if (keys.indexOf(key) === -1) {
      filtered[key] = source[key];
    }
  });
  return filtered;
}
function deepEquals(a, b) {
  return a === b || JSON.stringify(a) === JSON.stringify(b);
}
function getAnimationTarget(iteration, direction) {
  switch (direction) {
    case 'reverse':
      return 0;
    case 'alternate':
      return iteration % 2 ? 0 : 1;
    case 'alternate-reverse':
      return iteration % 2 ? 1 : 0;
    case 'normal':
    default:
      return 1;
  }
}
function getAnimationOrigin(iteration, direction) {
  return getAnimationTarget(iteration, direction) ? 0 : 1;
}
function getCompiledAnimation(animation) {
  if (typeof animation === 'string') {
    var compiledAnimation = (0, _registry.getAnimationByName)(animation);
    if (!compiledAnimation) {
      throw new Error(`No animation registred by the name of ${animation}`);
    }
    return compiledAnimation;
  }
  return (0, _createAnimation.default)(animation);
}
function makeInterpolatedStyle(compiledAnimation, animationValue) {
  var style = {};
  Object.keys(compiledAnimation).forEach(function (key) {
    if (key === 'style') {
      Object.assign(style, compiledAnimation.style);
    } else if (key !== 'easing') {
      style[key] = animationValue.interpolate(compiledAnimation[key]);
    }
  });
  return (0, _wrapStyleTransforms.default)(style);
}
function transitionToValue(property, transitionValue, toValue, duration, easing) {
  var useNativeDriver = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  var delay = arguments.length > 6 ? arguments[6] : undefined;
  var onTransitionBegin = arguments.length > 7 ? arguments[7] : undefined;
  var onTransitionEnd = arguments.length > 8 ? arguments[8] : undefined;
  var animation = duration || easing || delay ? _reactNative.Animated.timing(transitionValue, {
    toValue: toValue,
    delay: delay,
    duration: duration || 1000,
    easing: typeof easing === 'function' ? easing : _easing.default[easing || 'ease'],
    useNativeDriver: useNativeDriver
  }) : _reactNative.Animated.spring(transitionValue, {
    toValue: toValue,
    useNativeDriver: useNativeDriver
  });
  setTimeout(function () {
    return onTransitionBegin(property);
  }, delay);
  animation.start(function () {
    return onTransitionEnd(property);
  });
}
function createAnimatableComponent(WrappedComponent) {
  var _class;
  var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
  var Animatable = _reactNative.Animated.createAnimatedComponent(WrappedComponent);
  return _class = function (_Component) {
    (0, _inherits2.default)(AnimatableComponent, _Component);
    var _super = _createSuper(AnimatableComponent);
    function AnimatableComponent(props) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatableComponent);
      _this = _super.call(this, props);
      _this.ref = null;
      _this.handleRef = function (ref) {
        _this.ref = ref;
      };
      var animationValue = new _reactNative.Animated.Value(getAnimationOrigin(0, _this.props.direction));
      var animationStyle = {};
      var compiledAnimation = {};
      if (props.animation) {
        compiledAnimation = getCompiledAnimation(props.animation);
        animationStyle = makeInterpolatedStyle(compiledAnimation, animationValue);
      }
      _this.state = {
        animationValue: animationValue,
        animationStyle: animationStyle,
        compiledAnimation: compiledAnimation,
        transitionStyle: {},
        transitionValues: {},
        currentTransitionValues: {}
      };
      if (props.transition) {
        _this.state = Object.assign({}, _this.state, _this.initializeTransitionState(props.transition));
      }
      _this.delayTimer = null;
      (0, _registry.getAnimationNames)().forEach(function (animationName) {
        if (!(animationName in (0, _assertThisInitialized2.default)(_this))) {
          _this[animationName] = _this.animate.bind((0, _assertThisInitialized2.default)(_this), animationName);
        }
      });
      return _this;
    }
    (0, _createClass2.default)(AnimatableComponent, [{
      key: "initializeTransitionState",
      value: function initializeTransitionState(transitionKeys) {
        var transitionValues = {};
        var styleValues = {};
        var currentTransitionValues = (0, _getStyleValues.default)(transitionKeys, this.props.style);
        Object.keys(currentTransitionValues).forEach(function (key) {
          var value = currentTransitionValues[key];
          if (INTERPOLATION_STYLE_PROPERTIES.indexOf(key) !== -1 || typeof value !== 'number') {
            transitionValues[key] = new _reactNative.Animated.Value(0);
            styleValues[key] = value;
          } else {
            var animationValue = new _reactNative.Animated.Value(value);
            transitionValues[key] = animationValue;
            styleValues[key] = animationValue;
          }
        });
        return {
          currentTransitionValues: currentTransitionValues,
          transitionStyle: styleValues,
          transitionValues: transitionValues
        };
      }
    }, {
      key: "getTransitionState",
      value: function getTransitionState(keys) {
        var _this2 = this;
        var transitionKeys = typeof keys === 'string' ? [keys] : keys;
        var _this$state = this.state,
          transitionValues = _this$state.transitionValues,
          currentTransitionValues = _this$state.currentTransitionValues,
          transitionStyle = _this$state.transitionStyle;
        var missingKeys = transitionKeys.filter(function (key) {
          return !_this2.state.transitionValues[key];
        });
        if (missingKeys.length) {
          var transitionState = this.initializeTransitionState(missingKeys);
          transitionValues = Object.assign({}, transitionValues, transitionState.transitionValues);
          currentTransitionValues = Object.assign({}, currentTransitionValues, transitionState.currentTransitionValues);
          transitionStyle = Object.assign({}, transitionStyle, transitionState.transitionStyle);
        }
        return {
          transitionValues: transitionValues,
          currentTransitionValues: currentTransitionValues,
          transitionStyle: transitionStyle
        };
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        if (this.ref) {
          this.ref.setNativeProps(nativeProps);
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this3 = this;
        var _this$props = this.props,
          animation = _this$props.animation,
          duration = _this$props.duration,
          delay = _this$props.delay,
          onAnimationBegin = _this$props.onAnimationBegin,
          iterationDelay = _this$props.iterationDelay;
        if (animation) {
          var startAnimation = function startAnimation() {
            onAnimationBegin();
            _this3.startAnimation(duration, 0, iterationDelay, function (endState) {
              return _this3.props.onAnimationEnd(endState);
            });
            _this3.delayTimer = null;
          };
          if (delay) {
            this.delayTimer = setTimeout(startAnimation, delay);
          } else {
            startAnimation();
          }
        }
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(props) {
        var _this4 = this;
        var animation = props.animation,
          delay = props.delay,
          duration = props.duration,
          easing = props.easing,
          iterationDelay = props.iterationDelay,
          transition = props.transition,
          onAnimationBegin = props.onAnimationBegin;
        if (transition) {
          var values = (0, _getStyleValues.default)(transition, props.style);
          this.transitionTo(values, duration, easing, delay);
        } else if (!deepEquals(animation, this.props.animation)) {
          if (animation) {
            if (this.delayTimer) {
              this.setAnimation(animation);
            } else {
              onAnimationBegin();
              this.animate(animation, duration, iterationDelay).then(function (endState) {
                return _this4.props.onAnimationEnd(endState);
              });
            }
          } else {
            this.stopAnimation();
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.delayTimer) {
          clearTimeout(this.delayTimer);
        }
      }
    }, {
      key: "setAnimation",
      value: function setAnimation(animation, callback) {
        var compiledAnimation = getCompiledAnimation(animation);
        this.setState(function (state) {
          return {
            animationStyle: makeInterpolatedStyle(compiledAnimation, state.animationValue),
            compiledAnimation: compiledAnimation
          };
        }, callback);
      }
    }, {
      key: "animate",
      value: function animate(animation, duration, iterationDelay) {
        var _this5 = this;
        return new Promise(function (resolve) {
          _this5.setAnimation(animation, function () {
            _this5.startAnimation(duration, 0, iterationDelay, resolve);
          });
        });
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation() {
        this.setState({
          scheduledAnimation: false,
          animationStyle: {}
        });
        this.state.animationValue.stopAnimation();
        if (this.delayTimer) {
          clearTimeout(this.delayTimer);
          this.delayTimer = null;
        }
      }
    }, {
      key: "startAnimation",
      value: function startAnimation(duration, iteration, iterationDelay, callback) {
        var _this6 = this;
        var _this$state2 = this.state,
          animationValue = _this$state2.animationValue,
          compiledAnimation = _this$state2.compiledAnimation;
        var _this$props2 = this.props,
          direction = _this$props2.direction,
          iterationCount = _this$props2.iterationCount,
          useNativeDriver = _this$props2.useNativeDriver;
        var easing = this.props.easing || compiledAnimation.easing || 'ease';
        var currentIteration = iteration || 0;
        var fromValue = getAnimationOrigin(currentIteration, direction);
        var toValue = getAnimationTarget(currentIteration, direction);
        animationValue.setValue(fromValue);
        if (typeof easing === 'string') {
          easing = _easing.default[easing];
        }
        var reversed = direction === 'reverse' || direction === 'alternate' && !toValue || direction === 'alternate-reverse' && !toValue;
        if (reversed) {
          easing = _reactNative.Easing.out(easing);
        }
        var config = {
          toValue: toValue,
          easing: easing,
          isInteraction: iterationCount <= 1,
          duration: duration || this.props.duration || 1000,
          useNativeDriver: useNativeDriver,
          delay: iterationDelay || 0
        };
        _reactNative.Animated.timing(animationValue, config).start(function (endState) {
          currentIteration += 1;
          if (endState.finished && _this6.props.animation && (iterationCount === 'infinite' || currentIteration < iterationCount)) {
            _this6.startAnimation(duration, currentIteration, iterationDelay, callback);
          } else if (callback) {
            callback(endState);
          }
        });
      }
    }, {
      key: "transition",
      value: function transition(fromValues, toValues, duration, easing) {
        var _this7 = this;
        var fromValuesFlat = (0, _flattenStyle.default)(fromValues);
        var toValuesFlat = (0, _flattenStyle.default)(toValues);
        var transitionKeys = Object.keys(toValuesFlat);
        var _this$getTransitionSt = this.getTransitionState(transitionKeys),
          transitionValues = _this$getTransitionSt.transitionValues,
          currentTransitionValues = _this$getTransitionSt.currentTransitionValues,
          transitionStyle = _this$getTransitionSt.transitionStyle;
        transitionKeys.forEach(function (property) {
          var fromValue = fromValuesFlat[property];
          var toValue = toValuesFlat[property];
          var transitionValue = transitionValues[property];
          if (!transitionValue) {
            transitionValue = new _reactNative.Animated.Value(0);
          }
          var needsInterpolation = INTERPOLATION_STYLE_PROPERTIES.indexOf(property) !== -1 || typeof value !== 'number';
          var needsZeroClamping = ZERO_CLAMPED_STYLE_PROPERTIES.indexOf(property) !== -1;
          if (needsInterpolation) {
            transitionValue.setValue(0);
            transitionStyle[property] = transitionValue.interpolate({
              inputRange: [0, 1],
              outputRange: [fromValue, toValue]
            });
            currentTransitionValues[property] = toValue;
            toValuesFlat[property] = 1;
          } else {
            if (needsZeroClamping) {
              transitionStyle[property] = transitionValue.interpolate({
                inputRange: [0, 1],
                outputRange: [0, 1],
                extrapolateLeft: 'clamp'
              });
              currentTransitionValues[property] = toValue;
            } else {
              transitionStyle[property] = transitionValue;
            }
            transitionValue.setValue(fromValue);
          }
        });
        this.setState({
          transitionValues: transitionValues,
          transitionStyle: transitionStyle,
          currentTransitionValues: currentTransitionValues
        }, function () {
          _this7.transitionToValues(toValuesFlat, duration || _this7.props.duration, easing, _this7.props.delay);
        });
      }
    }, {
      key: "transitionTo",
      value: function transitionTo(toValues, duration, easing, delay) {
        var _this8 = this;
        var currentTransitionValues = this.state.currentTransitionValues;
        var toValuesFlat = (0, _flattenStyle.default)(toValues);
        var transitions = {
          from: {},
          to: {}
        };
        Object.keys(toValuesFlat).forEach(function (property) {
          var toValue = toValuesFlat[property];
          var needsInterpolation = INTERPOLATION_STYLE_PROPERTIES.indexOf(property) !== -1 || typeof value !== 'number';
          var needsZeroClamping = ZERO_CLAMPED_STYLE_PROPERTIES.indexOf(property) !== -1;
          var transitionStyle = _this8.state.transitionStyle[property];
          var transitionValue = _this8.state.transitionValues[property];
          if (!needsInterpolation && !needsZeroClamping && transitionStyle && transitionStyle === transitionValue) {
            transitionToValue(property, transitionValue, toValue, duration, easing, _this8.props.useNativeDriver, delay, function (prop) {
              return _this8.props.onTransitionBegin(prop);
            }, function (prop) {
              return _this8.props.onTransitionEnd(prop);
            });
          } else {
            var currentTransitionValue = currentTransitionValues[property];
            if (typeof currentTransitionValue === 'undefined' && _this8.props.style) {
              var style = (0, _getStyleValues.default)(property, _this8.props.style);
              currentTransitionValue = style[property];
            }
            transitions.from[property] = currentTransitionValue;
            transitions.to[property] = toValue;
          }
        });
        if (Object.keys(transitions.from).length) {
          this.transition(transitions.from, transitions.to, duration, easing);
        }
      }
    }, {
      key: "transitionToValues",
      value: function transitionToValues(toValues, duration, easing, delay) {
        var _this9 = this;
        Object.keys(toValues).forEach(function (property) {
          var transitionValue = _this9.state.transitionValues[property];
          var toValue = toValues[property];
          transitionToValue(property, transitionValue, toValue, duration, easing, _this9.props.useNativeDriver, delay, function (prop) {
            return _this9.props.onTransitionBegin(prop);
          }, function (prop) {
            return _this9.props.onTransitionEnd(prop);
          });
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props3 = this.props,
          style = _this$props3.style,
          animation = _this$props3.animation,
          transition = _this$props3.transition;
        if (animation && transition) {
          throw new Error('You cannot combine animation and transition props');
        }
        var restProps = omit(['animation', 'duration', 'direction', 'delay', 'easing', 'iterationCount', 'iterationDelay', 'onAnimationBegin', 'onAnimationEnd', 'onTransitionBegin', 'onTransitionEnd', 'style', 'transition', 'useNativeDriver'], this.props);
        return (0, _jsxRuntime.jsx)(Animatable, Object.assign({
          ref: this.handleRef,
          style: [style, this.state.animationStyle, (0, _wrapStyleTransforms.default)(this.state.transitionStyle)]
        }, restProps));
      }
    }]);
    return AnimatableComponent;
  }(_react.Component), _class.displayName = `withAnimatable(${wrappedComponentName})`, _class.propTypes = {
    animation: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
    duration: _propTypes.default.number,
    direction: _propTypes.default.oneOf(['normal', 'reverse', 'alternate', 'alternate-reverse']),
    delay: _propTypes.default.number,
    easing: _propTypes.default.oneOfType([_propTypes.default.oneOf(Object.keys(_easing.default)), _propTypes.default.func]),
    iterationCount: function iterationCount(props, propName) {
      var val = props[propName];
      if (val !== 'infinite' && !(typeof val === 'number' && val >= 1)) {
        return new Error('iterationCount must be a positive number or "infinite"');
      }
      return null;
    },
    iterationDelay: _propTypes.default.number,
    onAnimationBegin: _propTypes.default.func,
    onAnimationEnd: _propTypes.default.func,
    onTransitionBegin: _propTypes.default.func,
    onTransitionEnd: _propTypes.default.func,
    style: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.array, _propTypes.default.object]),
    transition: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string)]),
    useNativeDriver: _propTypes.default.bool
  }, _class.defaultProps = {
    animation: undefined,
    delay: 0,
    direction: 'normal',
    duration: undefined,
    easing: undefined,
    iterationCount: 1,
    iterationDelay: 0,
    onAnimationBegin: function onAnimationBegin() {},
    onAnimationEnd: function onAnimationEnd() {},
    onTransitionBegin: function onTransitionBegin() {},
    onTransitionEnd: function onTransitionEnd() {},
    style: undefined,
    transition: undefined,
    useNativeDriver: false
  }, _class;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdE5hdGl2ZSIsIl93cmFwU3R5bGVUcmFuc2Zvcm1zIiwiX2dldFN0eWxlVmFsdWVzIiwiX2ZsYXR0ZW5TdHlsZSIsIl9jcmVhdGVBbmltYXRpb24iLCJfcmVnaXN0cnkiLCJfZWFzaW5nIiwiX2pzeFJ1bnRpbWUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mMiIsInJlc3VsdCIsIk5ld1RhcmdldCIsImNvbnN0cnVjdG9yIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFyZ3VtZW50cyIsImFwcGx5IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJJTlRFUlBPTEFUSU9OX1NUWUxFX1BST1BFUlRJRVMiLCJaRVJPX0NMQU1QRURfU1RZTEVfUFJPUEVSVElFUyIsIm9taXQiLCJrZXlzIiwic291cmNlIiwiZmlsdGVyZWQiLCJmb3JFYWNoIiwia2V5IiwiaW5kZXhPZiIsImRlZXBFcXVhbHMiLCJiIiwiSlNPTiIsInN0cmluZ2lmeSIsImdldEFuaW1hdGlvblRhcmdldCIsIml0ZXJhdGlvbiIsImRpcmVjdGlvbiIsImdldEFuaW1hdGlvbk9yaWdpbiIsImdldENvbXBpbGVkQW5pbWF0aW9uIiwiYW5pbWF0aW9uIiwiY29tcGlsZWRBbmltYXRpb24iLCJnZXRBbmltYXRpb25CeU5hbWUiLCJFcnJvciIsImNyZWF0ZUFuaW1hdGlvbiIsIm1ha2VJbnRlcnBvbGF0ZWRTdHlsZSIsImFuaW1hdGlvblZhbHVlIiwic3R5bGUiLCJhc3NpZ24iLCJpbnRlcnBvbGF0ZSIsIndyYXBTdHlsZVRyYW5zZm9ybXMiLCJ0cmFuc2l0aW9uVG9WYWx1ZSIsInByb3BlcnR5IiwidHJhbnNpdGlvblZhbHVlIiwidG9WYWx1ZSIsImR1cmF0aW9uIiwiZWFzaW5nIiwidXNlTmF0aXZlRHJpdmVyIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiZGVsYXkiLCJvblRyYW5zaXRpb25CZWdpbiIsIm9uVHJhbnNpdGlvbkVuZCIsIkFuaW1hdGVkIiwidGltaW5nIiwiRUFTSU5HX0ZVTkNUSU9OUyIsInNwcmluZyIsInNldFRpbWVvdXQiLCJzdGFydCIsImNyZWF0ZUFuaW1hdGFibGVDb21wb25lbnQiLCJXcmFwcGVkQ29tcG9uZW50IiwiX2NsYXNzIiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJkaXNwbGF5TmFtZSIsIm5hbWUiLCJBbmltYXRhYmxlIiwiY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQiLCJfQ29tcG9uZW50IiwiX2luaGVyaXRzMiIsIkFuaW1hdGFibGVDb21wb25lbnQiLCJfc3VwZXIiLCJwcm9wcyIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrMiIsInJlZiIsImhhbmRsZVJlZiIsIlZhbHVlIiwiYW5pbWF0aW9uU3R5bGUiLCJzdGF0ZSIsInRyYW5zaXRpb25TdHlsZSIsInRyYW5zaXRpb25WYWx1ZXMiLCJjdXJyZW50VHJhbnNpdGlvblZhbHVlcyIsInRyYW5zaXRpb24iLCJpbml0aWFsaXplVHJhbnNpdGlvblN0YXRlIiwiZGVsYXlUaW1lciIsImdldEFuaW1hdGlvbk5hbWVzIiwiYW5pbWF0aW9uTmFtZSIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyIiwiYW5pbWF0ZSIsImJpbmQiLCJfY3JlYXRlQ2xhc3MyIiwidmFsdWUiLCJ0cmFuc2l0aW9uS2V5cyIsInN0eWxlVmFsdWVzIiwiZ2V0U3R5bGVWYWx1ZXMiLCJnZXRUcmFuc2l0aW9uU3RhdGUiLCJfdGhpczIiLCJfdGhpcyRzdGF0ZSIsIm1pc3NpbmdLZXlzIiwiZmlsdGVyIiwidHJhbnNpdGlvblN0YXRlIiwic2V0TmF0aXZlUHJvcHMiLCJuYXRpdmVQcm9wcyIsImNvbXBvbmVudERpZE1vdW50IiwiX3RoaXMzIiwiX3RoaXMkcHJvcHMiLCJvbkFuaW1hdGlvbkJlZ2luIiwiaXRlcmF0aW9uRGVsYXkiLCJzdGFydEFuaW1hdGlvbiIsImVuZFN0YXRlIiwib25BbmltYXRpb25FbmQiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIl90aGlzNCIsInZhbHVlcyIsInRyYW5zaXRpb25UbyIsInNldEFuaW1hdGlvbiIsInRoZW4iLCJzdG9wQW5pbWF0aW9uIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjbGVhclRpbWVvdXQiLCJjYWxsYmFjayIsInNldFN0YXRlIiwiX3RoaXM1IiwiUHJvbWlzZSIsInJlc29sdmUiLCJzY2hlZHVsZWRBbmltYXRpb24iLCJfdGhpczYiLCJfdGhpcyRzdGF0ZTIiLCJfdGhpcyRwcm9wczIiLCJpdGVyYXRpb25Db3VudCIsImN1cnJlbnRJdGVyYXRpb24iLCJmcm9tVmFsdWUiLCJzZXRWYWx1ZSIsInJldmVyc2VkIiwiRWFzaW5nIiwib3V0IiwiY29uZmlnIiwiaXNJbnRlcmFjdGlvbiIsImZpbmlzaGVkIiwiZnJvbVZhbHVlcyIsInRvVmFsdWVzIiwiX3RoaXM3IiwiZnJvbVZhbHVlc0ZsYXQiLCJmbGF0dGVuU3R5bGUiLCJ0b1ZhbHVlc0ZsYXQiLCJfdGhpcyRnZXRUcmFuc2l0aW9uU3QiLCJuZWVkc0ludGVycG9sYXRpb24iLCJuZWVkc1plcm9DbGFtcGluZyIsImlucHV0UmFuZ2UiLCJvdXRwdXRSYW5nZSIsImV4dHJhcG9sYXRlTGVmdCIsInRyYW5zaXRpb25Ub1ZhbHVlcyIsIl90aGlzOCIsInRyYW5zaXRpb25zIiwiZnJvbSIsInRvIiwicHJvcCIsImN1cnJlbnRUcmFuc2l0aW9uVmFsdWUiLCJfdGhpczkiLCJyZW5kZXIiLCJfdGhpcyRwcm9wczMiLCJyZXN0UHJvcHMiLCJqc3giLCJDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJvbmVPZlR5cGUiLCJzdHJpbmciLCJvYmplY3QiLCJudW1iZXIiLCJvbmVPZiIsImZ1bmMiLCJwcm9wTmFtZSIsInZhbCIsImFycmF5IiwiYXJyYXlPZiIsImJvb2wiLCJkZWZhdWx0UHJvcHMiXSwic291cmNlcyI6WyJjcmVhdGVBbmltYXRhYmxlQ29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgQW5pbWF0ZWQsIEVhc2luZyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgd3JhcFN0eWxlVHJhbnNmb3JtcyBmcm9tICcuL3dyYXBTdHlsZVRyYW5zZm9ybXMnO1xuaW1wb3J0IGdldFN0eWxlVmFsdWVzIGZyb20gJy4vZ2V0U3R5bGVWYWx1ZXMnO1xuaW1wb3J0IGZsYXR0ZW5TdHlsZSBmcm9tICcuL2ZsYXR0ZW5TdHlsZSc7XG5pbXBvcnQgY3JlYXRlQW5pbWF0aW9uIGZyb20gJy4vY3JlYXRlQW5pbWF0aW9uJztcbmltcG9ydCB7IGdldEFuaW1hdGlvbkJ5TmFtZSwgZ2V0QW5pbWF0aW9uTmFtZXMgfSBmcm9tICcuL3JlZ2lzdHJ5JztcbmltcG9ydCBFQVNJTkdfRlVOQ1RJT05TIGZyb20gJy4vZWFzaW5nJztcblxuLy8gVGhlc2Ugc3R5bGVzIGFyZSBub3QgbnVtYmVyIGJhc2VkIGFuZCB0aHVzIG5lZWRzIHRvIGJlIGludGVycG9sYXRlZFxuY29uc3QgSU5URVJQT0xBVElPTl9TVFlMRV9QUk9QRVJUSUVTID0gW1xuICAvLyBUcmFuc2Zvcm0gc3R5bGVzXG4gICdyb3RhdGUnLFxuICAncm90YXRlWCcsXG4gICdyb3RhdGVZJyxcbiAgJ3JvdGF0ZVonLFxuICAnc2tld1gnLFxuICAnc2tld1knLFxuICAndHJhbnNmb3JtTWF0cml4JyxcbiAgLy8gVmlldyBzdHlsZXNcbiAgJ2JhY2tncm91bmRDb2xvcicsXG4gICdib3JkZXJDb2xvcicsXG4gICdib3JkZXJUb3BDb2xvcicsXG4gICdib3JkZXJSaWdodENvbG9yJyxcbiAgJ2JvcmRlckJvdHRvbUNvbG9yJyxcbiAgJ2JvcmRlckxlZnRDb2xvcicsXG4gICdzaGFkb3dDb2xvcicsXG4gIC8vIFRleHQgc3R5bGVzXG4gICdjb2xvcicsXG4gICd0ZXh0RGVjb3JhdGlvbkNvbG9yJyxcbiAgLy8gSW1hZ2Ugc3R5bGVzXG4gICd0aW50Q29sb3InLFxuXTtcblxuY29uc3QgWkVST19DTEFNUEVEX1NUWUxFX1BST1BFUlRJRVMgPSBbJ3dpZHRoJywgJ2hlaWdodCddO1xuXG4vLyBDcmVhdGUgYSBjb3B5IG9mIGBzb3VyY2VgIHdpdGhvdXQgYGtleXNgXG5mdW5jdGlvbiBvbWl0KGtleXMsIHNvdXJjZSkge1xuICBjb25zdCBmaWx0ZXJlZCA9IHt9O1xuICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGtleSkgPT09IC0xKSB7XG4gICAgICBmaWx0ZXJlZFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGZpbHRlcmVkO1xufVxuXG4vLyBZZXMgaXQncyBhYnN1cmQsIGJ1dCBhY3R1YWxseSBmYXN0XG5mdW5jdGlvbiBkZWVwRXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGIgfHwgSlNPTi5zdHJpbmdpZnkoYSkgPT09IEpTT04uc3RyaW5naWZ5KGIpO1xufVxuXG4vLyBEZXRlcm1pbmUgdG8gd2hhdCB2YWx1ZSB0aGUgYW5pbWF0aW9uIHNob3VsZCB0d2VlbiB0b1xuZnVuY3Rpb24gZ2V0QW5pbWF0aW9uVGFyZ2V0KGl0ZXJhdGlvbiwgZGlyZWN0aW9uKSB7XG4gIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgY2FzZSAncmV2ZXJzZSc6XG4gICAgICByZXR1cm4gMDtcbiAgICBjYXNlICdhbHRlcm5hdGUnOlxuICAgICAgcmV0dXJuIGl0ZXJhdGlvbiAlIDIgPyAwIDogMTtcbiAgICBjYXNlICdhbHRlcm5hdGUtcmV2ZXJzZSc6XG4gICAgICByZXR1cm4gaXRlcmF0aW9uICUgMiA/IDEgOiAwO1xuICAgIGNhc2UgJ25vcm1hbCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAxO1xuICB9XG59XG5cbi8vIExpa2UgZ2V0QW5pbWF0aW9uVGFyZ2V0IGJ1dCBvcHBvc2l0ZVxuZnVuY3Rpb24gZ2V0QW5pbWF0aW9uT3JpZ2luKGl0ZXJhdGlvbiwgZGlyZWN0aW9uKSB7XG4gIHJldHVybiBnZXRBbmltYXRpb25UYXJnZXQoaXRlcmF0aW9uLCBkaXJlY3Rpb24pID8gMCA6IDE7XG59XG5cbmZ1bmN0aW9uIGdldENvbXBpbGVkQW5pbWF0aW9uKGFuaW1hdGlvbikge1xuICBpZiAodHlwZW9mIGFuaW1hdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBjb21waWxlZEFuaW1hdGlvbiA9IGdldEFuaW1hdGlvbkJ5TmFtZShhbmltYXRpb24pO1xuICAgIGlmICghY29tcGlsZWRBbmltYXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gYW5pbWF0aW9uIHJlZ2lzdHJlZCBieSB0aGUgbmFtZSBvZiAke2FuaW1hdGlvbn1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBpbGVkQW5pbWF0aW9uO1xuICB9XG4gIHJldHVybiBjcmVhdGVBbmltYXRpb24oYW5pbWF0aW9uKTtcbn1cblxuZnVuY3Rpb24gbWFrZUludGVycG9sYXRlZFN0eWxlKGNvbXBpbGVkQW5pbWF0aW9uLCBhbmltYXRpb25WYWx1ZSkge1xuICBjb25zdCBzdHlsZSA9IHt9O1xuICBPYmplY3Qua2V5cyhjb21waWxlZEFuaW1hdGlvbikuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmIChrZXkgPT09ICdzdHlsZScpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oc3R5bGUsIGNvbXBpbGVkQW5pbWF0aW9uLnN0eWxlKTtcbiAgICB9IGVsc2UgaWYgKGtleSAhPT0gJ2Vhc2luZycpIHtcbiAgICAgIHN0eWxlW2tleV0gPSBhbmltYXRpb25WYWx1ZS5pbnRlcnBvbGF0ZShjb21waWxlZEFuaW1hdGlvbltrZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gd3JhcFN0eWxlVHJhbnNmb3JtcyhzdHlsZSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25Ub1ZhbHVlKFxuICBwcm9wZXJ0eSxcbiAgdHJhbnNpdGlvblZhbHVlLFxuICB0b1ZhbHVlLFxuICBkdXJhdGlvbixcbiAgZWFzaW5nLFxuICB1c2VOYXRpdmVEcml2ZXIgPSBmYWxzZSxcbiAgZGVsYXksXG4gIG9uVHJhbnNpdGlvbkJlZ2luLFxuICBvblRyYW5zaXRpb25FbmQsXG4pIHtcbiAgY29uc3QgYW5pbWF0aW9uID1cbiAgICBkdXJhdGlvbiB8fCBlYXNpbmcgfHwgZGVsYXlcbiAgICAgID8gQW5pbWF0ZWQudGltaW5nKHRyYW5zaXRpb25WYWx1ZSwge1xuICAgICAgICAgIHRvVmFsdWUsXG4gICAgICAgICAgZGVsYXksXG4gICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uIHx8IDEwMDAsXG4gICAgICAgICAgZWFzaW5nOlxuICAgICAgICAgICAgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICA/IGVhc2luZ1xuICAgICAgICAgICAgICA6IEVBU0lOR19GVU5DVElPTlNbZWFzaW5nIHx8ICdlYXNlJ10sXG4gICAgICAgICAgdXNlTmF0aXZlRHJpdmVyLFxuICAgICAgICB9KVxuICAgICAgOiBBbmltYXRlZC5zcHJpbmcodHJhbnNpdGlvblZhbHVlLCB7IHRvVmFsdWUsIHVzZU5hdGl2ZURyaXZlciB9KTtcbiAgc2V0VGltZW91dCgoKSA9PiBvblRyYW5zaXRpb25CZWdpbihwcm9wZXJ0eSksIGRlbGF5KTtcbiAgYW5pbWF0aW9uLnN0YXJ0KCgpID0+IG9uVHJhbnNpdGlvbkVuZChwcm9wZXJ0eSkpO1xufVxuXG4vLyBNYWtlIChhbG1vc3QpIGFueSBjb21wb25lbnQgYW5pbWF0YWJsZSwgc2ltaWxhciB0byBBbmltYXRlZC5jcmVhdGVBbmltYXRlZENvbXBvbmVudFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQW5pbWF0YWJsZUNvbXBvbmVudChXcmFwcGVkQ29tcG9uZW50KSB7XG4gIGNvbnN0IHdyYXBwZWRDb21wb25lbnROYW1lID1cbiAgICBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcblxuICBjb25zdCBBbmltYXRhYmxlID0gQW5pbWF0ZWQuY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQoV3JhcHBlZENvbXBvbmVudCk7XG5cbiAgcmV0dXJuIGNsYXNzIEFuaW1hdGFibGVDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRpYyBkaXNwbGF5TmFtZSA9IGB3aXRoQW5pbWF0YWJsZSgke3dyYXBwZWRDb21wb25lbnROYW1lfSlgO1xuXG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgIGFuaW1hdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgICAgZHVyYXRpb246IFByb3BUeXBlcy5udW1iZXIsXG4gICAgICBkaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZihbXG4gICAgICAgICdub3JtYWwnLFxuICAgICAgICAncmV2ZXJzZScsXG4gICAgICAgICdhbHRlcm5hdGUnLFxuICAgICAgICAnYWx0ZXJuYXRlLXJldmVyc2UnLFxuICAgICAgXSksXG4gICAgICBkZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgICAgIGVhc2luZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgIFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhFQVNJTkdfRlVOQ1RJT05TKSksXG4gICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgXSksXG4gICAgICBpdGVyYXRpb25Db3VudChwcm9wcywgcHJvcE5hbWUpIHtcbiAgICAgICAgY29uc3QgdmFsID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICBpZiAodmFsICE9PSAnaW5maW5pdGUnICYmICEodHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgdmFsID49IDEpKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgICAgICdpdGVyYXRpb25Db3VudCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyIG9yIFwiaW5maW5pdGVcIicsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgICBpdGVyYXRpb25EZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgICAgIG9uQW5pbWF0aW9uQmVnaW46IFByb3BUeXBlcy5mdW5jLFxuICAgICAgb25BbmltYXRpb25FbmQ6IFByb3BUeXBlcy5mdW5jLFxuICAgICAgb25UcmFuc2l0aW9uQmVnaW46IFByb3BUeXBlcy5mdW5jLFxuICAgICAgb25UcmFuc2l0aW9uRW5kOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAgIHN0eWxlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgUHJvcFR5cGVzLm51bWJlcixcbiAgICAgICAgUHJvcFR5cGVzLmFycmF5LFxuICAgICAgICBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgXSksXG4gICAgICB0cmFuc2l0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gICAgICBdKSxcbiAgICAgIHVzZU5hdGl2ZURyaXZlcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgfTtcblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICBhbmltYXRpb246IHVuZGVmaW5lZCxcbiAgICAgIGRlbGF5OiAwLFxuICAgICAgZGlyZWN0aW9uOiAnbm9ybWFsJyxcbiAgICAgIGR1cmF0aW9uOiB1bmRlZmluZWQsXG4gICAgICBlYXNpbmc6IHVuZGVmaW5lZCxcbiAgICAgIGl0ZXJhdGlvbkNvdW50OiAxLFxuICAgICAgaXRlcmF0aW9uRGVsYXk6IDAsXG4gICAgICBvbkFuaW1hdGlvbkJlZ2luKCkge30sXG4gICAgICBvbkFuaW1hdGlvbkVuZCgpIHt9LFxuICAgICAgb25UcmFuc2l0aW9uQmVnaW4oKSB7fSxcbiAgICAgIG9uVHJhbnNpdGlvbkVuZCgpIHt9LFxuICAgICAgc3R5bGU6IHVuZGVmaW5lZCxcbiAgICAgIHRyYW5zaXRpb246IHVuZGVmaW5lZCxcbiAgICAgIHVzZU5hdGl2ZURyaXZlcjogZmFsc2UsXG4gICAgfTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgIGNvbnN0IGFuaW1hdGlvblZhbHVlID0gbmV3IEFuaW1hdGVkLlZhbHVlKFxuICAgICAgICBnZXRBbmltYXRpb25PcmlnaW4oMCwgdGhpcy5wcm9wcy5kaXJlY3Rpb24pLFxuICAgICAgKTtcbiAgICAgIGxldCBhbmltYXRpb25TdHlsZSA9IHt9O1xuICAgICAgbGV0IGNvbXBpbGVkQW5pbWF0aW9uID0ge307XG4gICAgICBpZiAocHJvcHMuYW5pbWF0aW9uKSB7XG4gICAgICAgIGNvbXBpbGVkQW5pbWF0aW9uID0gZ2V0Q29tcGlsZWRBbmltYXRpb24ocHJvcHMuYW5pbWF0aW9uKTtcbiAgICAgICAgYW5pbWF0aW9uU3R5bGUgPSBtYWtlSW50ZXJwb2xhdGVkU3R5bGUoXG4gICAgICAgICAgY29tcGlsZWRBbmltYXRpb24sXG4gICAgICAgICAgYW5pbWF0aW9uVmFsdWUsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICBhbmltYXRpb25WYWx1ZSxcbiAgICAgICAgYW5pbWF0aW9uU3R5bGUsXG4gICAgICAgIGNvbXBpbGVkQW5pbWF0aW9uLFxuICAgICAgICB0cmFuc2l0aW9uU3R5bGU6IHt9LFxuICAgICAgICB0cmFuc2l0aW9uVmFsdWVzOiB7fSxcbiAgICAgICAgY3VycmVudFRyYW5zaXRpb25WYWx1ZXM6IHt9LFxuICAgICAgfTtcblxuICAgICAgaWYgKHByb3BzLnRyYW5zaXRpb24pIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAuLi50aGlzLnN0YXRlLFxuICAgICAgICAgIC4uLnRoaXMuaW5pdGlhbGl6ZVRyYW5zaXRpb25TdGF0ZShwcm9wcy50cmFuc2l0aW9uKSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGVsYXlUaW1lciA9IG51bGw7XG5cbiAgICAgIC8vIEFsaWFzIHJlZ2lzdGVyZWQgYW5pbWF0aW9ucyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICAgIGdldEFuaW1hdGlvbk5hbWVzKCkuZm9yRWFjaChhbmltYXRpb25OYW1lID0+IHtcbiAgICAgICAgaWYgKCEoYW5pbWF0aW9uTmFtZSBpbiB0aGlzKSkge1xuICAgICAgICAgIHRoaXNbYW5pbWF0aW9uTmFtZV0gPSB0aGlzLmFuaW1hdGUuYmluZCh0aGlzLCBhbmltYXRpb25OYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaW5pdGlhbGl6ZVRyYW5zaXRpb25TdGF0ZSh0cmFuc2l0aW9uS2V5cykge1xuICAgICAgY29uc3QgdHJhbnNpdGlvblZhbHVlcyA9IHt9O1xuICAgICAgY29uc3Qgc3R5bGVWYWx1ZXMgPSB7fTtcblxuICAgICAgY29uc3QgY3VycmVudFRyYW5zaXRpb25WYWx1ZXMgPSBnZXRTdHlsZVZhbHVlcyhcbiAgICAgICAgdHJhbnNpdGlvbktleXMsXG4gICAgICAgIHRoaXMucHJvcHMuc3R5bGUsXG4gICAgICApO1xuICAgICAgT2JqZWN0LmtleXMoY3VycmVudFRyYW5zaXRpb25WYWx1ZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBjdXJyZW50VHJhbnNpdGlvblZhbHVlc1trZXldO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgSU5URVJQT0xBVElPTl9TVFlMRV9QUk9QRVJUSUVTLmluZGV4T2Yoa2V5KSAhPT0gLTEgfHxcbiAgICAgICAgICB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInXG4gICAgICAgICkge1xuICAgICAgICAgIHRyYW5zaXRpb25WYWx1ZXNba2V5XSA9IG5ldyBBbmltYXRlZC5WYWx1ZSgwKTtcbiAgICAgICAgICBzdHlsZVZhbHVlc1trZXldID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgYW5pbWF0aW9uVmFsdWUgPSBuZXcgQW5pbWF0ZWQuVmFsdWUodmFsdWUpO1xuICAgICAgICAgIHRyYW5zaXRpb25WYWx1ZXNba2V5XSA9IGFuaW1hdGlvblZhbHVlO1xuICAgICAgICAgIHN0eWxlVmFsdWVzW2tleV0gPSBhbmltYXRpb25WYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGN1cnJlbnRUcmFuc2l0aW9uVmFsdWVzLFxuICAgICAgICB0cmFuc2l0aW9uU3R5bGU6IHN0eWxlVmFsdWVzLFxuICAgICAgICB0cmFuc2l0aW9uVmFsdWVzLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBnZXRUcmFuc2l0aW9uU3RhdGUoa2V5cykge1xuICAgICAgY29uc3QgdHJhbnNpdGlvbktleXMgPSB0eXBlb2Yga2V5cyA9PT0gJ3N0cmluZycgPyBba2V5c10gOiBrZXlzO1xuICAgICAgbGV0IHtcbiAgICAgICAgdHJhbnNpdGlvblZhbHVlcyxcbiAgICAgICAgY3VycmVudFRyYW5zaXRpb25WYWx1ZXMsXG4gICAgICAgIHRyYW5zaXRpb25TdHlsZSxcbiAgICAgIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgY29uc3QgbWlzc2luZ0tleXMgPSB0cmFuc2l0aW9uS2V5cy5maWx0ZXIoXG4gICAgICAgIGtleSA9PiAhdGhpcy5zdGF0ZS50cmFuc2l0aW9uVmFsdWVzW2tleV0sXG4gICAgICApO1xuICAgICAgaWYgKG1pc3NpbmdLZXlzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCB0cmFuc2l0aW9uU3RhdGUgPSB0aGlzLmluaXRpYWxpemVUcmFuc2l0aW9uU3RhdGUobWlzc2luZ0tleXMpO1xuICAgICAgICB0cmFuc2l0aW9uVmFsdWVzID0ge1xuICAgICAgICAgIC4uLnRyYW5zaXRpb25WYWx1ZXMsXG4gICAgICAgICAgLi4udHJhbnNpdGlvblN0YXRlLnRyYW5zaXRpb25WYWx1ZXMsXG4gICAgICAgIH07XG4gICAgICAgIGN1cnJlbnRUcmFuc2l0aW9uVmFsdWVzID0ge1xuICAgICAgICAgIC4uLmN1cnJlbnRUcmFuc2l0aW9uVmFsdWVzLFxuICAgICAgICAgIC4uLnRyYW5zaXRpb25TdGF0ZS5jdXJyZW50VHJhbnNpdGlvblZhbHVlcyxcbiAgICAgICAgfTtcbiAgICAgICAgdHJhbnNpdGlvblN0eWxlID0ge1xuICAgICAgICAgIC4uLnRyYW5zaXRpb25TdHlsZSxcbiAgICAgICAgICAuLi50cmFuc2l0aW9uU3RhdGUudHJhbnNpdGlvblN0eWxlLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgdHJhbnNpdGlvblZhbHVlcywgY3VycmVudFRyYW5zaXRpb25WYWx1ZXMsIHRyYW5zaXRpb25TdHlsZSB9O1xuICAgIH1cblxuICAgIHJlZiA9IG51bGw7XG5cbiAgICBoYW5kbGVSZWYgPSByZWYgPT4ge1xuICAgICAgdGhpcy5yZWYgPSByZWY7XG4gICAgfTtcblxuICAgIHNldE5hdGl2ZVByb3BzKG5hdGl2ZVByb3BzKSB7XG4gICAgICBpZiAodGhpcy5yZWYpIHtcbiAgICAgICAgdGhpcy5yZWYuc2V0TmF0aXZlUHJvcHMobmF0aXZlUHJvcHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBhbmltYXRpb24sXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBkZWxheSxcbiAgICAgICAgb25BbmltYXRpb25CZWdpbixcbiAgICAgICAgaXRlcmF0aW9uRGVsYXksXG4gICAgICB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgY29uc3Qgc3RhcnRBbmltYXRpb24gPSAoKSA9PiB7XG4gICAgICAgICAgb25BbmltYXRpb25CZWdpbigpO1xuICAgICAgICAgIHRoaXMuc3RhcnRBbmltYXRpb24oZHVyYXRpb24sIDAsIGl0ZXJhdGlvbkRlbGF5LCBlbmRTdGF0ZSA9PlxuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkFuaW1hdGlvbkVuZChlbmRTdGF0ZSksXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLmRlbGF5VGltZXIgPSBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoZGVsYXkpIHtcbiAgICAgICAgICB0aGlzLmRlbGF5VGltZXIgPSBzZXRUaW1lb3V0KHN0YXJ0QW5pbWF0aW9uLCBkZWxheSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhcnRBbmltYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcbiAgICBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhwcm9wcykge1xuICAgICAgY29uc3Qge1xuICAgICAgICBhbmltYXRpb24sXG4gICAgICAgIGRlbGF5LFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgZWFzaW5nLFxuICAgICAgICBpdGVyYXRpb25EZWxheSxcbiAgICAgICAgdHJhbnNpdGlvbixcbiAgICAgICAgb25BbmltYXRpb25CZWdpbixcbiAgICAgIH0gPSBwcm9wcztcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gZ2V0U3R5bGVWYWx1ZXModHJhbnNpdGlvbiwgcHJvcHMuc3R5bGUpO1xuICAgICAgICB0aGlzLnRyYW5zaXRpb25Ubyh2YWx1ZXMsIGR1cmF0aW9uLCBlYXNpbmcsIGRlbGF5KTtcbiAgICAgIH0gZWxzZSBpZiAoIWRlZXBFcXVhbHMoYW5pbWF0aW9uLCB0aGlzLnByb3BzLmFuaW1hdGlvbikpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICAgIGlmICh0aGlzLmRlbGF5VGltZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKGFuaW1hdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9uQW5pbWF0aW9uQmVnaW4oKTtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0ZShhbmltYXRpb24sIGR1cmF0aW9uLCBpdGVyYXRpb25EZWxheSkudGhlbihlbmRTdGF0ZSA9PlxuICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQW5pbWF0aW9uRW5kKGVuZFN0YXRlKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc3RvcEFuaW1hdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5kZWxheVRpbWVyKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmRlbGF5VGltZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNldEFuaW1hdGlvbihhbmltYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgICBjb25zdCBjb21waWxlZEFuaW1hdGlvbiA9IGdldENvbXBpbGVkQW5pbWF0aW9uKGFuaW1hdGlvbik7XG4gICAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgICBzdGF0ZSA9PiAoe1xuICAgICAgICAgIGFuaW1hdGlvblN0eWxlOiBtYWtlSW50ZXJwb2xhdGVkU3R5bGUoXG4gICAgICAgICAgICBjb21waWxlZEFuaW1hdGlvbixcbiAgICAgICAgICAgIHN0YXRlLmFuaW1hdGlvblZhbHVlLFxuICAgICAgICAgICksXG4gICAgICAgICAgY29tcGlsZWRBbmltYXRpb24sXG4gICAgICAgIH0pLFxuICAgICAgICBjYWxsYmFjayxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgYW5pbWF0ZShhbmltYXRpb24sIGR1cmF0aW9uLCBpdGVyYXRpb25EZWxheSkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0aGlzLnNldEFuaW1hdGlvbihhbmltYXRpb24sICgpID0+IHtcbiAgICAgICAgICB0aGlzLnN0YXJ0QW5pbWF0aW9uKGR1cmF0aW9uLCAwLCBpdGVyYXRpb25EZWxheSwgcmVzb2x2ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RvcEFuaW1hdGlvbigpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzY2hlZHVsZWRBbmltYXRpb246IGZhbHNlLFxuICAgICAgICBhbmltYXRpb25TdHlsZToge30sXG4gICAgICB9KTtcbiAgICAgIHRoaXMuc3RhdGUuYW5pbWF0aW9uVmFsdWUuc3RvcEFuaW1hdGlvbigpO1xuICAgICAgaWYgKHRoaXMuZGVsYXlUaW1lcikge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5kZWxheVRpbWVyKTtcbiAgICAgICAgdGhpcy5kZWxheVRpbWVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdGFydEFuaW1hdGlvbihkdXJhdGlvbiwgaXRlcmF0aW9uLCBpdGVyYXRpb25EZWxheSwgY2FsbGJhY2spIHtcbiAgICAgIGNvbnN0IHsgYW5pbWF0aW9uVmFsdWUsIGNvbXBpbGVkQW5pbWF0aW9uIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgY29uc3QgeyBkaXJlY3Rpb24sIGl0ZXJhdGlvbkNvdW50LCB1c2VOYXRpdmVEcml2ZXIgfSA9IHRoaXMucHJvcHM7XG4gICAgICBsZXQgZWFzaW5nID0gdGhpcy5wcm9wcy5lYXNpbmcgfHwgY29tcGlsZWRBbmltYXRpb24uZWFzaW5nIHx8ICdlYXNlJztcbiAgICAgIGxldCBjdXJyZW50SXRlcmF0aW9uID0gaXRlcmF0aW9uIHx8IDA7XG4gICAgICBjb25zdCBmcm9tVmFsdWUgPSBnZXRBbmltYXRpb25PcmlnaW4oY3VycmVudEl0ZXJhdGlvbiwgZGlyZWN0aW9uKTtcbiAgICAgIGNvbnN0IHRvVmFsdWUgPSBnZXRBbmltYXRpb25UYXJnZXQoY3VycmVudEl0ZXJhdGlvbiwgZGlyZWN0aW9uKTtcbiAgICAgIGFuaW1hdGlvblZhbHVlLnNldFZhbHVlKGZyb21WYWx1ZSk7XG5cbiAgICAgIGlmICh0eXBlb2YgZWFzaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgICBlYXNpbmcgPSBFQVNJTkdfRlVOQ1RJT05TW2Vhc2luZ107XG4gICAgICB9XG4gICAgICAvLyBSZXZlcnNlIGVhc2luZyBpZiBvbiB0aGUgd2F5IGJhY2tcbiAgICAgIGNvbnN0IHJldmVyc2VkID1cbiAgICAgICAgZGlyZWN0aW9uID09PSAncmV2ZXJzZScgfHxcbiAgICAgICAgKGRpcmVjdGlvbiA9PT0gJ2FsdGVybmF0ZScgJiYgIXRvVmFsdWUpIHx8XG4gICAgICAgIChkaXJlY3Rpb24gPT09ICdhbHRlcm5hdGUtcmV2ZXJzZScgJiYgIXRvVmFsdWUpO1xuICAgICAgaWYgKHJldmVyc2VkKSB7XG4gICAgICAgIGVhc2luZyA9IEVhc2luZy5vdXQoZWFzaW5nKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgdG9WYWx1ZSxcbiAgICAgICAgZWFzaW5nLFxuICAgICAgICBpc0ludGVyYWN0aW9uOiBpdGVyYXRpb25Db3VudCA8PSAxLFxuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gfHwgdGhpcy5wcm9wcy5kdXJhdGlvbiB8fCAxMDAwLFxuICAgICAgICB1c2VOYXRpdmVEcml2ZXIsXG4gICAgICAgIGRlbGF5OiBpdGVyYXRpb25EZWxheSB8fCAwLFxuICAgICAgfTtcblxuICAgICAgQW5pbWF0ZWQudGltaW5nKGFuaW1hdGlvblZhbHVlLCBjb25maWcpLnN0YXJ0KGVuZFN0YXRlID0+IHtcbiAgICAgICAgY3VycmVudEl0ZXJhdGlvbiArPSAxO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgZW5kU3RhdGUuZmluaXNoZWQgJiZcbiAgICAgICAgICB0aGlzLnByb3BzLmFuaW1hdGlvbiAmJlxuICAgICAgICAgIChpdGVyYXRpb25Db3VudCA9PT0gJ2luZmluaXRlJyB8fCBjdXJyZW50SXRlcmF0aW9uIDwgaXRlcmF0aW9uQ291bnQpXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuc3RhcnRBbmltYXRpb24oXG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgIGN1cnJlbnRJdGVyYXRpb24sXG4gICAgICAgICAgICBpdGVyYXRpb25EZWxheSxcbiAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjayhlbmRTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRyYW5zaXRpb24oZnJvbVZhbHVlcywgdG9WYWx1ZXMsIGR1cmF0aW9uLCBlYXNpbmcpIHtcbiAgICAgIGNvbnN0IGZyb21WYWx1ZXNGbGF0ID0gZmxhdHRlblN0eWxlKGZyb21WYWx1ZXMpO1xuICAgICAgY29uc3QgdG9WYWx1ZXNGbGF0ID0gZmxhdHRlblN0eWxlKHRvVmFsdWVzKTtcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25LZXlzID0gT2JqZWN0LmtleXModG9WYWx1ZXNGbGF0KTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgdHJhbnNpdGlvblZhbHVlcyxcbiAgICAgICAgY3VycmVudFRyYW5zaXRpb25WYWx1ZXMsXG4gICAgICAgIHRyYW5zaXRpb25TdHlsZSxcbiAgICAgIH0gPSB0aGlzLmdldFRyYW5zaXRpb25TdGF0ZSh0cmFuc2l0aW9uS2V5cyk7XG5cbiAgICAgIHRyYW5zaXRpb25LZXlzLmZvckVhY2gocHJvcGVydHkgPT4ge1xuICAgICAgICBjb25zdCBmcm9tVmFsdWUgPSBmcm9tVmFsdWVzRmxhdFtwcm9wZXJ0eV07XG4gICAgICAgIGNvbnN0IHRvVmFsdWUgPSB0b1ZhbHVlc0ZsYXRbcHJvcGVydHldO1xuICAgICAgICBsZXQgdHJhbnNpdGlvblZhbHVlID0gdHJhbnNpdGlvblZhbHVlc1twcm9wZXJ0eV07XG4gICAgICAgIGlmICghdHJhbnNpdGlvblZhbHVlKSB7XG4gICAgICAgICAgdHJhbnNpdGlvblZhbHVlID0gbmV3IEFuaW1hdGVkLlZhbHVlKDApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5lZWRzSW50ZXJwb2xhdGlvbiA9XG4gICAgICAgICAgSU5URVJQT0xBVElPTl9TVFlMRV9QUk9QRVJUSUVTLmluZGV4T2YocHJvcGVydHkpICE9PSAtMSB8fFxuICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcic7XG4gICAgICAgIGNvbnN0IG5lZWRzWmVyb0NsYW1waW5nID1cbiAgICAgICAgICBaRVJPX0NMQU1QRURfU1RZTEVfUFJPUEVSVElFUy5pbmRleE9mKHByb3BlcnR5KSAhPT0gLTE7XG4gICAgICAgIGlmIChuZWVkc0ludGVycG9sYXRpb24pIHtcbiAgICAgICAgICB0cmFuc2l0aW9uVmFsdWUuc2V0VmFsdWUoMCk7XG4gICAgICAgICAgdHJhbnNpdGlvblN0eWxlW3Byb3BlcnR5XSA9IHRyYW5zaXRpb25WYWx1ZS5pbnRlcnBvbGF0ZSh7XG4gICAgICAgICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICAgICAgICBvdXRwdXRSYW5nZTogW2Zyb21WYWx1ZSwgdG9WYWx1ZV0sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY3VycmVudFRyYW5zaXRpb25WYWx1ZXNbcHJvcGVydHldID0gdG9WYWx1ZTtcbiAgICAgICAgICB0b1ZhbHVlc0ZsYXRbcHJvcGVydHldID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobmVlZHNaZXJvQ2xhbXBpbmcpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25TdHlsZVtwcm9wZXJ0eV0gPSB0cmFuc2l0aW9uVmFsdWUuaW50ZXJwb2xhdGUoe1xuICAgICAgICAgICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICAgICAgICAgIG91dHB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICAgICAgICAgIGV4dHJhcG9sYXRlTGVmdDogJ2NsYW1wJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY3VycmVudFRyYW5zaXRpb25WYWx1ZXNbcHJvcGVydHldID0gdG9WYWx1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJhbnNpdGlvblN0eWxlW3Byb3BlcnR5XSA9IHRyYW5zaXRpb25WYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJhbnNpdGlvblZhbHVlLnNldFZhbHVlKGZyb21WYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgICAgeyB0cmFuc2l0aW9uVmFsdWVzLCB0cmFuc2l0aW9uU3R5bGUsIGN1cnJlbnRUcmFuc2l0aW9uVmFsdWVzIH0sXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICB0aGlzLnRyYW5zaXRpb25Ub1ZhbHVlcyhcbiAgICAgICAgICAgIHRvVmFsdWVzRmxhdCxcbiAgICAgICAgICAgIGR1cmF0aW9uIHx8IHRoaXMucHJvcHMuZHVyYXRpb24sXG4gICAgICAgICAgICBlYXNpbmcsXG4gICAgICAgICAgICB0aGlzLnByb3BzLmRlbGF5LFxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cblxuICAgIHRyYW5zaXRpb25Ubyh0b1ZhbHVlcywgZHVyYXRpb24sIGVhc2luZywgZGVsYXkpIHtcbiAgICAgIGNvbnN0IHsgY3VycmVudFRyYW5zaXRpb25WYWx1ZXMgfSA9IHRoaXMuc3RhdGU7XG4gICAgICBjb25zdCB0b1ZhbHVlc0ZsYXQgPSBmbGF0dGVuU3R5bGUodG9WYWx1ZXMpO1xuICAgICAgY29uc3QgdHJhbnNpdGlvbnMgPSB7XG4gICAgICAgIGZyb206IHt9LFxuICAgICAgICB0bzoge30sXG4gICAgICB9O1xuXG4gICAgICBPYmplY3Qua2V5cyh0b1ZhbHVlc0ZsYXQpLmZvckVhY2gocHJvcGVydHkgPT4ge1xuICAgICAgICBjb25zdCB0b1ZhbHVlID0gdG9WYWx1ZXNGbGF0W3Byb3BlcnR5XTtcbiAgICAgICAgY29uc3QgbmVlZHNJbnRlcnBvbGF0aW9uID1cbiAgICAgICAgICBJTlRFUlBPTEFUSU9OX1NUWUxFX1BST1BFUlRJRVMuaW5kZXhPZihwcm9wZXJ0eSkgIT09IC0xIHx8XG4gICAgICAgICAgdHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJztcbiAgICAgICAgY29uc3QgbmVlZHNaZXJvQ2xhbXBpbmcgPVxuICAgICAgICAgIFpFUk9fQ0xBTVBFRF9TVFlMRV9QUk9QRVJUSUVTLmluZGV4T2YocHJvcGVydHkpICE9PSAtMTtcbiAgICAgICAgY29uc3QgdHJhbnNpdGlvblN0eWxlID0gdGhpcy5zdGF0ZS50cmFuc2l0aW9uU3R5bGVbcHJvcGVydHldO1xuICAgICAgICBjb25zdCB0cmFuc2l0aW9uVmFsdWUgPSB0aGlzLnN0YXRlLnRyYW5zaXRpb25WYWx1ZXNbcHJvcGVydHldO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgIW5lZWRzSW50ZXJwb2xhdGlvbiAmJlxuICAgICAgICAgICFuZWVkc1plcm9DbGFtcGluZyAmJlxuICAgICAgICAgIHRyYW5zaXRpb25TdHlsZSAmJlxuICAgICAgICAgIHRyYW5zaXRpb25TdHlsZSA9PT0gdHJhbnNpdGlvblZhbHVlXG4gICAgICAgICkge1xuICAgICAgICAgIHRyYW5zaXRpb25Ub1ZhbHVlKFxuICAgICAgICAgICAgcHJvcGVydHksXG4gICAgICAgICAgICB0cmFuc2l0aW9uVmFsdWUsXG4gICAgICAgICAgICB0b1ZhbHVlLFxuICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgICBlYXNpbmcsXG4gICAgICAgICAgICB0aGlzLnByb3BzLnVzZU5hdGl2ZURyaXZlcixcbiAgICAgICAgICAgIGRlbGF5LFxuICAgICAgICAgICAgcHJvcCA9PiB0aGlzLnByb3BzLm9uVHJhbnNpdGlvbkJlZ2luKHByb3ApLFxuICAgICAgICAgICAgcHJvcCA9PiB0aGlzLnByb3BzLm9uVHJhbnNpdGlvbkVuZChwcm9wKSxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBjdXJyZW50VHJhbnNpdGlvblZhbHVlID0gY3VycmVudFRyYW5zaXRpb25WYWx1ZXNbcHJvcGVydHldO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHR5cGVvZiBjdXJyZW50VHJhbnNpdGlvblZhbHVlID09PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgdGhpcy5wcm9wcy5zdHlsZVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBnZXRTdHlsZVZhbHVlcyhwcm9wZXJ0eSwgdGhpcy5wcm9wcy5zdHlsZSk7XG4gICAgICAgICAgICBjdXJyZW50VHJhbnNpdGlvblZhbHVlID0gc3R5bGVbcHJvcGVydHldO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0cmFuc2l0aW9ucy5mcm9tW3Byb3BlcnR5XSA9IGN1cnJlbnRUcmFuc2l0aW9uVmFsdWU7XG4gICAgICAgICAgdHJhbnNpdGlvbnMudG9bcHJvcGVydHldID0gdG9WYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyh0cmFuc2l0aW9ucy5mcm9tKS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy50cmFuc2l0aW9uKHRyYW5zaXRpb25zLmZyb20sIHRyYW5zaXRpb25zLnRvLCBkdXJhdGlvbiwgZWFzaW5nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cmFuc2l0aW9uVG9WYWx1ZXModG9WYWx1ZXMsIGR1cmF0aW9uLCBlYXNpbmcsIGRlbGF5KSB7XG4gICAgICBPYmplY3Qua2V5cyh0b1ZhbHVlcykuZm9yRWFjaChwcm9wZXJ0eSA9PiB7XG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb25WYWx1ZSA9IHRoaXMuc3RhdGUudHJhbnNpdGlvblZhbHVlc1twcm9wZXJ0eV07XG4gICAgICAgIGNvbnN0IHRvVmFsdWUgPSB0b1ZhbHVlc1twcm9wZXJ0eV07XG4gICAgICAgIHRyYW5zaXRpb25Ub1ZhbHVlKFxuICAgICAgICAgIHByb3BlcnR5LFxuICAgICAgICAgIHRyYW5zaXRpb25WYWx1ZSxcbiAgICAgICAgICB0b1ZhbHVlLFxuICAgICAgICAgIGR1cmF0aW9uLFxuICAgICAgICAgIGVhc2luZyxcbiAgICAgICAgICB0aGlzLnByb3BzLnVzZU5hdGl2ZURyaXZlcixcbiAgICAgICAgICBkZWxheSxcbiAgICAgICAgICBwcm9wID0+IHRoaXMucHJvcHMub25UcmFuc2l0aW9uQmVnaW4ocHJvcCksXG4gICAgICAgICAgcHJvcCA9PiB0aGlzLnByb3BzLm9uVHJhbnNpdGlvbkVuZChwcm9wKSxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgIGNvbnN0IHsgc3R5bGUsIGFuaW1hdGlvbiwgdHJhbnNpdGlvbiB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGlmIChhbmltYXRpb24gJiYgdHJhbnNpdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBjYW5ub3QgY29tYmluZSBhbmltYXRpb24gYW5kIHRyYW5zaXRpb24gcHJvcHMnKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc3RQcm9wcyA9IG9taXQoXG4gICAgICAgIFtcbiAgICAgICAgICAnYW5pbWF0aW9uJyxcbiAgICAgICAgICAnZHVyYXRpb24nLFxuICAgICAgICAgICdkaXJlY3Rpb24nLFxuICAgICAgICAgICdkZWxheScsXG4gICAgICAgICAgJ2Vhc2luZycsXG4gICAgICAgICAgJ2l0ZXJhdGlvbkNvdW50JyxcbiAgICAgICAgICAnaXRlcmF0aW9uRGVsYXknLFxuICAgICAgICAgICdvbkFuaW1hdGlvbkJlZ2luJyxcbiAgICAgICAgICAnb25BbmltYXRpb25FbmQnLFxuICAgICAgICAgICdvblRyYW5zaXRpb25CZWdpbicsXG4gICAgICAgICAgJ29uVHJhbnNpdGlvbkVuZCcsXG4gICAgICAgICAgJ3N0eWxlJyxcbiAgICAgICAgICAndHJhbnNpdGlvbicsXG4gICAgICAgICAgJ3VzZU5hdGl2ZURyaXZlcicsXG4gICAgICAgIF0sXG4gICAgICAgIHRoaXMucHJvcHMsXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8QW5pbWF0YWJsZVxuICAgICAgICAgIHJlZj17dGhpcy5oYW5kbGVSZWZ9XG4gICAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5hbmltYXRpb25TdHlsZSxcbiAgICAgICAgICAgIHdyYXBTdHlsZVRyYW5zZm9ybXModGhpcy5zdGF0ZS50cmFuc2l0aW9uU3R5bGUpLFxuICAgICAgICAgIF19XG4gICAgICAgICAgey4uLnJlc3RQcm9wc31cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLG9CQUFBLEdBQUFGLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBSyxlQUFBLEdBQUFILHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBTSxhQUFBLEdBQUFKLHNCQUFB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