6a6c0056b21bae71125409e38e86a261
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.createShimmerPlaceholder = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var getOutputRange = function getOutputRange(width, isReversed) {
  return isReversed ? [width, -width] : [-width, width];
};
var ShimmerPlaceholder = function (_PureComponent) {
  (0, _inherits2.default)(ShimmerPlaceholder, _PureComponent);
  var _super = _createSuper(ShimmerPlaceholder);
  function ShimmerPlaceholder() {
    var _this;
    (0, _classCallCheck2.default)(this, ShimmerPlaceholder);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      beginShimmerPosition: new _reactNative.Animated.Value(-1)
    };
    _this.getAnimated = function () {
      var _this$props = _this.props,
        delay = _this$props.delay,
        duration = _this$props.duration,
        isInteraction = _this$props.isInteraction;
      return _reactNative.Animated.loop(_reactNative.Animated.timing(_this.state.beginShimmerPosition, {
        toValue: 1,
        delay: delay,
        duration: duration,
        useNativeDriver: _reactNative.Platform.OS !== "web",
        isInteraction: isInteraction
      }));
    };
    _this.animatedValue = _this.getAnimated();
    return _this;
  }
  (0, _createClass2.default)(ShimmerPlaceholder, [{
    key: "render",
    value: function render() {
      return (0, _jsxRuntime.jsx)(BasedShimmerPlaceholder, Object.assign({}, this.props, {
        animatedValue: this.animatedValue,
        beginShimmerPosition: this.state.beginShimmerPosition
      }));
    }
  }]);
  return ShimmerPlaceholder;
}(_react.PureComponent);
ShimmerPlaceholder.defaultProps = {
  delay: 0,
  duration: 1000,
  isInteraction: true
};
var BasedShimmerPlaceholder = function BasedShimmerPlaceholder(props) {
  var _props$width = props.width,
    width = _props$width === void 0 ? 200 : _props$width,
    _props$height = props.height,
    height = _props$height === void 0 ? 15 : _props$height,
    _props$shimmerColors = props.shimmerColors,
    shimmerColors = _props$shimmerColors === void 0 ? ["#ebebeb", "#c5c5c5", "#ebebeb"] : _props$shimmerColors,
    _props$isReversed = props.isReversed,
    isReversed = _props$isReversed === void 0 ? false : _props$isReversed,
    _props$stopAutoRun = props.stopAutoRun,
    stopAutoRun = _props$stopAutoRun === void 0 ? false : _props$stopAutoRun,
    visible = props.visible,
    _props$location = props.location,
    location = _props$location === void 0 ? [0.3, 0.5, 0.7] : _props$location,
    style = props.style,
    contentStyle = props.contentStyle,
    shimmerStyle = props.shimmerStyle,
    _props$LinearGradient = props.LinearGradient,
    LinearGradient = _props$LinearGradient === void 0 ? _reactNative.View : _props$LinearGradient,
    children = props.children,
    animatedValue = props.animatedValue,
    beginShimmerPosition = props.beginShimmerPosition,
    _props$shimmerWidthPe = props.shimmerWidthPercent,
    shimmerWidthPercent = _props$shimmerWidthPe === void 0 ? 1 : _props$shimmerWidthPe,
    containerProps = props.containerProps,
    shimmerContainerProps = props.shimmerContainerProps,
    childrenContainerProps = props.childrenContainerProps;
  var linearTranslate = beginShimmerPosition.interpolate({
    inputRange: [-1, 1],
    outputRange: getOutputRange(width, isReversed)
  });
  _react.default.useEffect(function () {
    if (!stopAutoRun) {
      animatedValue.start();
    }
    return function () {
      animatedValue.stop();
    };
  }, [stopAutoRun]);
  _react.default.useEffect(function () {
    if (visible) {
      animatedValue.stop();
    }
    if (!visible && !stopAutoRun) {
      animatedValue.start();
    }
  }, [visible, stopAutoRun]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, Object.assign({
    style: [!visible && {
      height: height,
      width: width
    }, styles.container, !visible && shimmerStyle, style]
  }, containerProps, {
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, Object.assign({
      style: [!visible && {
        width: 0,
        height: 0,
        opacity: 0
      }, visible && contentStyle]
    }, childrenContainerProps, {
      children: children
    })), !visible && (0, _jsxRuntime.jsx)(_reactNative.View, Object.assign({
      style: {
        flex: 1,
        backgroundColor: shimmerColors[0]
      }
    }, shimmerContainerProps, {
      children: (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: {
          flex: 1,
          transform: [{
            translateX: linearTranslate
          }]
        },
        children: (0, _jsxRuntime.jsx)(LinearGradient, {
          colors: shimmerColors,
          style: {
            flex: 1,
            width: width * shimmerWidthPercent
          },
          start: {
            x: -1,
            y: 0.5
          },
          end: {
            x: 2,
            y: 0.5
          },
          locations: location
        })
      })
    }))]
  }));
};
var styles = _reactNative.StyleSheet.create({
  container: {
    overflow: "hidden"
  }
});
var createShimmerPlaceholder = exports.createShimmerPlaceholder = function createShimmerPlaceholder() {
  var LinearGradient = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _reactNative.View;
  return _react.default.forwardRef(function (props, ref) {
    return (0, _jsxRuntime.jsx)(ShimmerPlaceholder, Object.assign({
      LinearGradient: LinearGradient,
      ref: ref
    }, props));
  });
};
var _default = exports.default = ShimmerPlaceholder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,