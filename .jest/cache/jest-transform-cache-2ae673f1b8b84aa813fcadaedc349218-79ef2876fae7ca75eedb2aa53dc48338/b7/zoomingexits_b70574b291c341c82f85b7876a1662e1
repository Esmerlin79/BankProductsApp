bbe8f1e28130744d16a1b3ba6dfbf34e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zoomOutUp = exports.zoomOutRight = exports.zoomOutLeft = exports.zoomOutDown = exports.zoomOut = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _reactNative = require("react-native");
function makeZoomOutTranslation(translationType, pivotPoint) {
  var modifier = Math.min(1, Math.max(-1, pivotPoint));
  return {
    easing: _reactNative.Easing.bezier(0.175, 0.885, 0.32, 1),
    0: (0, _defineProperty2.default)({
      opacity: 1,
      scale: 1
    }, translationType, 0),
    0.4: (0, _defineProperty2.default)({
      opacity: 1,
      scale: 0.457
    }, translationType, pivotPoint),
    1: (0, _defineProperty2.default)({
      opacity: 0,
      scale: 0.1
    }, translationType, modifier * -1000)
  };
}
var zoomOut = exports.zoomOut = {
  from: {
    opacity: 1,
    scale: 1
  },
  0.5: {
    opacity: 1,
    scale: 0.3
  },
  to: {
    opacity: 0,
    scale: 0
  }
};
var zoomOutDown = exports.zoomOutDown = makeZoomOutTranslation('translateY', 60);
var zoomOutUp = exports.zoomOutUp = makeZoomOutTranslation('translateY', -60);
var zoomOutLeft = exports.zoomOutLeft = makeZoomOutTranslation('translateX', 10);
var zoomOutRight = exports.zoomOutRight = makeZoomOutTranslation('translateX', -10);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwibWFrZVpvb21PdXRUcmFuc2xhdGlvbiIsInRyYW5zbGF0aW9uVHlwZSIsInBpdm90UG9pbnQiLCJtb2RpZmllciIsIk1hdGgiLCJtaW4iLCJtYXgiLCJlYXNpbmciLCJFYXNpbmciLCJiZXppZXIiLCJfZGVmaW5lUHJvcGVydHkyIiwiZGVmYXVsdCIsIm9wYWNpdHkiLCJzY2FsZSIsInpvb21PdXQiLCJleHBvcnRzIiwiZnJvbSIsInRvIiwiem9vbU91dERvd24iLCJ6b29tT3V0VXAiLCJ6b29tT3V0TGVmdCIsInpvb21PdXRSaWdodCJdLCJzb3VyY2VzIjpbInpvb21pbmctZXhpdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWFzaW5nIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuZnVuY3Rpb24gbWFrZVpvb21PdXRUcmFuc2xhdGlvbih0cmFuc2xhdGlvblR5cGUsIHBpdm90UG9pbnQpIHtcbiAgY29uc3QgbW9kaWZpZXIgPSBNYXRoLm1pbigxLCBNYXRoLm1heCgtMSwgcGl2b3RQb2ludCkpO1xuICByZXR1cm4ge1xuICAgIGVhc2luZzogRWFzaW5nLmJlemllcigwLjE3NSwgMC44ODUsIDAuMzIsIDEpLFxuICAgIDA6IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICBzY2FsZTogMSxcbiAgICAgIFt0cmFuc2xhdGlvblR5cGVdOiAwLFxuICAgIH0sXG4gICAgMC40OiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgc2NhbGU6IDAuNDU3LFxuICAgICAgW3RyYW5zbGF0aW9uVHlwZV06IHBpdm90UG9pbnQsXG4gICAgfSxcbiAgICAxOiB7XG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgc2NhbGU6IDAuMSxcbiAgICAgIFt0cmFuc2xhdGlvblR5cGVdOiBtb2RpZmllciAqIC0xMDAwLFxuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCB6b29tT3V0ID0ge1xuICBmcm9tOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICBzY2FsZTogMSxcbiAgfSxcbiAgMC41OiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICBzY2FsZTogMC4zLFxuICB9LFxuICB0bzoge1xuICAgIG9wYWNpdHk6IDAsXG4gICAgc2NhbGU6IDAsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3Qgem9vbU91dERvd24gPSBtYWtlWm9vbU91dFRyYW5zbGF0aW9uKCd0cmFuc2xhdGVZJywgNjApO1xuXG5leHBvcnQgY29uc3Qgem9vbU91dFVwID0gbWFrZVpvb21PdXRUcmFuc2xhdGlvbigndHJhbnNsYXRlWScsIC02MCk7XG5cbmV4cG9ydCBjb25zdCB6b29tT3V0TGVmdCA9IG1ha2Vab29tT3V0VHJhbnNsYXRpb24oJ3RyYW5zbGF0ZVgnLCAxMCk7XG5cbmV4cG9ydCBjb25zdCB6b29tT3V0UmlnaHQgPSBtYWtlWm9vbU91dFRyYW5zbGF0aW9uKCd0cmFuc2xhdGVYJywgLTEwKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBRUEsU0FBU0Msc0JBQXNCQSxDQUFDQyxlQUFlLEVBQUVDLFVBQVUsRUFBRTtFQUMzRCxJQUFNQyxRQUFRLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUMsRUFBRUQsSUFBSSxDQUFDRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUVKLFVBQVUsQ0FBQyxDQUFDO0VBQ3RELE9BQU87SUFDTEssTUFBTSxFQUFFQyxtQkFBTSxDQUFDQyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUMsTUFBQUMsZ0JBQUEsQ0FBQUMsT0FBQTtNQUNDQyxPQUFPLEVBQUUsQ0FBQztNQUNWQyxLQUFLLEVBQUU7SUFBQyxHQUNQWixlQUFlLEVBQUcsQ0FBQyxDQUNyQjtJQUNELEdBQUcsTUFBQVMsZ0JBQUEsQ0FBQUMsT0FBQTtNQUNEQyxPQUFPLEVBQUUsQ0FBQztNQUNWQyxLQUFLLEVBQUU7SUFBSyxHQUNYWixlQUFlLEVBQUdDLFVBQVUsQ0FDOUI7SUFDRCxDQUFDLE1BQUFRLGdCQUFBLENBQUFDLE9BQUE7TUFDQ0MsT0FBTyxFQUFFLENBQUM7TUFDVkMsS0FBSyxFQUFFO0lBQUcsR0FDVFosZUFBZSxFQUFHRSxRQUFRLEdBQUcsQ0FBQyxJQUFJO0VBRXZDLENBQUM7QUFDSDtBQUVPLElBQU1XLE9BQU8sR0FBQUMsT0FBQSxDQUFBRCxPQUFBLEdBQUc7RUFDckJFLElBQUksRUFBRTtJQUNKSixPQUFPLEVBQUUsQ0FBQztJQUNWQyxLQUFLLEVBQUU7RUFDVCxDQUFDO0VBQ0QsR0FBRyxFQUFFO0lBQ0hELE9BQU8sRUFBRSxDQUFDO0lBQ1ZDLEtBQUssRUFBRTtFQUNULENBQUM7RUFDREksRUFBRSxFQUFFO0lBQ0ZMLE9BQU8sRUFBRSxDQUFDO0lBQ1ZDLEtBQUssRUFBRTtFQUNUO0FBQ0YsQ0FBQztBQUVNLElBQU1LLFdBQVcsR0FBQUgsT0FBQSxDQUFBRyxXQUFBLEdBQUdsQixzQkFBc0IsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDO0FBRTVELElBQU1tQixTQUFTLEdBQUFKLE9BQUEsQ0FBQUksU0FBQSxHQUFHbkIsc0JBQXNCLENBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxDQUFDO0FBRTNELElBQU1vQixXQUFXLEdBQUFMLE9BQUEsQ0FBQUssV0FBQSxHQUFHcEIsc0JBQXNCLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQztBQUU1RCxJQUFNcUIsWUFBWSxHQUFBTixPQUFBLENBQUFNLFlBQUEsR0FBR3JCLHNCQUFzQixDQUFDLFlBQVksRUFBRSxDQUFDLEVBQUUsQ0FBQyJ9