eb6e0f850d44051e37bab19eef102a58
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ProductDetailsScreen = require("../ProductDetailsScreen");
var _jsxRuntime = require("react/jsx-runtime");
describe('ProductDetailsScreen', function () {
  jest.useFakeTimers();
  var mockProduct = {
    id: '1',
    name: 'Product 1',
    description: 'Description of Product 1',
    logo: 'https://example.com/product1.jpg',
    date_release: '2023-10-27T10:00:00Z',
    date_revision: '2023-10-28T14:30:00Z'
  };
  var mockRoute = {
    params: {
      product: mockProduct
    }
  };
  it('renders correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProductDetailsScreen.ProductDetailsScreen, {
        navigation: {
          goBack: jest.fn()
        },
        route: mockRoute
      })),
      getByText = _render.getByText;
    expect(getByText(`ID: ${mockProduct.id}`)).toBeTruthy();
    expect(getByText(`${mockProduct.name}`)).toBeTruthy();
    expect(getByText(`${mockProduct.description}`)).toBeTruthy();
    expect(getByText('Fecha liberacion')).toBeTruthy();
    expect(getByText('Fecha revision')).toBeTruthy();
  });
  it('handles product deletion correctly', (0, _asyncToGenerator2.default)(function* () {
    var deleteProduct = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProductDetailsScreen.ProductDetailsScreen, {
        navigation: {
          goBack: jest.fn(),
          navigate: jest.fn()
        },
        route: mockRoute
      })),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('Eliminar'));
    expect(getByText('Eliminar')).toBeTruthy();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Qcm9kdWN0RGV0YWlsc1NjcmVlbiIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJqZXN0IiwidXNlRmFrZVRpbWVycyIsIm1vY2tQcm9kdWN0IiwiaWQiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJsb2dvIiwiZGF0ZV9yZWxlYXNlIiwiZGF0ZV9yZXZpc2lvbiIsIm1vY2tSb3V0ZSIsInBhcmFtcyIsInByb2R1Y3QiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJQcm9kdWN0RGV0YWlsc1NjcmVlbiIsIm5hdmlnYXRpb24iLCJnb0JhY2siLCJmbiIsInJvdXRlIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJkZWxldGVQcm9kdWN0IiwiX3JlbmRlcjIiLCJuYXZpZ2F0ZSIsImZpcmVFdmVudCIsInByZXNzIl0sInNvdXJjZXMiOlsiUHJvZHVjdERldGFpbHNTY3JlZW4udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgUHJvZHVjdERldGFpbHNTY3JlZW4gfSBmcm9tICcuLi9Qcm9kdWN0RGV0YWlsc1NjcmVlbic7XG5pbXBvcnQgeyBQcm9kdWN0c0NvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L1Byb2R1Y3RDb250ZXh0JztcblxuZGVzY3JpYmUoJ1Byb2R1Y3REZXRhaWxzU2NyZWVuJywgKCkgPT4ge1xuICBqZXN0LnVzZUZha2VUaW1lcnMoKVxuXG4gIGNvbnN0IG1vY2tQcm9kdWN0ID0ge1xuICAgIGlkOiAnMScsXG4gICAgbmFtZTogJ1Byb2R1Y3QgMScsXG4gICAgZGVzY3JpcHRpb246ICdEZXNjcmlwdGlvbiBvZiBQcm9kdWN0IDEnLFxuICAgIGxvZ286ICdodHRwczovL2V4YW1wbGUuY29tL3Byb2R1Y3QxLmpwZycsXG4gICAgZGF0ZV9yZWxlYXNlOiAnMjAyMy0xMC0yN1QxMDowMDowMFonLFxuICAgIGRhdGVfcmV2aXNpb246ICcyMDIzLTEwLTI4VDE0OjMwOjAwWicsXG4gIH07XG5cbiAgY29uc3QgbW9ja1JvdXRlID0ge1xuICAgIHBhcmFtczoge1xuICAgICAgcHJvZHVjdDogbW9ja1Byb2R1Y3QsXG4gICAgfSxcbiAgfTtcblxuICBpdCgncmVuZGVycyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxQcm9kdWN0RGV0YWlsc1NjcmVlbiBuYXZpZ2F0aW9uPXt7IGdvQmFjazogamVzdC5mbigpIH0gYXMgYW55fSByb3V0ZT17bW9ja1JvdXRlIGFzIGFueX0gLz5cbiAgICApO1xuXG4gICAgZXhwZWN0KGdldEJ5VGV4dChgSUQ6ICR7bW9ja1Byb2R1Y3QuaWR9YCkpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KGAke21vY2tQcm9kdWN0Lm5hbWV9YCkpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KGAke21vY2tQcm9kdWN0LmRlc2NyaXB0aW9ufWApKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnRmVjaGEgbGliZXJhY2lvbicpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnRmVjaGEgcmV2aXNpb24nKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICAvLyBpdCgnbmF2aWdhdGVzIHRvIFByb2R1Y3RSZWdpc3RlclNjcmVlbiBvbiBFZGl0IGJ1dHRvbiBwcmVzcycsICgpID0+IHtcbiAgLy8gICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAvLyAgICAgLy9AdHMtaWdub3JlXG4gIC8vICAgICA8UHJvZHVjdHNDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IGRlbGV0ZVByb2R1Y3Q6IGplc3QuZm4oKSB9fT5cbiAgLy8gICAgICAgPFByb2R1Y3REZXRhaWxzU2NyZWVuIG5hdmlnYXRpb249e3sgZ29CYWNrOiBqZXN0LmZuKCksIG5hdmlnYXRlOiBqZXN0LmZuKCkgfSBhcyBhbnl9IHJvdXRlPXttb2NrUm91dGUgYXMgYW55fSAvPlxuICAvLyAgICAgPC9Qcm9kdWN0c0NvbnRleHQuUHJvdmlkZXI+XG4gIC8vICAgKTtcblxuICAvLyAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ0VkaXRhcicpKTtcbiAgLy8gICAvL0B0cy1pZ25vcmVcbiAgLy8gICBleHBlY3QobmF2aWdhdGlvbi5uYXZpZ2F0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ1Byb2R1Y3RSZWdpc3RlclNjcmVlbicsIHsgcHJvZHVjdDogbW9ja1Byb2R1Y3QgfSk7XG4gIC8vIH0pO1xuXG4gIC8vIGl0KCdzaG93cyBtb2RhbCBvbiBEZWxldGUgYnV0dG9uIHByZXNzJywgYXN5bmMgKCkgPT4ge1xuICAvLyAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAvLyAgICAgLy9AdHMtaWdub3JlXG4gIC8vICAgICA8UHJvZHVjdHNDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IGRlbGV0ZVByb2R1Y3Q6IGplc3QuZm4oKSB9fT5cbiAgLy8gICAgICAgPFByb2R1Y3REZXRhaWxzU2NyZWVuIG5hdmlnYXRpb249e3sgZ29CYWNrOiBqZXN0LmZuKCksIG5hdmlnYXRlOiBqZXN0LmZuKCkgfSBhcyBhbnl9IHJvdXRlPXttb2NrUm91dGUgYXMgYW55fSAvPlxuICAvLyAgICAgPC9Qcm9kdWN0c0NvbnRleHQuUHJvdmlkZXI+XG4gIC8vICAgKTtcblxuICAvLyAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ0VsaW1pbmFyJykpO1xuICAvLyAgIGV4cGVjdChnZXRCeVRleHQoYMK/RXN0YXMgc2VndXJvIGRlIGVsaW1pbmFyIGVsIHByb2R1Y3RvICR7bW9ja1Byb2R1Y3QubmFtZX0/YCkpLnRvQmVUcnV0aHkoKTtcbiAgLy8gfSk7XG5cbiAgaXQoJ2hhbmRsZXMgcHJvZHVjdCBkZWxldGlvbiBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZGVsZXRlUHJvZHVjdCA9IGplc3QuZm4oKTtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPFByb2R1Y3REZXRhaWxzU2NyZWVuIG5hdmlnYXRpb249e3sgZ29CYWNrOiBqZXN0LmZuKCksIG5hdmlnYXRlOiBqZXN0LmZuKCkgfSBhcyBhbnl9IHJvdXRlPXttb2NrUm91dGUgYXMgYW55fSAvPlxuICAgICk7XG5cbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdFbGltaW5hcicpKTtcblxuICAgIGV4cGVjdChnZXRCeVRleHQoJ0VsaW1pbmFyJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxxQkFBQSxHQUFBRixPQUFBO0FBQStELElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUcvREksUUFBUSxDQUFDLHNCQUFzQixFQUFFLFlBQU07RUFDckNDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLENBQUM7RUFFcEIsSUFBTUMsV0FBVyxHQUFHO0lBQ2xCQyxFQUFFLEVBQUUsR0FBRztJQUNQQyxJQUFJLEVBQUUsV0FBVztJQUNqQkMsV0FBVyxFQUFFLDBCQUEwQjtJQUN2Q0MsSUFBSSxFQUFFLGtDQUFrQztJQUN4Q0MsWUFBWSxFQUFFLHNCQUFzQjtJQUNwQ0MsYUFBYSxFQUFFO0VBQ2pCLENBQUM7RUFFRCxJQUFNQyxTQUFTLEdBQUc7SUFDaEJDLE1BQU0sRUFBRTtNQUNOQyxPQUFPLEVBQUVUO0lBQ1g7RUFDRixDQUFDO0VBRURVLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxZQUFNO0lBQzVCLElBQUFDLE9BQUEsR0FBc0IsSUFBQUMsbUJBQU0sRUFDMUIsSUFBQWhCLFdBQUEsQ0FBQWlCLEdBQUEsRUFBQ2xCLHFCQUFBLENBQUFtQixvQkFBb0I7UUFBQ0MsVUFBVSxFQUFFO1VBQUVDLE1BQU0sRUFBRWxCLElBQUksQ0FBQ21CLEVBQUUsQ0FBQztRQUFFLENBQVM7UUFBQ0MsS0FBSyxFQUFFWDtNQUFpQixDQUFFLENBQzVGLENBQUM7TUFGT1ksU0FBUyxHQUFBUixPQUFBLENBQVRRLFNBQVM7SUFJakJDLE1BQU0sQ0FBQ0QsU0FBUyxDQUFFLE9BQU1uQixXQUFXLENBQUNDLEVBQUcsRUFBQyxDQUFDLENBQUMsQ0FBQ29CLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZERCxNQUFNLENBQUNELFNBQVMsQ0FBRSxHQUFFbkIsV0FBVyxDQUFDRSxJQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUNtQixVQUFVLENBQUMsQ0FBQztJQUNyREQsTUFBTSxDQUFDRCxTQUFTLENBQUUsR0FBRW5CLFdBQVcsQ0FBQ0csV0FBWSxFQUFDLENBQUMsQ0FBQyxDQUFDa0IsVUFBVSxDQUFDLENBQUM7SUFDNURELE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7SUFDbERELE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7RUFDbEQsQ0FBQyxDQUFDO0VBMkJGWCxFQUFFLENBQUMsb0NBQW9DLE1BQUFZLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxhQUFZO0lBQ25ELElBQU1DLGFBQWEsR0FBRzFCLElBQUksQ0FBQ21CLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLElBQUFRLFFBQUEsR0FBc0IsSUFBQWIsbUJBQU0sRUFDMUIsSUFBQWhCLFdBQUEsQ0FBQWlCLEdBQUEsRUFBQ2xCLHFCQUFBLENBQUFtQixvQkFBb0I7UUFBQ0MsVUFBVSxFQUFFO1VBQUVDLE1BQU0sRUFBRWxCLElBQUksQ0FBQ21CLEVBQUUsQ0FBQyxDQUFDO1VBQUVTLFFBQVEsRUFBRTVCLElBQUksQ0FBQ21CLEVBQUUsQ0FBQztRQUFFLENBQVM7UUFBQ0MsS0FBSyxFQUFFWDtNQUFpQixDQUFFLENBQ2pILENBQUM7TUFGT1ksU0FBUyxHQUFBTSxRQUFBLENBQVROLFNBQVM7SUFJakJRLHNCQUFTLENBQUNDLEtBQUssQ0FBQ1QsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRXRDQyxNQUFNLENBQUNELFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztFQUM1QyxDQUFDLEVBQUM7QUFDSixDQUFDLENBQUMifQ==