7cde7d3c63792d0fbdb662d242701d53
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProductProvider = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _ProductContext = require("./ProductContext");
var _ProductReducer = require("./ProductReducer");
var _productApi = _interopRequireDefault(require("../api/productApi"));
var _jsxRuntime = require("react/jsx-runtime");
var PRODUCT_INITIAL_STATE = {
  products: [],
  loading: false
};
var ProductProvider = exports.ProductProvider = function ProductProvider(_ref) {
  var children = _ref.children;
  var _useReducer = (0, _react.useReducer)(_ProductReducer.productReducer, PRODUCT_INITIAL_STATE),
    _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),
    state = _useReducer2[0],
    dispatch = _useReducer2[1];
  (0, _react.useEffect)(function () {
    loadProducts();
  }, []);
  var loadProducts = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        dispatch({
          type: 'LOADING PRODUCT',
          payload: true
        });
        var resp = yield _productApi.default.get('/bp/products');
        dispatch({
          type: 'LOAD PRODUCTS',
          payload: resp.data
        });
        dispatch({
          type: 'LOADING PRODUCT',
          payload: false
        });
      } catch (error) {
        return error.response.data;
      }
    });
    return function loadProducts() {
      return _ref2.apply(this, arguments);
    };
  }();
  var createProduct = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (product) {
      try {
        var resp = yield _productApi.default.post('/bp/products', product);
        dispatch({
          type: 'CREATE PRODUCT',
          payload: resp.data
        });
      } catch (error) {
        return error.response.data;
      }
    });
    return function createProduct(_x) {
      return _ref3.apply(this, arguments);
    };
  }();
  var editProduct = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (product) {
      try {
        console.log(product.name);
        var resp = yield _productApi.default.put('/bp/products', product);
        console.log(resp.data);
        dispatch({
          type: 'UPDATE PRODUCT',
          payload: resp.data
        });
      } catch (error) {
        return error.response.data;
      }
    });
    return function editProduct(_x2) {
      return _ref4.apply(this, arguments);
    };
  }();
  var deleteProduct = function () {
    var _ref5 = (0, _asyncToGenerator2.default)(function* (productId) {
      try {
        yield _productApi.default.get(`/bp/products?id=${productId}`);
        dispatch({
          type: 'DELETE PRODUCT',
          payload: productId
        });
      } catch (error) {
        return error.response.data;
      }
    });
    return function deleteProduct(_x3) {
      return _ref5.apply(this, arguments);
    };
  }();
  var verifyProductId = function () {
    var _ref6 = (0, _asyncToGenerator2.default)(function* (productId) {
      try {
        var resp = yield _productApi.default.get(`/bp/products/verification?id=${productId}`);
        return resp.data;
      } catch (error) {
        return error.response.data;
      }
    });
    return function verifyProductId(_x4) {
      return _ref6.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsx)(_ProductContext.ProductsContext.Provider, {
    value: Object.assign({}, state, {
      verifyProductId: verifyProductId,
      createProduct: createProduct,
      editProduct: editProduct,
      deleteProduct: deleteProduct
    }),
    children: children
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX1Byb2R1Y3RDb250ZXh0IiwiX1Byb2R1Y3RSZWR1Y2VyIiwiX3Byb2R1Y3RBcGkiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2pzeFJ1bnRpbWUiLCJQUk9EVUNUX0lOSVRJQUxfU1RBVEUiLCJwcm9kdWN0cyIsImxvYWRpbmciLCJQcm9kdWN0UHJvdmlkZXIiLCJleHBvcnRzIiwiX3JlZiIsImNoaWxkcmVuIiwiX3VzZVJlZHVjZXIiLCJ1c2VSZWR1Y2VyIiwicHJvZHVjdFJlZHVjZXIiLCJfdXNlUmVkdWNlcjIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0Iiwic3RhdGUiLCJkaXNwYXRjaCIsInVzZUVmZmVjdCIsImxvYWRQcm9kdWN0cyIsIl9yZWYyIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwidHlwZSIsInBheWxvYWQiLCJyZXNwIiwicHJvZHVjdEFwaSIsImdldCIsImRhdGEiLCJlcnJvciIsInJlc3BvbnNlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJjcmVhdGVQcm9kdWN0IiwiX3JlZjMiLCJwcm9kdWN0IiwicG9zdCIsIl94IiwiZWRpdFByb2R1Y3QiLCJfcmVmNCIsImNvbnNvbGUiLCJsb2ciLCJuYW1lIiwicHV0IiwiX3gyIiwiZGVsZXRlUHJvZHVjdCIsIl9yZWY1IiwicHJvZHVjdElkIiwiX3gzIiwidmVyaWZ5UHJvZHVjdElkIiwiX3JlZjYiLCJfeDQiLCJqc3giLCJQcm9kdWN0c0NvbnRleHQiLCJQcm92aWRlciIsInZhbHVlIiwiT2JqZWN0IiwiYXNzaWduIl0sInNvdXJjZXMiOlsiUHJvZHVjdFByb3ZpZGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZHVjZXIgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgUHJvZHVjdHNDb250ZXh0IH0gZnJvbSBcIi4vUHJvZHVjdENvbnRleHRcIlxuaW1wb3J0IHsgcHJvZHVjdFJlZHVjZXIgfSBmcm9tIFwiLi9Qcm9kdWN0UmVkdWNlclwiO1xuaW1wb3J0IHByb2R1Y3RBcGkgZnJvbSBcIi4uL2FwaS9wcm9kdWN0QXBpXCI7XG5pbXBvcnQgeyBQcm9kdWN0IH0gZnJvbSBcIi4uL2ludGVyZmFjZXNcIjtcblxuXG5leHBvcnQgaW50ZXJmYWNlIFByb2R1Y3RTdGF0ZSB7XG4gICAgcHJvZHVjdHM6IFByb2R1Y3RbXTtcbiAgICBsb2FkaW5nOiBib29sZWFuO1xufVxuXG5jb25zdCBQUk9EVUNUX0lOSVRJQUxfU1RBVEU6IFByb2R1Y3RTdGF0ZSA9IHtcbiAgICBwcm9kdWN0czogW10sXG4gICAgbG9hZGluZzogZmFsc2UsXG59XG5cbmV4cG9ydCBjb25zdCBQcm9kdWN0UHJvdmlkZXIgPSAoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBKU1guRWxlbWVudCB8IEpTWC5FbGVtZW50W10gfSkgPT4ge1xuXG4gICAgY29uc3QgWyBzdGF0ZSwgZGlzcGF0Y2ggXSA9IHVzZVJlZHVjZXIocHJvZHVjdFJlZHVjZXIsIFBST0RVQ1RfSU5JVElBTF9TVEFURSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBsb2FkUHJvZHVjdHMoKTtcbiAgICB9LCBbXSlcblxuICAgIGNvbnN0IGxvYWRQcm9kdWN0cyA9IGFzeW5jICgpID0+IHtcbiAgICAgICB0cnkge1xuICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnTE9BRElORyBQUk9EVUNUJywgcGF5bG9hZDogdHJ1ZSB9KTsgXG4gICAgICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgcHJvZHVjdEFwaS5nZXQ8UHJvZHVjdFtdPignL2JwL3Byb2R1Y3RzJyk7XG4gICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdMT0FEIFBST0RVQ1RTJywgcGF5bG9hZDogcmVzcC5kYXRhIH0pOyBcbiAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ0xPQURJTkcgUFJPRFVDVCcsIHBheWxvYWQ6IGZhbHNlIH0pOyAgIFxuICAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5yZXNwb25zZS5kYXRhO1xuICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjcmVhdGVQcm9kdWN0ID0gYXN5bmMgKHByb2R1Y3Q6IFByb2R1Y3QpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCBwcm9kdWN0QXBpLnBvc3Q8UHJvZHVjdD4oJy9icC9wcm9kdWN0cycsIHByb2R1Y3QpO1xuICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnQ1JFQVRFIFBST0RVQ1QnLCBwYXlsb2FkOiByZXNwLmRhdGEgfSk7ICAgXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgICAgICByZXR1cm4gZXJyb3IucmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfVxuICAgICB9XG5cbiAgICAgY29uc3QgZWRpdFByb2R1Y3QgPSBhc3luYyAocHJvZHVjdDogUHJvZHVjdCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc29sZS5sb2cocHJvZHVjdC5uYW1lKVxuICAgICAgICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IHByb2R1Y3RBcGkucHV0PFByb2R1Y3Q+KCcvYnAvcHJvZHVjdHMnLCBwcm9kdWN0KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3AuZGF0YSlcbiAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1VQREFURSBQUk9EVUNUJywgcGF5bG9hZDogcmVzcC5kYXRhIH0pOyAgIFxuICAgICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgICAgICAgcmV0dXJuIGVycm9yLnJlc3BvbnNlLmRhdGE7XG4gICAgICAgIH1cbiAgICAgfVxuXG4gICAgIGNvbnN0IGRlbGV0ZVByb2R1Y3QgPSBhc3luYyAoIHByb2R1Y3RJZDogc3RyaW5nICk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgcHJvZHVjdEFwaS5nZXQ8Ym9vbGVhbj4oYC9icC9wcm9kdWN0cz9pZD0keyBwcm9kdWN0SWQgfWApO1xuICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnREVMRVRFIFBST0RVQ1QnLCBwYXlsb2FkOiBwcm9kdWN0SWQgfSk7IFxuICAgICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3IucmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHZlcmlmeVByb2R1Y3RJZCA9IGFzeW5jICggcHJvZHVjdElkOiBzdHJpbmcgKTogUHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgcHJvZHVjdEFwaS5nZXQ8Ym9vbGVhbj4oYC9icC9wcm9kdWN0cy92ZXJpZmljYXRpb24/aWQ9JHsgcHJvZHVjdElkIH1gKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwLmRhdGE7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5yZXNwb25zZS5kYXRhO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFByb2R1Y3RzQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e1xuICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgdmVyaWZ5UHJvZHVjdElkLFxuICAgICAgICAgICBjcmVhdGVQcm9kdWN0LFxuICAgICAgICAgICBlZGl0UHJvZHVjdCxcbiAgICAgICAgICAgZGVsZXRlUHJvZHVjdCxcbiAgICAgICAgfX0+XG4gICAgICAgICAgICB7IGNoaWxkcmVuIH1cbiAgICAgICAgPC9Qcm9kdWN0c0NvbnRleHQuUHJvdmlkZXI+XG4gICAgKVxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUVBLElBQUFDLGVBQUEsR0FBQUQsT0FBQTtB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