0ec1e3ce5485c3bc0397223495e820b4
_getJestObj().mock('../useForm', function () {
  return {
    useForm: jest.fn().mockReturnValue({
      form: {
        id: 'mockId',
        name: 'mockName',
        description: 'mockDescription',
        logo: 'mockLogo',
        releaseDate: '2023-12-31',
        reviewDate: '2024-10-31'
      },
      setFormValue: jest.fn(),
      onChange: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("@testing-library/react");
var _useProductRegister = _interopRequireDefault(require("../useProductRegister"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockProductsContext = {
  verifyProductId: jest.fn(),
  createProduct: jest.fn(),
  editProduct: jest.fn()
};
describe('useProductRegister', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('should show the correct data', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook = (0, _react.renderHook)(function () {
        return (0, _useProductRegister.default)(null, mockProductsContext);
      }),
      result = _renderHook.result;
    expect(result.current.form.id).toBe('mockId');
    expect(result.current.form.name).toBe('mockName');
    expect(result.current.form.logo).toBe('mockLogo');
    expect(result.current.form.description).toBe('mockDescription');
    expect(result.current.form.releaseDate).toBe('2023-12-31');
    expect(result.current.form.reviewDate).toBe('2024-10-31');
  }));
  it('the function should be called to update logo', function () {
    var _renderHook2 = (0, _react.renderHook)(function () {
        return (0, _useProductRegister.default)(null, mockProductsContext);
      }),
      result = _renderHook2.result;
    (0, _react.act)(function () {
      result.current.onChange('mockLogo2', 'logo');
    });
    expect(result.current.onChange).toHaveBeenCalled();
  });
  it('should call createProduct on form submission', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _react.renderHook)(function () {
        return (0, _useProductRegister.default)(null, mockProductsContext);
      }),
      result = _renderHook3.result;
    (0, _react.act)(function () {
      result.current.handleReleaseChange('');
    });
    yield (0, _react.waitFor)(function () {
      expect(result.current.onChange).toHaveBeenCalled();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VGb3JtIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwiZm9ybSIsImlkIiwibmFtZSIsImRlc2NyaXB0aW9uIiwibG9nbyIsInJlbGVhc2VEYXRlIiwicmV2aWV3RGF0ZSIsInNldEZvcm1WYWx1ZSIsIm9uQ2hhbmdlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfdXNlUHJvZHVjdFJlZ2lzdGVyIiwiX3JlcXVpcmUiLCJtb2NrUHJvZHVjdHNDb250ZXh0IiwidmVyaWZ5UHJvZHVjdElkIiwiY3JlYXRlUHJvZHVjdCIsImVkaXRQcm9kdWN0IiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwiZGVmYXVsdCIsIl9yZW5kZXJIb29rIiwicmVuZGVySG9vayIsInVzZVByb2R1Y3RSZWdpc3RlciIsInJlc3VsdCIsImV4cGVjdCIsImN1cnJlbnQiLCJ0b0JlIiwiX3JlbmRlckhvb2syIiwiYWN0IiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXJIb29rMyIsImhhbmRsZVJlbGVhc2VDaGFuZ2UiLCJ3YWl0Rm9yIl0sInNvdXJjZXMiOlsidXNlUHJvZHVjdFJlZ2lzdGVyLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAamVzdC1lbnZpcm9ubWVudCBqc2RvbVxuKi8gXG5pbXBvcnQgeyByZW5kZXJIb29rLCBhY3QsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCB1c2VQcm9kdWN0UmVnaXN0ZXIgZnJvbSAnLi4vdXNlUHJvZHVjdFJlZ2lzdGVyJzsgXG5cbmNvbnN0IG1vY2tQcm9kdWN0c0NvbnRleHQgPSB7XG4gIHZlcmlmeVByb2R1Y3RJZDogamVzdC5mbigpLFxuICBjcmVhdGVQcm9kdWN0OiBqZXN0LmZuKCksXG4gIGVkaXRQcm9kdWN0OiBqZXN0LmZuKCksXG59O1xuXG5qZXN0Lm1vY2soJy4uL3VzZUZvcm0nLCAoKSA9PiAoe1xuICB1c2VGb3JtOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcbiAgICBmb3JtOiB7XG4gICAgICBpZDogJ21vY2tJZCcsXG4gICAgICBuYW1lOiAnbW9ja05hbWUnLFxuICAgICAgZGVzY3JpcHRpb246ICdtb2NrRGVzY3JpcHRpb24nLFxuICAgICAgbG9nbzogJ21vY2tMb2dvJyxcbiAgICAgIHJlbGVhc2VEYXRlOiAnMjAyMy0xMi0zMScsXG4gICAgICByZXZpZXdEYXRlOiAnMjAyNC0xMC0zMScsXG4gICAgfSxcbiAgICBzZXRGb3JtVmFsdWU6IGplc3QuZm4oKSxcbiAgICBvbkNoYW5nZTogamVzdC5mbigpLFxuICB9KSxcbn0pKTtcblxuZGVzY3JpYmUoJ3VzZVByb2R1Y3RSZWdpc3RlcicsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgc2hvdyB0aGUgY29ycmVjdCBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVByb2R1Y3RSZWdpc3RlcihudWxsLCBtb2NrUHJvZHVjdHNDb250ZXh0IGFzIGFueSkpO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmZvcm0uaWQpLnRvQmUoJ21vY2tJZCcpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5mb3JtLm5hbWUpLnRvQmUoJ21vY2tOYW1lJyk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmZvcm0ubG9nbykudG9CZSgnbW9ja0xvZ28nKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZm9ybS5kZXNjcmlwdGlvbikudG9CZSgnbW9ja0Rlc2NyaXB0aW9uJyk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmZvcm0ucmVsZWFzZURhdGUpLnRvQmUoJzIwMjMtMTItMzEnKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZm9ybS5yZXZpZXdEYXRlKS50b0JlKCcyMDI0LTEwLTMxJyk7XG4gIH0pO1xuXG4gIGl0KCd0aGUgZnVuY3Rpb24gc2hvdWxkIGJlIGNhbGxlZCB0byB1cGRhdGUgbG9nbycsICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VQcm9kdWN0UmVnaXN0ZXIobnVsbCwgbW9ja1Byb2R1Y3RzQ29udGV4dCBhcyBhbnkpKTtcbiAgICBcbiAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQub25DaGFuZ2UoJ21vY2tMb2dvMicsICdsb2dvJyk7XG4gICAgfSk7XG5cbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQub25DaGFuZ2UpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbi8vICAgaXQoJ3Nob3VsZCB1cGRhdGUgb3RoZXIgZm9ybSBmaWVsZHMgY29ycmVjdGx5JywgKCkgPT4ge1xuLy8gICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVByb2R1Y3RSZWdpc3RlcihudWxsLCBtb2NrUHJvZHVjdHNDb250ZXh0IGFzIGFueSkpO1xuICAgIFxuLy8gICAgIGFjdCgoKSA9PiB7XG4vLyAgICAgICByZXN1bHQuY3VycmVudC5vbkNoYW5nZSgnTmV3IE5hbWUnLCAnbmFtZScpO1xuLy8gICAgICAgcmVzdWx0LmN1cnJlbnQub25DaGFuZ2UoJ05ldyBEZXNjcmlwdGlvbicsICdkZXNjcmlwdGlvbicpO1xuLy8gICAgICAgLy8gQWRkIG1vcmUgZmllbGRzIGFzIG5lZWRlZFxuLy8gICAgIH0pO1xuXG4vLyAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lm9uQ2hhbmdlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMik7XG4vLyAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmZvcm0ubmFtZSkudG9CZSgnTmV3IE5hbWUnKTtcbi8vICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZm9ybS5kZXNjcmlwdGlvbikudG9CZSgnTmV3IERlc2NyaXB0aW9uJyk7XG4vLyAgICAgLy8gQWRkIG1vcmUgYXNzZXJ0aW9ucyBmb3Igb3RoZXIgZmllbGRzXG4vLyAgIH0pO1xuLy8gfSk7XG5cbml0KCdzaG91bGQgY2FsbCBjcmVhdGVQcm9kdWN0IG9uIGZvcm0gc3VibWlzc2lvbicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VQcm9kdWN0UmVnaXN0ZXIobnVsbCwgbW9ja1Byb2R1Y3RzQ29udGV4dCBhcyBhbnkpKTtcbiAgICBcbiAgICBhY3QoKCkgPT4ge1xuICAgICAgcmVzdWx0LmN1cnJlbnQuaGFuZGxlUmVsZWFzZUNoYW5nZSgnJyk7XG4gICAgfSk7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5vbkNoYW5nZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgLy8gQWRkIG1vcmUgYXNzZXJ0aW9ucyBhcyBuZWVkZWRcbiAgICB9KTtcbiAgfSlcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFZQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsWUFBWSxFQUFFO0VBQUEsT0FBTztJQUM3QkMsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGVBQWUsQ0FBQztNQUNqQ0MsSUFBSSxFQUFFO1FBQ0pDLEVBQUUsRUFBRSxRQUFRO1FBQ1pDLElBQUksRUFBRSxVQUFVO1FBQ2hCQyxXQUFXLEVBQUUsaUJBQWlCO1FBQzlCQyxJQUFJLEVBQUUsVUFBVTtRQUNoQkMsV0FBVyxFQUFFLFlBQVk7UUFDekJDLFVBQVUsRUFBRTtNQUNkLENBQUM7TUFDREMsWUFBWSxFQUFFVixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ3ZCVSxRQUFRLEVBQUVYLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQ3BCLENBQUM7RUFDSCxDQUFDO0FBQUEs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