d7b58ecfc7dd3942c6330a4d37f2f2d9
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HeaderContainer;
var _elements = require("@react-navigation/elements");
var _native = require("@react-navigation/native");
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _HeaderStyleInterpolators = require("../../TransitionConfigs/HeaderStyleInterpolators");
var _Header = _interopRequireDefault(require("./Header"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function HeaderContainer(_ref) {
  var mode = _ref.mode,
    scenes = _ref.scenes,
    layout = _ref.layout,
    getPreviousScene = _ref.getPreviousScene,
    getFocusedRoute = _ref.getFocusedRoute,
    onContentHeightChange = _ref.onContentHeightChange,
    style = _ref.style;
  var focusedRoute = getFocusedRoute();
  var parentHeaderBack = React.useContext(_elements.HeaderBackContext);
  return React.createElement(_reactNative.Animated.View, {
    pointerEvents: "box-none",
    style: style
  }, scenes.slice(-3).map(function (scene, i, self) {
    var _self, _self2;
    if (mode === 'screen' && i !== self.length - 1 || !scene) {
      return null;
    }
    var _scene$descriptor$opt = scene.descriptor.options,
      header = _scene$descriptor$opt.header,
      headerMode = _scene$descriptor$opt.headerMode,
      _scene$descriptor$opt2 = _scene$descriptor$opt.headerShown,
      headerShown = _scene$descriptor$opt2 === void 0 ? true : _scene$descriptor$opt2,
      headerTransparent = _scene$descriptor$opt.headerTransparent,
      headerStyleInterpolator = _scene$descriptor$opt.headerStyleInterpolator;
    if (headerMode !== mode || !headerShown) {
      return null;
    }
    var isFocused = focusedRoute.key === scene.descriptor.route.key;
    var previousScene = getPreviousScene({
      route: scene.descriptor.route
    });
    var headerBack = parentHeaderBack;
    if (previousScene) {
      var _previousScene$descri = previousScene.descriptor,
        options = _previousScene$descri.options,
        route = _previousScene$descri.route;
      headerBack = previousScene ? {
        title: (0, _elements.getHeaderTitle)(options, route.name)
      } : parentHeaderBack;
    }
    var previousDescriptor = (_self = self[i - 1]) === null || _self === void 0 ? void 0 : _self.descriptor;
    var nextDescriptor = (_self2 = self[i + 1]) === null || _self2 === void 0 ? void 0 : _self2.descriptor;
    var _ref2 = (previousDescriptor === null || previousDescriptor === void 0 ? void 0 : previousDescriptor.options) || {},
      _ref2$headerShown = _ref2.headerShown,
      previousHeaderShown = _ref2$headerShown === void 0 ? true : _ref2$headerShown,
      previousHeaderMode = _ref2.headerMode;
    var nextHeaderlessScene = self.slice(i + 1).find(function (scene) {
      var _ref3 = (scene === null || scene === void 0 ? void 0 : scene.descriptor.options) || {},
        _ref3$headerShown = _ref3.headerShown,
        currentHeaderShown = _ref3$headerShown === void 0 ? true : _ref3$headerShown,
        currentHeaderMode = _ref3.headerMode;
      return currentHeaderShown === false || currentHeaderMode === 'screen';
    });
    var _ref4 = (nextHeaderlessScene === null || nextHeaderlessScene === void 0 ? void 0 : nextHeaderlessScene.descriptor.options) || {},
      nextHeaderlessGestureDirection = _ref4.gestureDirection;
    var isHeaderStatic = (previousHeaderShown === false || previousHeaderMode === 'screen') && !nextDescriptor || nextHeaderlessScene;
    var props = {
      layout: layout,
      back: headerBack,
      progress: scene.progress,
      options: scene.descriptor.options,
      route: scene.descriptor.route,
      navigation: scene.descriptor.navigation,
      styleInterpolator: mode === 'float' ? isHeaderStatic ? nextHeaderlessGestureDirection === 'vertical' || nextHeaderlessGestureDirection === 'vertical-inverted' ? _HeaderStyleInterpolators.forSlideUp : nextHeaderlessGestureDirection === 'horizontal-inverted' ? _HeaderStyleInterpolators.forSlideRight : _HeaderStyleInterpolators.forSlideLeft : headerStyleInterpolator : _HeaderStyleInterpolators.forNoAnimation
    };
    return React.createElement(_native.NavigationContext.Provider, {
      key: scene.descriptor.route.key,
      value: scene.descriptor.navigation
    }, React.createElement(_native.NavigationRouteContext.Provider, {
      value: scene.descriptor.route
    }, React.createElement(_reactNative.View, {
      onLayout: onContentHeightChange ? function (e) {
        var height = e.nativeEvent.layout.height;
        onContentHeightChange({
          route: scene.descriptor.route,
          height: height
        });
      } : undefined,
      pointerEvents: isFocused ? 'box-none' : 'none',
      accessibilityElementsHidden: !isFocused,
      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',
      style: mode === 'float' && !isFocused || headerTransparent ? styles.header : null
    }, header !== undefined ? header(props) : React.createElement(_Header.default, props))));
  }));
}
var styles = _reactNative.StyleSheet.create({
  header: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,