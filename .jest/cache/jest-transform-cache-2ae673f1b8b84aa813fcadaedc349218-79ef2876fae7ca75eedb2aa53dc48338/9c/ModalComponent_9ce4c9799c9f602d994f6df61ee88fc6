09b9a04e76e9d846660afe5d1ba7cef7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModalComponent = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _FontAwesome = _interopRequireDefault(require("react-native-vector-icons/FontAwesome"));
var _reactNativeModal = _interopRequireDefault(require("react-native-modal"));
var _theme = _interopRequireDefault(require("../themes/theme"));
var _CustomButton = require("./CustomButton");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var ModalComponent = exports.ModalComponent = function ModalComponent(_ref) {
  var isVisible = _ref.isVisible,
    title = _ref.title,
    onConfirm = _ref.onConfirm,
    onClose = _ref.onClose;
  var translateY = (0, _react.useRef)(new _reactNative.Animated.Value(500)).current;
  (0, _react.useEffect)(function () {
    if (isVisible) {
      _reactNative.Animated.spring(translateY, {
        toValue: 0,
        useNativeDriver: true
      }).start();
    } else {
      _reactNative.Animated.spring(translateY, {
        toValue: 500,
        useNativeDriver: true
      }).start();
    }
  }, [isVisible]);
  return (0, _jsxRuntime.jsx)(_reactNativeModal.default, {
    isVisible: isVisible,
    animationIn: "slideInUp",
    animationOut: "slideOutDown",
    useNativeDriver: true,
    style: {
      margin: 0,
      padding: 0
    },
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.modalContainer,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.modalContent,
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.headerModal,
          children: (0, _jsxRuntime.jsx)(_FontAwesome.default, {
            name: 'close',
            size: 20,
            color: _theme.default.gray,
            onPress: onClose,
            testID: "close-button"
          })
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.titleContent,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.title,
            children: title
          })
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.divider
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.contentButton,
          children: [(0, _jsxRuntime.jsx)(_CustomButton.CustomButton, {
            onPress: function onPress() {
              return onConfirm();
            },
            title: "Confirmar",
            backgroundColor: _theme.default.yellow,
            color: _theme.default.darkBlue
          }), (0, _jsxRuntime.jsx)(_CustomButton.CustomButton, {
            onPress: function onPress() {
              return onClose();
            },
            title: "Cancelar",
            backgroundColor: _theme.default.purple,
            color: _theme.default.darkBlue
          })]
        })]
      })
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  modalContainer: {
    flex: 1,
    justifyContent: 'flex-end'
  },
  modalContent: {
    backgroundColor: _theme.default.lightWhite,
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    minHeight: 300
  },
  headerModal: {
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-end',
    height: 60,
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: _theme.default.lightGrey
  },
  titleContent: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20
  },
  title: {
    fontSize: 17,
    color: _theme.default.black,
    textAlign: 'center'
  },
  divider: {
    borderWidth: 1,
    borderColor: _theme.default.lightGrey
  },
  contentButton: {
    padding: 20
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,