5240f18a6b2ac8672c850d361c523323
_getJestObj().mock('../useForm', function () {
  return {
    useForm: jest.fn().mockReturnValue({
      form: {
        id: 'mockId',
        name: 'mockName',
        description: 'mockDescription',
        logo: 'mockLogo',
        releaseDate: '2023-12-31',
        reviewDate: '2024-10-31'
      },
      setFormValue: jest.fn(),
      onChange: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("@testing-library/react");
var _useProductRegister = _interopRequireDefault(require("../useProductRegister"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockProductsContext = {
  verifyProductId: jest.fn(),
  createProduct: jest.fn(),
  editProduct: jest.fn()
};
describe('useProductRegister', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('should show the correct data', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook = (0, _react.renderHook)(function () {
        return (0, _useProductRegister.default)(null, mockProductsContext);
      }),
      result = _renderHook.result;
    expect(result.current.form.id).toBe('mockId');
    expect(result.current.form.name).toBe('mockName');
    expect(result.current.form.logo).toBe('mockLogo');
    expect(result.current.form.description).toBe('mockDescription');
    expect(result.current.form.releaseDate).toBe('2023-12-31');
    expect(result.current.form.reviewDate).toBe('2024-10-31');
  }));
  it('the function should be called to update logo', function () {
    var _renderHook2 = (0, _react.renderHook)(function () {
        return (0, _useProductRegister.default)(null, mockProductsContext);
      }),
      result = _renderHook2.result;
    (0, _react.act)(function () {
      result.current.onChange('mockLogo2', 'logo');
    });
    expect(result.current.onChange).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VGb3JtIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwiZm9ybSIsImlkIiwibmFtZSIsImRlc2NyaXB0aW9uIiwibG9nbyIsInJlbGVhc2VEYXRlIiwicmV2aWV3RGF0ZSIsInNldEZvcm1WYWx1ZSIsIm9uQ2hhbmdlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfdXNlUHJvZHVjdFJlZ2lzdGVyIiwiX3JlcXVpcmUiLCJtb2NrUHJvZHVjdHNDb250ZXh0IiwidmVyaWZ5UHJvZHVjdElkIiwiY3JlYXRlUHJvZHVjdCIsImVkaXRQcm9kdWN0IiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwiZGVmYXVsdCIsIl9yZW5kZXJIb29rIiwicmVuZGVySG9vayIsInVzZVByb2R1Y3RSZWdpc3RlciIsInJlc3VsdCIsImV4cGVjdCIsImN1cnJlbnQiLCJ0b0JlIiwiX3JlbmRlckhvb2syIiwiYWN0IiwidG9IYXZlQmVlbkNhbGxlZCJdLCJzb3VyY2VzIjpbInVzZVByb2R1Y3RSZWdpc3Rlci50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGplc3QtZW52aXJvbm1lbnQganNkb21cbiovIFxuaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgdXNlUHJvZHVjdFJlZ2lzdGVyIGZyb20gJy4uL3VzZVByb2R1Y3RSZWdpc3Rlcic7IFxuXG5jb25zdCBtb2NrUHJvZHVjdHNDb250ZXh0ID0ge1xuICB2ZXJpZnlQcm9kdWN0SWQ6IGplc3QuZm4oKSxcbiAgY3JlYXRlUHJvZHVjdDogamVzdC5mbigpLFxuICBlZGl0UHJvZHVjdDogamVzdC5mbigpLFxufTtcblxuamVzdC5tb2NrKCcuLi91c2VGb3JtJywgKCkgPT4gKHtcbiAgdXNlRm9ybTogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgZm9ybToge1xuICAgICAgaWQ6ICdtb2NrSWQnLFxuICAgICAgbmFtZTogJ21vY2tOYW1lJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnbW9ja0Rlc2NyaXB0aW9uJyxcbiAgICAgIGxvZ286ICdtb2NrTG9nbycsXG4gICAgICByZWxlYXNlRGF0ZTogJzIwMjMtMTItMzEnLFxuICAgICAgcmV2aWV3RGF0ZTogJzIwMjQtMTAtMzEnLFxuICAgIH0sXG4gICAgc2V0Rm9ybVZhbHVlOiBqZXN0LmZuKCksXG4gICAgb25DaGFuZ2U6IGplc3QuZm4oKSxcbiAgfSksXG59KSk7XG5cbmRlc2NyaWJlKCd1c2VQcm9kdWN0UmVnaXN0ZXInLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHNob3cgdGhlIGNvcnJlY3QgZGF0YScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VQcm9kdWN0UmVnaXN0ZXIobnVsbCwgbW9ja1Byb2R1Y3RzQ29udGV4dCBhcyBhbnkpKTtcblxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5mb3JtLmlkKS50b0JlKCdtb2NrSWQnKTtcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZm9ybS5uYW1lKS50b0JlKCdtb2NrTmFtZScpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5mb3JtLmxvZ28pLnRvQmUoJ21vY2tMb2dvJyk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmZvcm0uZGVzY3JpcHRpb24pLnRvQmUoJ21vY2tEZXNjcmlwdGlvbicpO1xuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5mb3JtLnJlbGVhc2VEYXRlKS50b0JlKCcyMDIzLTEyLTMxJyk7XG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmZvcm0ucmV2aWV3RGF0ZSkudG9CZSgnMjAyNC0xMC0zMScpO1xuICB9KTtcblxuICBpdCgndGhlIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWQgdG8gdXBkYXRlIGxvZ28nLCAoKSA9PiB7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUHJvZHVjdFJlZ2lzdGVyKG51bGwsIG1vY2tQcm9kdWN0c0NvbnRleHQgYXMgYW55KSk7XG4gICAgXG4gICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50Lm9uQ2hhbmdlKCdtb2NrTG9nbzInLCAnbG9nbycpO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50Lm9uQ2hhbmdlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQVlBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxZQUFZLEVBQUU7RUFBQSxPQUFPO0lBQzdCQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsZUFBZSxDQUFDO01BQ2pDQyxJQUFJLEVBQUU7UUFDSkMsRUFBRSxFQUFFLFFBQVE7UUFDWkMsSUFBSSxFQUFFLFVBQVU7UUFDaEJDLFdBQVcsRUFBRSxpQkFBaUI7UUFDOUJDLElBQUksRUFBRSxVQUFVO1FBQ2hCQyxXQUFXLEVBQUUsWUFBWTtRQUN6QkMsVUFBVSxFQUFFO01BQ2QsQ0FBQztNQUNEQyxZQUFZLEVBQUVWLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDdkJVLFFBQVEsRUFBRVgsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDcEIsQ0FBQztFQUNILENBQUM7QUFBQSxDQUFDLENBQUM7QUFBQyxJQUFBVyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQXRCSixJQUFBRSxNQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxtQkFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQXVELFNBQUFoQixZQUFB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