88cd5b3c17c46abc7653d73fb1aecbe5
_getJestObj().mock('../../hooks/useProductRegister');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ProductRegisterScreen = require("../ProductRegisterScreen");
var _useProductRegister = _interopRequireDefault(require("../../hooks/useProductRegister"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ProductRegisterScreen', function () {
  var mockUseProductRegister;
  var realClearForm = jest.fn();
  beforeEach(function () {
    mockUseProductRegister = _useProductRegister.default;
    mockUseProductRegister.mockReturnValue({
      form: {
        id: 'mockId',
        name: '',
        description: '',
        logo: '',
        releaseDate: '',
        reviewDate: ''
      },
      isLoading: false,
      onChange: jest.fn(),
      isProductIdValid: false,
      isReleaseDateValid: false,
      handleReleaseChange: jest.fn(),
      clearForm: realClearForm,
      handleCreateOrUpdateProduct: jest.fn()
    });
  });
  var mockRoute = {
    params: {
      product: null
    }
  };
  it('renders correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProductRegisterScreen.ProductRegisterScreen, {
        navigation: {
          pop: jest.fn()
        },
        route: mockRoute
      })),
      getByText = _render.getByText;
    expect(getByText('BANCO PICHINCHA')).toBeTruthy();
    expect(getByText('Formulario de Registro')).toBeTruthy();
    expect(getByText('ID')).toBeTruthy();
    expect(getByText('Nombre')).toBeTruthy();
    expect(getByText('Descripcion')).toBeTruthy();
    expect(getByText('Logo')).toBeTruthy();
    expect(getByText('Fecha Liberación')).toBeTruthy();
    expect(getByText('Fecha Revisión')).toBeTruthy();
    expect(getByText('Enviar')).toBeTruthy();
    expect(getByText('Reiniciar')).toBeTruthy();
  });
  it('calls handleCreateOrUpdateProduct on "Enviar" button press', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProductRegisterScreen.ProductRegisterScreen, {
        navigation: {
          pop: jest.fn()
        },
        route: mockRoute
      })),
      getByText = _render2.getByText;
    var sendButton = getByText('Enviar');
    _reactNative.fireEvent.press(sendButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(mockUseProductRegister.mock.results[0].value.handleCreateOrUpdateProduct).toHaveBeenCalled();
    });
  }));
  it('calls clearForm on "Reiniciar" button press', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ProductRegisterScreen.ProductRegisterScreen, {
        navigation: {
          pop: jest.fn()
        },
        route: mockRoute
      })),
      getByText = _render3.getByText,
      findByText = _render3.findByText;
    var resetButton = getByText('Reiniciar');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(resetButton);
      var resetButtonText = yield findByText('Reiniciar');
      var clearFormFunction = mockUseProductRegister.mock.results[0].value.clearForm;
      console.log('clearFormFunction:', clearFormFunction);
      expect(clearFormFunction).toHaveBeenCalled();
    }));
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9Qcm9kdWN0UmVnaXN0ZXJTY3JlZW4iLCJfdXNlUHJvZHVjdFJlZ2lzdGVyIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImplc3QiLCJkZXNjcmliZSIsIm1vY2tVc2VQcm9kdWN0UmVnaXN0ZXIiLCJyZWFsQ2xlYXJGb3JtIiwiZm4iLCJiZWZvcmVFYWNoIiwidXNlUHJvZHVjdFJlZ2lzdGVyIiwibW9ja1JldHVyblZhbHVlIiwiZm9ybSIsImlkIiwibmFtZSIsImRlc2NyaXB0aW9uIiwibG9nbyIsInJlbGVhc2VEYXRlIiwicmV2aWV3RGF0ZSIsImlzTG9hZGluZyIsIm9uQ2hhbmdlIiwiaXNQcm9kdWN0SWRWYWxpZCIsImlzUmVsZWFzZURhdGVWYWxpZCIsImhhbmRsZVJlbGVhc2VDaGFuZ2UiLCJjbGVhckZvcm0iLCJoYW5kbGVDcmVhdGVPclVwZGF0ZVByb2R1Y3QiLCJtb2NrUm91dGUiLCJwYXJhbXMiLCJwcm9kdWN0IiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiUHJvZHVjdFJlZ2lzdGVyU2NyZWVuIiwibmF2aWdhdGlvbiIsInBvcCIsInJvdXRlIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsImRlZmF1bHQiLCJfcmVuZGVyMiIsInNlbmRCdXR0b24iLCJmaXJlRXZlbnQiLCJwcmVzcyIsIndhaXRGb3IiLCJyZXN1bHRzIiwidmFsdWUiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX3JlbmRlcjMiLCJmaW5kQnlUZXh0IiwicmVzZXRCdXR0b24iLCJhY3QiLCJyZXNldEJ1dHRvblRleHQiLCJjbGVhckZvcm1GdW5jdGlvbiIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlcyI6WyJQcm9kdWN0UmVnaXN0ZXJTY3JlZW4udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yLCBhY3QgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBQcm9kdWN0UmVnaXN0ZXJTY3JlZW4gfSBmcm9tICcuLi9Qcm9kdWN0UmVnaXN0ZXJTY3JlZW4nO1xuaW1wb3J0IHVzZVByb2R1Y3RSZWdpc3RlciBmcm9tICcuLi8uLi9ob29rcy91c2VQcm9kdWN0UmVnaXN0ZXInOyBcblxuXG5qZXN0Lm1vY2soJy4uLy4uL2hvb2tzL3VzZVByb2R1Y3RSZWdpc3RlcicpO1xuXG5kZXNjcmliZSgnUHJvZHVjdFJlZ2lzdGVyU2NyZWVuJywgKCkgPT4ge1xuICBsZXQgbW9ja1VzZVByb2R1Y3RSZWdpc3RlcjogamVzdC5Nb2NrO1xuXG4gIGNvbnN0IHJlYWxDbGVhckZvcm0gPSBqZXN0LmZuKCk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgbW9ja1VzZVByb2R1Y3RSZWdpc3RlciA9IHVzZVByb2R1Y3RSZWdpc3RlciBhcyBqZXN0Lk1vY2s7XG4gICAgbW9ja1VzZVByb2R1Y3RSZWdpc3Rlci5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgZm9ybTogeyBpZDogJ21vY2tJZCcsIG5hbWU6ICcnLCBkZXNjcmlwdGlvbjogJycsIGxvZ286ICcnLCByZWxlYXNlRGF0ZTogJycsIHJldmlld0RhdGU6ICcnIH0sXG4gICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgb25DaGFuZ2U6IGplc3QuZm4oKSxcbiAgICAgIGlzUHJvZHVjdElkVmFsaWQ6IGZhbHNlLFxuICAgICAgaXNSZWxlYXNlRGF0ZVZhbGlkOiBmYWxzZSxcbiAgICAgIGhhbmRsZVJlbGVhc2VDaGFuZ2U6IGplc3QuZm4oKSxcbiAgICAgIGNsZWFyRm9ybTogcmVhbENsZWFyRm9ybSxcbiAgICAgIGhhbmRsZUNyZWF0ZU9yVXBkYXRlUHJvZHVjdDogamVzdC5mbigpLFxuICAgIH0pO1xuICB9KTtcblxuICBjb25zdCBtb2NrUm91dGUgPSB7XG4gICAgcGFyYW1zOiB7XG4gICAgICBwcm9kdWN0OiBudWxsLCBcbiAgICB9LFxuICB9O1xuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPFByb2R1Y3RSZWdpc3RlclNjcmVlbiBuYXZpZ2F0aW9uPXt7IHBvcDogamVzdC5mbigpIH0gYXMgYW55fSByb3V0ZT17bW9ja1JvdXRlIGFzIGFueX0gLz5cbiAgICApO1xuXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnQkFOQ08gUElDSElOQ0hBJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdGb3JtdWxhcmlvIGRlIFJlZ2lzdHJvJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdJRCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnTm9tYnJlJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdEZXNjcmlwY2lvbicpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnTG9nbycpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnRmVjaGEgTGliZXJhY2nDs24nKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChnZXRCeVRleHQoJ0ZlY2hhIFJldmlzacOzbicpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnRW52aWFyJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdSZWluaWNpYXInKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnY2FsbHMgaGFuZGxlQ3JlYXRlT3JVcGRhdGVQcm9kdWN0IG9uIFwiRW52aWFyXCIgYnV0dG9uIHByZXNzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXG4gICAgICA8UHJvZHVjdFJlZ2lzdGVyU2NyZWVuIG5hdmlnYXRpb249e3sgcG9wOiBqZXN0LmZuKCkgfSBhcyBhbnl9IHJvdXRlPXttb2NrUm91dGUgYXMgYW55fSAvPlxuICAgICk7XG5cbiAgICBjb25zdCBzZW5kQnV0dG9uID0gZ2V0QnlUZXh0KCdFbnZpYXInKTtcbiAgICBmaXJlRXZlbnQucHJlc3Moc2VuZEJ1dHRvbik7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChtb2NrVXNlUHJvZHVjdFJlZ2lzdGVyLm1vY2sucmVzdWx0c1swXS52YWx1ZS5oYW5kbGVDcmVhdGVPclVwZGF0ZVByb2R1Y3QpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIGNsZWFyRm9ybSBvbiBcIlJlaW5pY2lhclwiIGJ1dHRvbiBwcmVzcycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgZmluZEJ5VGV4dCB9ID0gcmVuZGVyKFxuICAgICAgPFByb2R1Y3RSZWdpc3RlclNjcmVlbiBuYXZpZ2F0aW9uPXt7IHBvcDogamVzdC5mbigpIH0gYXMgYW55fSByb3V0ZT17bW9ja1JvdXRlIGFzIGFueX0gLz5cbiAgICApO1xuICBcbiAgICBjb25zdCByZXNldEJ1dHRvbiA9IGdldEJ5VGV4dCgnUmVpbmljaWFyJyk7XG4gIFxuICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgIGZpcmVFdmVudC5wcmVzcyhyZXNldEJ1dHRvbik7XG5cbiAgICAvLyBVdGlsaXphIGZpbmRCeVRleHQgcGFyYSBhc2VndXJhcnRlIGRlIHF1ZSBlbCBib3TDs24gZGUgcmVpbmljaW8gZXN0w6EgcHJlc2VudGUgYW50ZXMgZGUgY29udGludWFyXG4gICAgY29uc3QgcmVzZXRCdXR0b25UZXh0ID0gYXdhaXQgZmluZEJ5VGV4dCgnUmVpbmljaWFyJyk7XG5cbiAgICAvLyBSZWFsaXphIGxhIGFzZXJjacOzbiBkZXNwdcOpcyBkZSBoYWJlciBjb25maXJtYWRvIHF1ZSBlbCBib3TDs24gZXN0w6EgcHJlc2VudGVcbiAgICBjb25zdCBjbGVhckZvcm1GdW5jdGlvbiA9IG1vY2tVc2VQcm9kdWN0UmVnaXN0ZXIubW9jay5yZXN1bHRzWzBdLnZhbHVlLmNsZWFyRm9ybTtcbiAgICBjb25zb2xlLmxvZygnY2xlYXJGb3JtRnVuY3Rpb246JywgY2xlYXJGb3JtRnVuY3Rpb24pOyAvLyBBZ3JlZ2EgZXN0ZSBjb25zb2xlLmxvZ1xuICAgIGV4cGVjdChjbGVhckZvcm1GdW5jdGlvbikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcbiAgfSk7XG5cbn0pOyJdLCJtYXBwaW5ncyI6IkFBTUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGdDQUFnQyxDQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFONUMsSUFBQUUsTUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsWUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksc0JBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLG1CQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBZ0UsSUFBQU0sV0FBQSxHQUFBTixPQUFBO0FBQUEsU0FBQUgsWUFBQTtFQUFBLElBQUFVLFFBQUEsR0FBQVAsT0FBQTtJQUFBUSxJQUFBLEdBQUFELFFBQUEsQ0FBQUMsSUFBQTtFQUFBWCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBVyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFLaEVDLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxZQUFNO0VBQ3RDLElBQUlDLHNCQUFpQztFQUVyQyxJQUFNQyxhQUFhLEdBQUdILElBQUksQ0FBQ0ksRUFBRSxDQUFDLENBQUM7RUFFL0JDLFVBQVUsQ0FBQyxZQUFNO0lBQ2ZILHNCQUFzQixHQUFHSSwyQkFBK0I7SUFDeERKLHNCQUFzQixDQUFDSyxlQUFlLENBQUM7TUFDckNDLElBQUksRUFBRTtRQUFFQyxFQUFFLEVBQUUsUUFBUTtRQUFFQyxJQUFJLEVBQUUsRUFBRTtRQUFFQyxXQUFXLEVBQUUsRUFBRTtRQUFFQyxJQUFJLEVBQUUsRUFBRTtRQUFFQyxXQUFXLEVBQUUsRUFBRTtRQUFFQyxVQUFVLEVBQUU7TUFBRyxDQUFDO01BQzVGQyxTQUFTLEVBQUUsS0FBSztNQUNoQkMsUUFBUSxFQUFFaEIsSUFBSSxDQUFDSSxFQUFFLENBQUMsQ0FBQztNQUNuQmEsZ0JBQWdCLEVBQUUsS0FBSztNQUN2QkMsa0JBQWtCLEVBQUUsS0FBSztNQUN6QkMsbUJBQW1CLEVBQUVuQixJQUFJLENBQUNJLEVBQUUsQ0FBQyxDQUFDO01BQzlCZ0IsU0FBUyxFQUFFakIsYUFBYTtNQUN4QmtCLDJCQUEyQixFQUFFckIsSUFBSSxDQUFDSSxFQUFFLENBQUM7SUFDdkMsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUYsSUFBTWtCLFNBQVMsR0FBRztJQUNoQkMsTUFBTSxFQUFFO01BQ05DLE9BQU8sRUFBRTtJQUNYO0VBQ0YsQ0FBQztFQUVEQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsWUFBTTtJQUM1QixJQUFBQyxPQUFBLEdBQXNCLElBQUFDLG1CQUFNLEVBQzFCLElBQUE3QixXQUFBLENBQUE4QixHQUFBLEVBQUNoQyxzQkFBQSxDQUFBaUMscUJBQXFCO1FBQUNDLFVBQVUsRUFBRTtVQUFFQyxHQUFHLEVBQUUvQixJQUFJLENBQUNJLEVBQUUsQ0FBQztRQUFFLENBQVM7UUFBQzRCLEtBQUssRUFBRVY7TUFBaUIsQ0FBRSxDQUMxRixDQUFDO01BRk9XLFNBQVMsR0FBQVAsT0FBQSxDQUFUTyxTQUFTO0lBSWpCQyxNQUFNLENBQUNELFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBQ2pERCxNQUFNLENBQUNELFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBQ3hERCxNQUFNLENBQUNELFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUNwQ0QsTUFBTSxDQUFDRCxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7SUFDeENELE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBQzdDRCxNQUFNLENBQUNELFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUN0Q0QsTUFBTSxDQUFDRCxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUNsREQsTUFBTSxDQUFDRCxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUNoREQsTUFBTSxDQUFDRCxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7SUFDeENELE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0VBQzdDLENBQUMsQ0FBQztFQUVGVixFQUFFLENBQUMsNERBQTRELE1BQUFoQyxrQkFBQSxDQUFBMkMsT0FBQSxFQUFFLGFBQVk7SUFDM0UsSUFBQUMsUUFBQSxHQUFzQixJQUFBVixtQkFBTSxFQUMxQixJQUFBN0IsV0FBQSxDQUFBOEIsR0FBQSxFQUFDaEMsc0JBQUEsQ0FBQWlDLHFCQUFxQjtRQUFDQyxVQUFVLEVBQUU7VUFBRUMsR0FBRyxFQUFFL0IsSUFBSSxDQUFDSSxFQUFFLENBQUM7UUFBRSxDQUFTO1FBQUM0QixLQUFLLEVBQUVWO01BQWlCLENBQUUsQ0FDMUYsQ0FBQztNQUZPVyxTQUFTLEdBQUFJLFFBQUEsQ0FBVEosU0FBUztJQUlqQixJQUFNSyxVQUFVLEdBQUdMLFNBQVMsQ0FBQyxRQUFRLENBQUM7SUFDdENNLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0YsVUFBVSxDQUFDO0lBRTNCLE1BQU0sSUFBQUcsb0JBQU8sRUFBQyxZQUFNO01BQ2xCUCxNQUFNLENBQUNoQyxzQkFBc0IsQ0FBQ1osSUFBSSxDQUFDb0QsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDQyxLQUFLLENBQUN0QiwyQkFBMkIsQ0FBQyxDQUFDdUIsZ0JBQWdCLENBQUMsQ0FBQztJQUNyRyxDQUFDLENBQUM7RUFDSixDQUFDLEVBQUM7RUFFRm5CLEVBQUUsQ0FBQyw2Q0FBNkMsTUFBQWhDLGtCQUFBLENBQUEyQyxPQUFBLEVBQUUsYUFBWTtJQUM1RCxJQUFBUyxRQUFBLEdBQWtDLElBQUFsQixtQkFBTSxFQUN0QyxJQUFBN0IsV0FBQSxDQUFBOEIsR0FBQSxFQUFDaEMsc0JBQUEsQ0FBQWlDLHFCQUFxQjtRQUFDQyxVQUFVLEVBQUU7VUFBRUMsR0FBRyxFQUFFL0IsSUFBSSxDQUFDSSxFQUFFLENBQUM7UUFBRSxDQUFTO1FBQUM0QixLQUFLLEVBQUVWO01BQWlCLENBQUUsQ0FDMUYsQ0FBQztNQUZPVyxTQUFTLEdBQUFZLFFBQUEsQ0FBVFosU0FBUztNQUFFYSxVQUFVLEdBQUFELFFBQUEsQ0FBVkMsVUFBVTtJQUk3QixJQUFNQyxXQUFXLEdBQUdkLFNBQVMsQ0FBQyxXQUFXLENBQUM7SUFFNUMsTUFBTSxJQUFBZSxnQkFBRyxNQUFBdkQsa0JBQUEsQ0FBQTJDLE9BQUEsRUFBQyxhQUFZO01BQ3BCRyxzQkFBUyxDQUFDQyxLQUFLLENBQUNPLFdBQVcsQ0FBQztNQUc1QixJQUFNRSxlQUFlLFNBQVNILFVBQVUsQ0FBQyxXQUFXLENBQUM7TUFHckQsSUFBTUksaUJBQWlCLEdBQUdoRCxzQkFBc0IsQ0FBQ1osSUFBSSxDQUFDb0QsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDQyxLQUFLLENBQUN2QixTQUFTO01BQ2hGK0IsT0FBTyxDQUFDQyxHQUFHLENBQUMsb0JBQW9CLEVBQUVGLGlCQUFpQixDQUFDO01BQ3BEaEIsTUFBTSxDQUFDZ0IsaUJBQWlCLENBQUMsQ0FBQ04sZ0JBQWdCLENBQUMsQ0FBQztJQUM5QyxDQUFDLEVBQUM7RUFDRixDQUFDLEVBQUM7QUFFSixDQUFDLENBQUMifQ==