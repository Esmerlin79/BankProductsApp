d312164bf7e05419b5cd56c6f1a6988f
var _react = require("@testing-library/react");
var _ProductReducer = require("../ProductReducer");
var _react2 = require("react");
describe('productReducer', function () {
  it('handles LOADING PRODUCT action correctly', function () {
    var initialState = {
      products: [],
      loading: false
    };
    var _renderHook = (0, _react.renderHook)(function () {
        return (0, _react2.useReducer)(_ProductReducer.productReducer, initialState);
      }),
      result = _renderHook.result;
    (0, _react.act)(function () {
      result.current[1]({
        type: 'LOADING PRODUCT',
        payload: true
      });
    });
    expect(result.current[0].loading).toEqual(true);
  });
  it('handles LOAD PRODUCTS action correctly', function () {
    var initialState = {
      products: [],
      loading: false
    };
    var sampleProducts = [{
      id: '1',
      name: 'Product 1'
    }];
    var _renderHook2 = (0, _react.renderHook)(function () {
        return (0, _react2.useReducer)(_ProductReducer.productReducer, initialState);
      }),
      result = _renderHook2.result;
    (0, _react.act)(function () {
      result.current[1]({
        type: 'LOAD PRODUCTS',
        payload: sampleProducts
      });
    });
    expect(result.current[0].products).toEqual(sampleProducts);
  });
  it('handles CREATE PRODUCT action correctly', function () {
    var initialState = {
      products: [],
      loading: false
    };
    var newProduct = {
      id: '2',
      name: 'Product 2'
    };
    var _renderHook3 = (0, _react.renderHook)(function () {
        return (0, _react2.useReducer)(_ProductReducer.productReducer, initialState);
      }),
      result = _renderHook3.result;
    (0, _react.act)(function () {
      result.current[1]({
        type: 'CREATE PRODUCT',
        payload: newProduct
      });
    });
    expect(result.current[0].products).toEqual([newProduct]);
  });
  it('handles UPDATE PRODUCT action correctly', function () {
    var initialState = {
      products: [{
        id: '1',
        name: 'Product 1'
      }],
      loading: false
    };
    var updatedProduct = {
      id: '1',
      name: 'Updated Product 1'
    };
    var _renderHook4 = (0, _react.renderHook)(function () {
        return (0, _react2.useReducer)(_ProductReducer.productReducer, initialState);
      }),
      result = _renderHook4.result;
    (0, _react.act)(function () {
      result.current[1]({
        type: 'UPDATE PRODUCT',
        payload: updatedProduct
      });
    });
    expect(result.current[0].products).toEqual([updatedProduct]);
  });
  it('handles DELETE PRODUCT action correctly', function () {
    var initialState = {
      products: [{
        id: '1',
        name: 'Product 1'
      }],
      loading: false
    };
    var productIdToDelete = '1';
    var _renderHook5 = (0, _react.renderHook)(function () {
        return (0, _react2.useReducer)(_ProductReducer.productReducer, initialState);
      }),
      result = _renderHook5.result;
    (0, _react.act)(function () {
      result.current[1]({
        type: 'DELETE PRODUCT',
        payload: productIdToDelete
      });
    });
    expect(result.current[0].products).toEqual([]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,